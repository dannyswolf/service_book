#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 27, 2019 08:58:37 PM EET  platform: Windows NT

import os
import PIL.Image
from PIL import ImageTk
import sqlite3
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import PhotoImage, messagebox
import image_viewer_support
import shutil  # για διαγραφη των φακέλων με τις εικόνες

dbase = "Service_book.db"


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    image_viewer_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt, selected_service_ID, images_path
    selected_service_ID = args[0]
    # Δημιουργία φακέλου για τις εικόνες
    images_path = "Service images/Service_ID_" + str(selected_service_ID)
    if not os.path.exists(images_path):
        os.makedirs(images_path)
    rt = root
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    image_viewer_support.init(w, top, *args, **kwargs)
    return (w, top)


def get_images_from_db():
    con = sqlite3.connect(dbase)
    cursor = con.cursor()
    cursor.execute("SELECT * FROM Service_images WHERE Service_ID =?", (selected_service_ID,))
    images = cursor.fetchall()
    cursor.close()
    con.close()

    # Δημιουργεία εικόνων
    # images[num][3] ==> Η εικόνα σε sqlite3.Binary
    for num, i in enumerate(images):
        with open(images_path + "/image" + str(num) + ".png", 'wb') as image_file:
            image_file.write(images[num][3])
    images = os.listdir(images_path)

    return images


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        self.images_path = images_path
        self.selected_image = ""  # Εικόνα που προβάλεται
        self.selected_service_ID = selected_service_ID
        self.images = get_images_from_db()
        self.index = 0
        self.new_size = (800, 600)
        self.top = top
        top.geometry("950x859+558+77")
        top.minsize(120, 1)
        top.maxsize(1980, 1980)
        top.resizable(1, 1)
        top.title("Εικόνες")
        top.configure(background="#006291")
        top.bind('<Escape>', self.quit)
        top.protocol("WM_DELETE_WINDOW", self.del_files)
        top.focus()

        self.previous_btn = tk.Button(top)
        self.previous_btn.place(relx=0.323, rely=0.955, height=30, relwidth=0.200)
        self.previous_btn.configure(activebackground="#ececec")
        self.previous_btn.configure(activeforeground="#000000")
        self.previous_btn.configure(background="#6b6b6b")
        self.previous_btn.configure(disabledforeground="#a3a3a3")
        self.previous_btn.configure(foreground="#ffffff")
        self.previous_btn.configure(highlightbackground="#d9d9d9")
        self.previous_btn.configure(highlightcolor="black")
        self.previous_btn.configure(pady="0")
        self.previous_btn.configure(text='''Προηγούμενη''')
        self.previous_btn.configure(command=self.show_previous)

        self.next_btn = tk.Button(top)
        self.next_btn.place(relx=0.508, rely=0.955, height=30, relwidth=0.200)
        self.next_btn.configure(activebackground="#ececec")
        self.next_btn.configure(activeforeground="#000000")
        self.next_btn.configure(background="#6b6b6b")
        self.next_btn.configure(disabledforeground="#a3a3a3")
        self.next_btn.configure(foreground="#ffffff")
        self.next_btn.configure(highlightbackground="#d9d9d9")
        self.next_btn.configure(highlightcolor="black")
        self.next_btn.configure(pady="0")
        self.next_btn.configure(text='''Επόμενη''')
        self.next_btn.configure(command=self.show_next)

        self.image_label = tk.Label(top)
        self.image_label.place(relx=0.042, rely=0.012, height=800, relwidth=0.929)
        self.image_label.configure(background="#006291")
        self.image_label.configure(disabledforeground="#a3a3a3")
        self.image_label.configure(text="")
        filename = self.images_path + "/image" + str(self.index) + ".png"
        self.selected_image = PIL.Image.open(filename)
        image = self.selected_image.resize(self.new_size)
        photo = ImageTk.PhotoImage(image)
        self.image_label.configure(image=photo)
        self.image_label.image = photo
        self.index = self.index + 1

        self.save_btn = tk.Button(top)
        self.save_btn.place(relx=0.046, rely=0.955, height=30, width=98)
        self.save_btn.configure(activebackground="#ececec")
        self.save_btn.configure(activeforeground="#000000")
        self.save_btn.configure(background="#63b057")
        self.save_btn.configure(disabledforeground="#a3a3a3")
        self.save_btn.configure(foreground="#ffffff")
        self.save_btn.configure(highlightbackground="#d9d9d9")
        self.save_btn.configure(highlightcolor="black")
        self.save_btn.configure(pady="0")
        self.save_btn.configure(text='''Αποθήκευση''')
        self.save_btn.configure(command=self.save_img)

    def quit(self, event=None):
        self.del_files()
        self.top.destroy()

    # Αποθήκευση επιλεγμένης εικόνας
    def save_img(self):
        self.selected_image.show()

    # Εμφάνηση επόμενης
    def show_next(self):
        filename = self.images_path + "/image" + str(self.index) + ".png"
        try:
            self.selected_image = PIL.Image.open(filename)
        except FileNotFoundError:
            messagebox.showinfo("Προσοχή", "Δεν υπάρχουν αλλες εικόνες")
            self.index -= 1
            self.top.focus()
            return
        image = self.selected_image.resize(self.new_size)
        photo = ImageTk.PhotoImage(image)
        self.image_label.configure(image=photo)
        self.image_label.image = photo
        self.index = self.index + 1

    # Εμφάνηση προηγούμενης
    def show_previous(self):
        self.index = self.index - 1
        filename = self.images_path + "/image" + str(self.index) + ".png"
        try:
            self.selected_image = PIL.Image.open(filename)
        except FileNotFoundError:
            messagebox.showinfo("Προσοχή", "Δεν υπάρχουν αλλες εικόνες")
            self.index += 1
            self.top.focus()
            return

        image = self.selected_image.resize(self.new_size)
        photo = ImageTk.PhotoImage(image)
        self.image_label.configure(image=photo)
        self.image_label.image = photo

    def del_files(self):
        shutil.rmtree(self.images_path, ignore_errors=True)
        self.top.destroy()


if __name__ == '__main__':
    vp_start_gui()
