#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 13, 2019 12:08:06 AM EET  platform: Windows NT

"""

Ενεργοποιήση προγράμματος με hash.md5 στον πίνακα sqlite_sequence πεδίο demo και key

todo προβολή όλων των εικόνων
todo uniq (στα πεδία των πινακων στην βαση) στους κωδικους και part_nr serial ονοματεπωνυμο τηλ

todo στην διαχηρηση αποθήκης τα αρχεία τα βάζει ακόμα στην βαση δεδομένων πρεπει να το αλλάξω
     να τα βάζει στο DB_PATH/Spare_parts/ΠΙΝΑΚΑΣ/ID_ΠΡΟΙΟΝΤΟΣ δες V 1.9.9

V 2.0.2 Επιδιόρθωση "," στους πελάτες στα προϊόντα γιατί έβαζε δυο κόμματα

V 2.0.1 Fix Index Error at add_spare_parts Line 462

V 2.0.0 Προσθήκη πελάτη στο προϊόν όταν εισάγουμε προϊόν σε κλήση ή συντήρηση

V 1.9.9 Αρχείο add_spare_parts_to_repository γραμμή 243, 350 αποκρυψη κουμπι
        Αρχείο edit_spare_parts_to_repository γραμμή 251, 270, 441, 442,  αποκρυψη κουμπι

V1.9.8  Διόρθωση της σειρας αν μετακινουμαστε με tab και αρχεία ανα έτος    10/07/2021

V1.9.7  FIX add ΜΕΛΑΝΟΤΑΙΝΙΕΣ στα Ανταλλακτικά

V1.9.6  Αλλαγή Διαδρομής βάσης απο Dropbox σε GOOGLE-DRIVE

V1.9.5 Με διαγραφή Εργασία αυτοματα διαγραφή και κλήσης      ---- 01/06/2020

V1.9.4 Fixed add spareparts to service windows      ---- 22/05/2020

V1.9.3 Fixed searching ΔΤΕ etc      ---- 19/05/2020

V1.9.2 Fixed  print when create Task     ---- 06/05/2020

V1.9.1 Fixed Task view    ---- 01/05/2020

V1.9.1 Ready for Django with separated files    ---- 24/04/2020

V1.9.0 Αδειασμα πεδίου αναζήτησεις στα μηχανήματα  ---- 23/04/2020

V1.9.0 File Separation From Db   ---- 22/04/2020

V1.8.9 Fix add_copier if head == "ID" or head == "id" or head == "Id":   ---- 21/04/2020

V1.8.9 Fix Customer Id = 3  to add_task when there is no Customer -----------20/4/2020

V1.8.8 Fix windows Open files -----------19/4/2020

V1.8.8 Fixed Μεταφορά φωτοτυπικού   ----------------------16/4/2020


V1.8.8 Fixed open pdf files in linux with spaces   ----------------------5/4/2020
todo fix bug with files when there is no Service ID -----------------Done

V1.8.7 Sort Calendar treeview with dates fix empty spaces on serials  ----------------------28/2/2020

V1.8.6 Changes thins when no customer on dbase ---------------------- -- -------------------22/2/2020
can't add spare parts from αποθήκη
can't add files
can add spare parts εκτος αποθήκης
export spare_parts_db to Excel

V1.8.5 Fix bugs with spare_parts when there is no id on machine -- -------------------21/2/2020
Οταν καναμε κληση χωρις να ειναι το μηχάνημα στο συστημα επερνε service_id ενω δεν δημηουργούμε service στην βάση
Τωρα βάζει service_id = 0 και βαζουμε Calendar_ID και περνουμε ανταλλακτικά απο το Calendar

V1.8.4 Check if demo with two methods   -----------------  ------ -------------------15/2/2020

V1.8.3 Ability to change companies and models of machines  ------ -------------------14/2/2020
Fix some bugs on add_service and search errors

V1.8.2 Price Label ---------------------------------------------- -------------------14/2/2020

V1.8.1 Changes on edit_task unable to change customer and Machine -------------------13/2/2020

V1.8.0 ability to change service data  ---------------  -----------------------------12/2/2020
Αρχείο data_settings

V1.7.8 changes on activation    ----------------------  -----------------------------11/2/2020

V1.7.8 changes on email_settings ----------------------  -----------------------------11/2/2020

V1.7.7 Ταξινόμηση με ημερομηνία στο ιστορικό συντήρησης  -----------------------------10/2/2020
Αρχειο activate Ενεργοποιήση προγράμματος
todo να γινεται εισοδος με email την πρώτη φορα για επιβεβαίωση ότι ειναι αυτός ο αγοραστης  -- Done

V1.7.6 Τεχνικός στην συντήρηση -------------------------------------------------------9/2/2020
todo προσθήκη τεχνικού στην συντήρηση -- Done

V1.7.5 Send Screen Shot emails -------------------------------------------------------9/2/2020
todo να στέλνει σε email τα screen shot ----Done

V1.7.4 Send email Ιστορικό φωτοτυπικού -----------------------------------------------08/02/2020

V1.7.3 Change layout  ----------------------------------------------------------------08/02/2020

V1.7.3 Fix ScreenShot ----------------------------------------------------------------08/02/2020
todo δεν παιζει καλα το screen shot  Done

V1.7.3 Fix προσθήκη ανταλλακτικών εβγαζε μήνυμα ότι δεν εχει τιμή  ---------------------------08/02/2020

V1.7.3 Fix προσθήκη service και πατάει ο χρήστης ακυρο ---------------------------08/02/2020
todo αν ο χρήστης πατήση ακυρο κατα την προσθήκη επισκευής τι θα γίνει με τα ανταλλακτικα που έχουν οριστεί με νεο service_id  Done

V1.7.2 Fix screenshots on windows      -------------------------------------------07/02/2020

V1.7.2 Fix screenshots on linux      -------------------------------------------07/02/2020

V1.7.2 Fix emails                     -------------------------------------------07/02/2020
todo να δουλευει και χωρίς internet Done
V1.7.1 Fix focus on previous windows  -------------------------------------------06/02/2020

V1.7.0 added email_settings   ---------------------------------------------------05/02/2020
Αρχείο email_settings

V1.6.2 Δυνατότητα αλλαγής εταιρείας - μοντέλου φωτοτυπικού  ----------------------05/02/2020

V1.6.1 Fix prints on windows Αλλαγή εικονιδίων  ------ ---------------------------04/02/2020

V1.6.0 Log on customer when machine transported ------ ---------------------------03/02/2020
todo να μπει στις σημειώσεις πότε ενεργοποίθηκε/απενεργοποίθηκε φωτοτυπικό και πελάτης -- Done

V1.5.9 Διαγραφή εταιρείας απο αποθήκη ---------------- ---------------------------03/02/2020

V1.5.8 Διαγραφή εικόνων μετά την διαγραφή ανταλλακτικού ------------- -------------03/02/2020

V1.5.7 Προσθήκη αρχείων στα ανταλλακτικά -------------- -------------- -------------02/02/2020

V1.5.6 Fix prints on linux need okular ---------------- -------------- -------------31/01/2020

V1.5.5 Backup Αποθήκης ------------- ------------------ -------------- -------------31/01/2020

V1.5.4 Αναζήτηση ΔΤΕ και στο Service ------------------ -------------- -------------31/01/2020

V1.5.3 Fix bug on add_task ---------------------------- -------------- -------------30/01/2020

V1.5.2 Τροποποιήσης στην διαγραφή ιστορικού και εργασιών -------------- -------------30/01/2020
Τροποποιήσης στην εισαγωγεί πίνακα
todo στην προσθήκη πίνακα να βγάζει αν υπάρχει ο πήνακας (δλδ εταιρεία)  ---- Done

V1.5.1 Προσθήκη πίνακα στην  αποθήκη ---------------------------------- -------------29/01/2020

V1.5.0 Προσθήκη ανταλλακτικών στην αποθήκη και υπολογισμός συνόλου ----- -------------28/01/2020
todo add_spare_parts_to_repository  ---------- Done
todo edit_spare_parts_to_repository line 349 ---------- Done
todo  ελεγχος κωδικού οταν εισαγουμε νεο προιον στην αποθήκη  -- Done

V1.4.9 Ενημέρωση συνόλου στην αποθήκη όταν υπάρχει τιμή στα ανταλλακτικά -------------27/01/2020


V1.4.8 Screen Shot to Pdf  -----------------  ----------------------------------------26/01/2020

V1.4.7 Προσθήκη ανταλλακτικών εκτός αποθήκης  ----------------------------------------25/01/2020
fix bug οταν προσθέταμε νέο φωτοτυπικό απο add_task

V1.4.6 Προσθήκη αποθήκης στο κεντρικό παράθυρο  ----------------------------------------25/01/2020
todo Αποθήκη για τα ανταλλακτικά που εισάγουμε στο local version  -- Done

V1.4.5 Προσθήκη πελάτη στο παράθυρο add_task  ------------------------------------------25/01/2020
Fix εμφάνηση φωτοτυπικών όταν αλλάζουμε πελάτη στο edit_task

V1.4.4 Διαγραφή εργασίων  --------------------------------------------------------------25/01/2020

V1.4.3 Warning fixed  -------------------------------------------------------------------24/01/2020
Biger sizes on print
todo fix # Σειριακός αριθμός warning   ---- Done

V1.4.2 Print to pdf Added       ---------------------------------------------------------22/01/2020

V1.4.1 Progressbar on email     ---------------------------------------------------------20/01/2020

V1.4.0 Αποστολή αρχείων με email ---------------------------------------------------------20/01/2020
Προσθήκη Customer_ID στο Calendar
todo εμφάνηση αρχείων όταν προσθέτουμε αρχεία --- Done

V1.3.8 Αναζήτηση ΔΤΕ                     -------------------------------------------------19/01/2020

V1.3.7 check name phone mobile serial    -------------------------------------------------18/01/2020

V1.3.6 Διαγραφή πεδίων μετα απο αναζήτηση-------------------------------------------------18/01/2020

V1.3.5 Fix bug on edit_task --------------------------------------------------------------17/01/2020

V1.3.5 Διορθώσης add_task και edit_task όταν κάνουμε αλλαγές στα στοιχεία πελάτη ---------17/01/2020

V1.3.5 Διορθόσης στην ημερομηνία == ========================== ----------------------------17/01/2020

V1.3.4 fix send email    ========== ========================== ----------------------------17/01/2020

V1.3.3 Τροποποίηση αποστολής email =========================== ----------------------------16/01/2020

V1.3.2 Εμφάνηση ολοκληρωμένων εργασίων σε επιλεγμένες εργασίες ----------------------------16/01/2020
todo fix on image_viewer ---- Done

V1.3.1 log file και today στο settings  = ==== --------------------------------------------15/01/2020

V1.3.0 Ημερολόγιο στην επεξεργασία κλήσης ==== --------------------------------------------15/01/2020
στο αρχειο edit_task

V1.2.9 Δυνατότητα αλλαγών στο edit_task ==== ------------------------------------------------14/01/2020

V1.2.8 Δυνατότητα εισαγωγείς TONER ========= ------------------------------------------------14/01/2020
fix some bugs adding copier

V1.2.7 Εμφάνιση ανταλλακτικών του κάθε πελάτη ------------------------------------------------13/01/2020
Προσθήκη Customer_ID στα Ανταλλακτικά
Προσθήκη Φωτοτυπικό στα Ανταλλακτικά

V1.2.6 Δημιουργία ημερολογίου χωρίς υπάρχον φωτοτυπικό =======================================12/01/2020

V1.2.5 Προσθήκη drop down Calendar ===========================================================12/01/2020
Ενήμερωση βάσης δεδομένων
Προσθήκη Μετρητής στο Calendar μετά το Service_ID
Προσθήκη Επ_Service στο Calendar μετά το Μετρητής


V1.2.4 Αλλαγές στο Ημερολόγιο εργασίων  ========================================================11/01/2020
Ενήμερωση βάσης δεδομένων
Προσθήκη Ενέργειες στο Calendar μετά απο Σκοπός
Προσθήκη Service_ID στο Calendar μετά απο ΔΤΕ


V1.2.3 Αλλαγές στο Ημερολόγιο εργασίων  ============ ===========================================11/01/2020
todo service_id sto add_task === Done

V1.2.2 Ενημέρωση αποθήκης όταν αφερούμε ανταλλακτικά ===========================================11/01/2020
fix bug on copier_id στην προσθήκη task

V1.2.1 Fix Αποστολή email ======================================================================09/01/2020
δεν στέλνει το φωτοτυπικό οταν ο χρήστης εισάγει φωτοτυπικό που δεν είναι δηλομένο στον πελάτη----Done
Διαφορες αλλαγές

V1.2.0 Αποστολή email ===== ================================================================09/01/2020
Αρχεία 1 mail

V1.1.1 Προσθήκη τηλ στο tasks ================================================================08/01/2020
Αρχεία 1 settings
Ημερομηνία απο το ιντερνετ
δυνατότητα εισαγωγής μηχανήματος στο task χωρίς να είναι στην βάση

V1.0.1 Προσθήκη Διαγραφή ανταλλακτικών ========================================================07/01/2020
added new icons
todo fix search on tasks   --- Done
todo change colors  Done


V1.0.0 Demo ready == ==========================================================================06/01/2020

V1.0.0 Task notifier ==========================================================================06/01/2020


V0.9.9 Επεξεργασία ημερολογίου =================================================================05/01/2020
Αρχεία 1 edit_task

V0.9.8 Ημερολόγιο ===============================================================================05/01/2020
Αρχεία 1 add_task

V0.9.7 Χρήση για 30 μέρες Demo ==================================================================05/01/2020


V0.9.6 sizes to files ============================================================================05/01/2020
todo εισαγωγη οχι μονο jpg αρχείων ---Done
todo sizes to upladed images   -------Done

V0.9.5 Demo Version not ready  ===================================================================05/01/2020
Μέχρι 3 πελάτες και 5 φωτοτυπικά (στο σύνολο)

V0.9.4 προσθήκη ανταλλακτικων και χωρίς βάση αποθήκης ============================================04/01/2020
Αρχεία 1 insert_spare_parts
todo προσθήκη ανταλλακτικων και χωρίς βάση αποθήκης ---- Done
todo notebook tabs colors -------------------------------Done
todo one file for logs  ---------------------------------Done


V0.9.3 Τροποποιηση log αρχεία ===================================================================04/01/2020

V0.9.2 Προσθήκη ανταλλακτικών και στην επεξεργασία service =======================================04/01/2020
todo στο add_spare_parts βάζει οσα τεμάχεια έχει στην αποθήκη--Done ------------------------------04/01/2020

V0.9.1 Προβολή ανταλλακτικών  στην επεξεργασία service  ==========================================04/01/2020

V0.9.0 Προσθήκη ανταλλακτικών  ===================================================================03/01/2020
Αρχεία 1 add_spare_parts

V0.8.2 Change icons   ============================================================================02/01/2020

V0.8.1 Change layout   ============================================================================02/01/2020

V0.8.0 Προσθήκη ημερολογίου =======================================================================02/01/2020

V0.7.9 Αλλαγή χρωμάτων ============================================================================02/01/2020

V0.7.8 Ευκολη αλλαγή καρτέλων =====================================================================02/01/2020

V0.7.7 Backup added ===============================================================================02/01/2020

V0.7.6 ΤNotebook και Tabs ==========================================================================02/01/2020

V0.7.5 Fix  bug μεταφορά φωτοτυπικού ===============================================================31/12/2019

V0.7.4 Fix some bugs ===============================================================================29/12/2019

V0.7.3 Fix some bugs ===============================================================================29/12/2019

V0.7.2 Δυνατότηα ενεργοποιησεις φωτοτυπικών  =======================================================29/12/2019
Αρχεία 1 enable_copiers

V0.7.1 Δυνατότηα ενεργοποιησεις πελατών  ===========================================================29/12/2019
Αρχεία 1 enable_customers


V0.7.0 Ελεγχος δυπλής επωνυμίας και σειριακού αριθμού  =============================================29/12/2019

V0.6.9 Δυνατότηα Απενεργοποιησεις πελατών και φωτοτυπικών ==========================================29/12/2019

V0.6.8 Προβολή και αποθήκευση αρχείων pdf ==========================================================28/12/2019

V0.6.7 Δυνατότητα προσθήκης αρχείων και στην επεξεργασία service ===================================28/12/2019


V0.6.6 Προσθήκη Αρχείων  ===========================================================================27/12/2019
Αρχεία 1 image_viewer
Δυνατότητα εισαγωγεις αρχείων και προβλολής αυτών

V0.6.5 Προσθήκη Αναζήτησης στο copiers_log ==========================================================26/12/2019

V0.6.4 Προσθήκη copiers_log  ========================================================================25/12/2019
Αρχεία 1 copiers_log
Δυνατότητα προβολής μεταφοράς Φωτοτυπικού

V0.6.3 Fixed some bug on search with self.service_treeview ==========================================25/12/2019

V0.6.2 Προσθήκη ΔΤΕ, ελεγχος κατα την εισαγωγη φωτοτυπικού και αλλαγές στην εμφάνηση ================25/12/2019

V0.5.5 ==============================================================================================23/12/2019
Αρχεία 1 change_customer
Δυνατότητα μεταφοράς Φωτοτυπικού

V0.4.4 ==============================================================================================22/12/2019
Αρχεία 1 add_copier
Δυνατότητα προσθήκης Φωτοτυπικού

V0.3.4 ==============================================================================================21/12/2019
1. Δυνατότητα προσθήκης Service_data
2. Icons
3. Ενημέρωση στοιχείων πελάτη στο κεντρικό παράθυρο

Αρχεία 1 add_service  == >> Παράθυρο προσθήκης επισκευής
V0.3.2 V0.3.2 Προσθήκη αυτόματης Ημερομηνίας στην προσθήκη ιστορικού επισκευών ========================20/12/2019

Αρχεία 1. add_service  == >> Παράθυρο προσθήκης επισκευής
V 0.3.1 Εισαγωγή επισκευής σε νέο παράθυρο ====================================================== Εγινε 18/12/2019

Αρχεία 1. add_customers  == >> Παράθυρο προσθήκης πελάτη
V 0.2.1 Προσθήκη πελάτη σε νέο παράθυρο ========================================================= Εγινε 18/12/2019

Αρχεία 1. edid_service_windows  == >> Παράθυρο επεξεργασίας ιστορικού φωτοτυπικού
V 0.1.1 Προσθήκη επεξεργασία ιστορικού φωτοτυπικού ============================================= Εγινε 18/12/2019

να αλλάξω χρώμα στο μετρητής έναρξης και έναρξη αφου αφορούν το φωτοτυπικό ================  Εγινε   18/12/2019

1) Το φωτοτυπικό χρειάζεται πάντα Πελάτη_ID
2) Το Service χρειάζεται πάντα Copier_ID

Επιλέγουμε με διπλό click πρώτα τον πελάτη και στην συνέχεια με διπλό click το φωτοτυπικό

v 0.0.1 Ενας πελάτης με πολλά φωτοτυπικά το κάθε φωτοτυπικό με πολλά Service ------------------------14/12/2019
        Η ημερομηνία εναρξης και Μετρητής εναρξης είναι πεδία του φωτοτυπικού γιατί πάνε με το φωτοτυπικό
"""
from datetime import timedelta
from tkinter import TclError

import pandas as pd
from tkcalendar import Calendar

import activate
import add_copier  # Προσθήκη Φωτοτυπικού
import add_customers  # Δημιουργία παραθύρου προσθήκης πελάτη
import add_spare_parts_to_repository
import add_task
import change_customer
import copiers_log
import data_settings
import edit_spare_parts_to_repository
import edit_task
import email_settings
import enable_copiers
import enable_customers
import service_book_colors_support
from add_service import *
from edit_service_window import *  # Δημιουργία παραθύρου επεξεργασίας ιστορικού επισκευής
from settings import dbase, demo, service_book_version, root_logger, today, spare_parts_db  # settings
# ******************************************Pyinstaller Imports******************************************
from reportlab import Version as __RL_Version__
from reportlab.graphics.barcode import ecc200datamatrix
from reportlab.graphics.barcode.common import *
from reportlab.graphics.barcode.code39 import *
from reportlab.graphics.barcode.code93 import *
from reportlab.graphics.barcode.code128 import *
from reportlab.graphics.barcode.usps import *
from reportlab.graphics.barcode.usps4s import USPS_4State
from reportlab.graphics.barcode.qr import QrCodeWidget
from reportlab.platypus import Spacer, SimpleDocTemplate, Table, TableStyle, Preformatted, PageBreak
from reportlab.lib.units import inch, cm
from reportlab.lib import colors
from reportlab.pdfgen.canvas import Canvas
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus.paragraph import Paragraph
from reportlab.platypus.frames import Frame
from reportlab.platypus.flowables import XBox, KeepTogether
from reportlab.graphics.shapes import Drawing, Rect, Line
from reportlab.graphics.barcode import getCodes, getCodeNames, createBarcodeDrawing, createBarcodeImageInMemory
from reportlab.pdfbase import _fontdata_enc_winansi
from reportlab.pdfbase import _fontdata_enc_macroman
import babel.numbers
import xlsxwriter


sys.stderr.write = root_logger.error
sys.stdout.write = root_logger.info

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True


# Περίδος λειτουργείας
def days_left():
    start_day = 0
    con = sqlite3.connect(dbase)
    c = con.cursor()

    # get start day
    c.execute("SELECT * FROM sqlite_sequence")
    names = c.fetchall()

    for name in names:
        if name[0] == "start":
            start_day = name[1]

    con.close()

    if not start_day:  # if not start day write it
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("UPDATE sqlite_sequence SET seq =? WHERE name = 'start'", (today,))
        con.commit()
        con.close()
        start_day = today

    # datetime_object = datetime.strptime(datetime_str, '%m/%d/%y %H:%M:%S')

    start_day_date = datetime.strptime(start_day, "%d %m %Y")
    if demo:
        last_day = start_day_date + timedelta(days=30)
    else:
        last_day = start_day_date + timedelta(days=365)

    days_left_timedelta = last_day - datetime.strptime(today, "%d %m %Y")
    left_days = days_left_timedelta.days

    return left_days


# Αποκόμιση  πινάκων απο την βάση δεδομένων
def get_tables():
    """
        Αποκόμιση  πινάκων απο την βάση δεδομένων
    """
    no_needed_tables = ['ΠΡΩΤΟΣ_ΟΡΟΦΟΣ', "ΧΧΧ", "sqlite_sequence", "Images"]
    con = sqlite3.connect(spare_parts_db)
    c = con.cursor()
    c.execute("select name from sqlite_master where type = 'table' ORDER BY name;")
    tables = c.fetchall()
    c.close()
    con.close()
    companies = []
    for table in tables:
        if table[0] not in no_needed_tables:
            companies.append(table[0])

    return companies


w = None
root = None
rt = None


def vp_start_gui():
    '''Starting point when module is the main routine.'''

    global val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    service_book_colors_support.init(root, top)
    root.mainloop()


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    service_book_colors_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


def show_info():
    messagebox.showinfo("Πληροφορίες", f""" 
        Αuthor     : "Jordanis Ntini"
        Credits    : ['Athanasia Tzampazi']
        Version    : '{service_book_version}'
        Maintainer : "Jordanis Ntini"
        Email      : "ntinisiordanis@gmail.com"
        Status     : 'Development'
        Language   : 'https://www.python.org/'
        Gui        : 'https://docs.python.org/3/library/tk.html'
        License    : 'GPL-3.0'
       
    """)


class Toplevel1:

    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        self.service_table = "Service"
        self.customer_table = "Πελάτες"
        self.copier_table = "Φωτοτυπικά"
        self.selected_customer_id = ""
        self.selected_copier_id = ""
        self.selected_customer = ""
        self.selected_copier = ""
        self.companies = get_tables()
        self.selected_repository_company = ""
        self.repository_headers = ""
        # self.service_calendar = DateEntry

        self.customers_headers = []
        self.copiers_headers = []
        self.service_headers = []
        self.tasks_headers = []
        self.spare_parts_headers = []
        self.today = datetime.strptime(today, "%d %m %Y")
        self.year = self.today.year
        self.month = self.today.month
        self.day = self.today.day

        self.remaining_days = days_left()
        if self.remaining_days < 10:
            messagebox.showwarning("Προσοχή", f"Η Υποστήρηξη θα στματατήσει σε {self.remaining_days} μέρες")
        elif self.remaining_days < 0:
            messagebox.showwarning("Προσοχή", f"Η Υποστήρηξη έληξε παρακαλώ ανανεώστε την υποστήριξη συντήρησης")
            pass
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('clam')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font=("Calibri", 10))
        # self.style.map('.',background=[('selected', _compcolor), ('active',_ana2color)])
        self.top = top
        top.geometry("1324x800+150+50")
        top.minsize(120, 1)
        top.maxsize(3604, 3881)
        top.resizable(1, 1)

        top.title("Βιβλίο Επισκευών " + service_book_version)
        top.configure(background="#bfc2b6")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.bind('<F1>', self.add_customer_event)
        top.bind('<Escape>', self.quit)
        top.bind('<F2>', self.add_copier)
        if sys.platform == "win32":
            top.iconbitmap("icons/icon.ico")

        # ---------------------------------------Menu-----------------------------------------
        self.menubar = tk.Menu(top, font=("Calibri", 10, "bold"), bg=_bgcolor, fg=_fgcolor)
        # --------------------------------------   MENU   -----------------------------------------
        self.filemenu = tk.Menu(self.menubar, tearoff=0)
        self.filemenu.add_command(label="Προσθήκη πελάτη --> F1", command=self.add_customer)
        self.filemenu.add_command(label="Ενεργοποίηση πελάτων", command=self.enable_customers)

        # self.filemenu.add_command(label="Προσθήκη --> F1", command=self.add_to)
        # self.filemenu.add_command(label="Επεξεργασία --> F3", command=self.edit)
        self.filemenu.add_separator()
        # self.filemenu.add_command(label="Διαγραφή", command=self.del_from_tree)
        self.filemenu.add_command(label="Εξωδος --> Esc", command=top.quit)
        self.menubar.add_cascade(label="Πελάτες", menu=self.filemenu)

        # self.backup_menu = tk.Menu(self.menubar, tearoff=0)
        # self.menubar.add_cascade(label="Αντίγραφο ασφαλείας", menu=self.backup_menu)
        # self.backup_menu.add_command(label="Δημιουργία αντίγραφο ασφαλείας!", command=self.backup)
        #
        self.copier_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Μηχανήματα", menu=self.copier_menu)
        self.copier_menu.add_command(label="Προσθήκη Μηχανήματος -> F2", command=self.add_copier)
        self.copier_menu.add_command(label="Μεταφορά Μηχανήματος", command=self.change_copier)
        self.copier_menu.add_command(label="Ενεργοποίηση Μηχανήματος", command=self.enable_copiers)
        self.copier_menu.add_command(label="Ιστορικό Μεταφορών", command=self.get_copiers_log)

        self.backup_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Backup", menu=self.backup_menu)
        self.backup_menu.add_command(label="Backup Service Book", command=self.backup)
        self.backup_menu.add_command(label="Backup Αποθήκη", command=self.backup_repository)
        self.backup_menu.add_command(label="Αποθήκη σε Excel", command=self.to_excel)

        # self.licence_menu = tk.Menu(self.menubar, tearoff=0)
        # self.menubar.add_cascade(label="Αδεια", menu=self.licence_menu)
        # self.licence_menu.add_command(label="Πληροφορίες χρήσης", command=self.show_licence)

        self.settings_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Ρυθμίσεις", menu=self.settings_menu)
        self.settings_menu.add_command(label="Ρυθμίσεις Email", command=self.set_email_settings)
        self.settings_menu.add_command(label="Δεδομένα Service", command=self.set_data_settings)
        # self.settings_menu.add_command(label="Ρυθμίσεις Αποθήκη", command=self.backup_repository)

        self.info_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Info", menu=self.info_menu)
        self.info_menu.add_command(label="Πληροφορίες", command=show_info)
        self.info_menu.add_command(label="Υποστήρηξη", command=self.show_licence)
        self.info_menu.add_command(label="Ενεργοποίηση", command=self.activate)

        top.configure(menu=self.menubar)

        #  Modify the font of the body
        self.style.theme_create("mystyle.Treeview", parent="clam")
        self.style.configure("mystyle.Treeview.Heading", background="gray5", foreground="#006291", relief="groove")
        self.style.map('mystyle.Treeview', foreground=self.fixed_map('foreground'),
                       background=self.fixed_map('background'))

        # ==================================== Εμφάνηση δεδομένων ==============================================
        self.style.configure("mystyle.Treeview", highlightthickness=1, font=('Calibri', "10"))
        self.style.configure("mystyle.Treeview.Heading", font=('Calibri', 11, 'bold'), background="gray90",
                             foreground="black", relief="groove", )
        #                     relief=[('active', 'groove'), ('pressed', 'sunken')])  # Modify the font of the headings
        self.style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})])  # Remove the borders
        self.style.configure("mystyle.Treeview", background="white", rowheight=30)

        # ==============================  Notebook style  =============
        self.style.map('TNotebook.Tab', background=[('selected', "#6b6b6b"), ('active', "#69ab3a")])
        self.style.map('TNotebook.Tab', foreground=[('selected', "white"), ('active', "white")])

        # ==========================  Notebook  ==================================
        self.notebook = ttk.Notebook(top)
        self.notebook.place(relx=0.221, rely=0.005, relheight=0.540, relwidth=0.765)
        self.notebook.configure(takefocus="")

        self.copiers_frame = tk.Frame(self.notebook)
        self.notebook.add(self.copiers_frame, padding=3)
        self.notebook.tab(0, text="Μηχανήματα", compound="left", underline="-1", )
        self.copiers_frame.configure(background="#CFD5CE")
        self.copiers_frame.configure(highlightbackground="#d9d9d9")
        self.copiers_frame.configure(highlightcolor="black")

        self.customer_frame = tk.Frame(self.notebook)
        self.notebook.add(self.customer_frame, padding=3)
        self.notebook.tab(1, text="Πελάτης", compound="left", underline="-1", )
        self.customer_frame.configure(background="#CFD5CE")
        self.customer_frame.configure(highlightbackground="#d9d9d9")
        self.customer_frame.configure(highlightcolor="black")

        self.copier_frame = tk.Frame(self.notebook)
        self.notebook.add(self.copier_frame, padding=3)
        self.notebook.tab(2, text="Μηχάνημα", compound="left", underline="-1", )
        self.copier_frame.configure(background="#CFD5CE")
        self.copier_frame.configure(highlightbackground="#d9d9d9")
        self.copier_frame.configure(highlightcolor="black")

        self.service_frame = tk.Frame(self.notebook)
        self.notebook.add(self.service_frame, padding=3)
        self.notebook.tab(3, text="Συντήρηση", compound="left", underline="-1", )
        self.service_frame.configure(background="#d9d9d9")
        self.service_frame.configure(highlightbackground="#d9d9d9")
        self.service_frame.configure(highlightcolor="black")

        self.spare_parts_frame = tk.Frame(self.notebook)
        self.notebook.add(self.spare_parts_frame, padding=3)
        self.notebook.tab(4, text="Ανταλλακτικά", compound="left", underline="-1", )
        self.spare_parts_frame.configure(background="#d9d9d9")
        self.spare_parts_frame.configure(highlightbackground="#d9d9d9")
        self.spare_parts_frame.configure(highlightcolor="black")

        self.repository_frame = tk.Frame(self.notebook)
        self.notebook.add(self.repository_frame, padding=3)
        self.notebook.tab(5, text="Αποθήκη", compound="left", underline="-1", )
        self.repository_frame.configure(background="#d9d9d9")
        self.repository_frame.configure(highlightbackground="#d9d9d9")
        self.repository_frame.configure(highlightcolor="black")

        self.select_repository_company_label = tk.Label(self.repository_frame)
        self.select_repository_company_label.place(relx=0.025, rely=0.050, relheight=0.060, relwidth=0.260)
        self.select_repository_company_label.configure(activebackground="#f9f9f9")
        self.select_repository_company_label.configure(activeforeground="black")
        self.select_repository_company_label.configure(background="#6b6b6b")
        self.select_repository_company_label.configure(disabledforeground="#a3a3a3")
        self.select_repository_company_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.select_repository_company_label.configure(foreground="#ffffff")
        self.select_repository_company_label.configure(highlightbackground="#d9d9d9")
        self.select_repository_company_label.configure(highlightcolor="black")
        self.select_repository_company_label.configure(relief="groove")
        self.select_repository_company_label.configure(text='''Επιλογή εταιρείας''')
        self.repository_company_combobox = ttk.Combobox(self.repository_frame)
        self.repository_company_combobox.place(relx=0.29, rely=0.050, relheight=0.060, relwidth=0.200)
        self.repository_company_combobox.configure(values=self.companies)
        self.repository_company_combobox.configure(takefocus="")
        self.repository_company_combobox.bind("<<ComboboxSelected>>", self.get_repository)
        self.repository_company_combobox.configure(state="readonly")
        self.company_image = tk.Label(self.repository_frame)

        self.add_table_to_repository_btn = tk.Button(self.repository_frame)
        self.add_table_to_repository_btn.place(relx=0.630, rely=0.015, relheight=0.130, relwidth=0.150)
        self.add_table_to_repository_btn.configure(background="#5fa15f")
        self.add_table_to_repository_btn.configure(foreground="white")
        self.add_table_to_repository_btn_img = PhotoImage(file="icons/add_table_to_repository.png")
        self.add_table_to_repository_btn.configure(image=self.add_table_to_repository_btn_img)
        self.add_table_to_repository_btn.configure(text="Προσθήκη εταιρείας")
        self.add_table_to_repository_btn.configure(compound="top")
        self.add_table_to_repository_btn.configure(command=self.add_table)

        self.repository_table = StringVar()
        self.repository_table.trace("w", self.check_table)
        self.add_table_entry = tk.Entry(self.repository_frame)
        self.add_table_entry.place(relx=0.630, rely=0.150, relheight=0.065, relwidth=0.150)
        self.add_table_entry.configure(background="white")
        self.add_table_entry.configure(disabledforeground="#a3a3a3")
        self.add_table_entry.configure(font=("Calibri", 12))
        self.add_table_entry.configure(foreground="#000000")
        self.add_table_entry.configure(insertbackground="black")
        self.add_table_entry.configure(textvariable=self.repository_table)
        self.add_table_entry_warning = ttk.Label(self.repository_frame)
        self.add_table_entry_warning_img = PhotoImage(file="icons/lamp.png")
        self.add_table_entry_warning.configure(image=self.add_table_entry_warning_img)
        self.add_table_entry_warning.configure(text=f"{self.add_table_entry.get()} υπάρχει")
        self.add_table_entry_warning.configure(compound='left')

        self.del_table_from_repository_btn = tk.Button(self.repository_frame)
        # self.del_table_from_repository_btn.place(relx=0.815, rely=0.170, relheight=0.080, relwidth=0.200)
        self.del_table_from_repository_btn.configure(background="#6b6b6b")
        self.del_table_from_repository_btn.configure(foreground="white")
        self.del_table_from_repository_btn_img = PhotoImage(file="icons/delete_table_from_repository.png")
        self.del_table_from_repository_btn.configure(image=self.del_table_from_repository_btn_img)
        self.del_table_from_repository_btn.configure(text="Διαγραφή εταιρείας")
        self.del_table_from_repository_btn.configure(compound="top")
        self.del_table_from_repository_btn.configure(command=self.del_table_from_repository)

        self.search_on_repository_stringvar = StringVar()
        self.search_on_repository_entry = tk.Entry(self.repository_frame,
                                                   textvariable=self.search_on_repository_stringvar)
        self.search_on_repository_entry.place(relx=0.29, rely=0.220, height=25, relwidth=0.200)
        self.search_on_repository_entry.configure(background="white")
        self.search_on_repository_entry.configure(disabledforeground="#a3a3a3")
        self.search_on_repository_entry.configure(font=("Calibri", 10, "bold"))
        self.search_on_repository_entry.configure(foreground="#000000")
        self.search_on_repository_entry.configure(insertbackground="black")
        self.search_on_repository_entry.bind('<Return>', self.search_on_repository)

        self.search_on_repository_btn = tk.Button(self.repository_frame)
        self.search_on_repository_btn.place(relx=0.290, rely=0.140, height=30, relwidth=0.145)
        self.search_on_repository_btn.configure(activebackground="#ececec")
        self.search_on_repository_btn.configure(activeforeground="#000000")
        self.search_on_repository_btn.configure(background="#006291")
        self.search_on_repository_btn.configure(compound='left')
        self.search_on_repository_btn.configure(disabledforeground="#a3a3a3")
        self.search_on_repository_btn.configure(font=("Calibri", 10, "bold"))
        self.search_on_repository_btn.configure(foreground="#ffffff")
        self.search_on_repository_btn.configure(highlightbackground="#d9d9d9")
        self.search_on_repository_btn.configure(highlightcolor="black")
        self.search_on_repository_btn.configure(pady="0")
        self.search_on_repository_btn_img = PhotoImage(file="icons/search.png")
        self.search_on_repository_btn.configure(image=self.search_on_repository_btn_img)
        self.search_on_repository_btn.configure(text='''Αναζήτηση''')
        self.search_on_repository_btn.configure(command=self.search_on_repository)
        self.refresh_repository_btn = tk.Button(self.repository_frame)
        self.refresh_repository_btn.place(relx=0.450, rely=0.140, height=30, relwidth=0.030)
        self.refresh_repository_btn.configure(background="#0685c4")
        self.refresh_repository_btn_img = PhotoImage(file="icons/refresh.png")
        self.refresh_repository_btn.configure(image=self.refresh_repository_btn_img)
        self.refresh_repository_btn.configure(command=self.get_repository)

        self.add_spare_part_on_repository_btn = tk.Button(self.repository_frame)
        # self.add_spare_part_on_repository_btn.place(relx=0.025, rely=0.150, height=35, relwidth=0.200)
        self.add_spare_part_on_repository_btn.configure(activebackground="#ececec")
        self.add_spare_part_on_repository_btn.configure(activeforeground="#000000")
        self.add_spare_part_on_repository_btn.configure(background="#5fa15f")
        self.add_spare_part_on_repository_btn.configure(compound='left')
        self.add_spare_part_on_repository_btn.configure(disabledforeground="#a3a3a3")
        self.add_spare_part_on_repository_btn.configure(font=("Calibri", 10, "bold"))
        self.add_spare_part_on_repository_btn.configure(foreground="#ffffff")
        self.add_spare_part_on_repository_btn.configure(highlightbackground="#d9d9d9")
        self.add_spare_part_on_repository_btn.configure(highlightcolor="black")
        self.add_spare_part_on_repository_btn.configure(pady="0")
        self.add_spare_part_on_repository_btn_img = PhotoImage(file="icons/add_spare_part_on_repository.png")
        self.add_spare_part_on_repository_btn.configure(image=self.add_spare_part_on_repository_btn_img)

        self.add_spare_part_on_repository_btn.configure(command=self.add_spare_part_on_repository)
        # self.add_spare_part_on_repository_btn.place_forget()

        self.repository_treeview = ScrolledTreeView(self.repository_frame)
        self.repository_treeview.place(relx=0.017, rely=0.300, relheight=0.59, relwidth=0.967)
        self.repository_treeview.configure(show="headings", style="mystyle.Treeview", selectmode="browse")
        self.repository_treeview.bind("<Double-1>", self.edit_spare_part_on_repository)

        self.customer_title_label = tk.Label(self.customer_frame)
        self.customer_title_label.place(relx=0.021, rely=0.005, height=30, relwidth=0.847)
        self.customer_title_label.configure(font=("Calibri", 11, "bold"))
        self.customer_title_label.configure(background="#994d33")
        self.customer_title_label.configure(disabledforeground="#a3a3a3")
        self.customer_title_label.configure(foreground="#ffffff")
        self.customer_title_label.configure(relief="groove")
        self.customer_title_label.configure(text="Στοιχεία Πελάτη")

        # Διαγραφή πελάτη
        self.del_customer_btn = tk.Button(self.customer_frame)
        self.del_customer_btn.place(relx=0.870, rely=0.005, relheight=0.080, relwidth=0.060)
        self.del_customer_btn.configure(activebackground="#6b6b6b")
        self.del_customer_btn.configure(activeforeground="#000000")
        self.del_customer_btn.configure(background="#CFD5CE")
        self.del_customer_btn.configure(disabledforeground="#a3a3a3")
        self.del_customer_btn.configure(foreground="white")
        self.del_customer_btn.configure(highlightbackground="#d9d9d9")
        self.del_customer_btn.configure(highlightcolor="black")
        self.del_customer_btn.configure(pady="0")
        self.del_customer_btn.configure(command=self.del_customer)
        # self.del_customer_btn.configure(tolitip="Απενεργοποίηση πελάτη")
        self.del_customer_btn_img = PhotoImage(file="icons/delete_customer.png")
        self.del_customer_btn.configure(image=self.del_customer_btn_img)
        self.del_customer_btn.configure(compound="top")

        self.company_label = tk.Label(self.customer_frame)
        self.company_label.place(relx=0.021, rely=0.100, height=20, relwidth=0.200)
        self.company_label.configure(activebackground="#f9f9f9")
        self.company_label.configure(activeforeground="black")
        self.company_label.configure(background="#84f29c")
        self.company_label.configure(disabledforeground="#a3a3a3")
        self.company_label.configure(foreground="#000000")
        self.company_label.configure(highlightbackground="#d9d9d9")
        self.company_label.configure(highlightcolor="black")
        self.company_label.configure(relief="groove")
        self.company_label.configure(text="Εμφανιζόμενο όνομα")

        self.customer_name = StringVar()
        self.customer_name.trace('w', self.check_customer_name)
        self.company_name_entry = tk.Entry(self.customer_frame)
        self.company_name_entry.place(relx=0.225, rely=0.100, height=20, relwidth=0.250)
        self.company_name_entry.configure(background="white")
        self.company_name_entry.configure(disabledforeground="#a3a3a3")
        self.company_name_entry.configure(font=("Calibri", 10))
        self.company_name_entry.configure(foreground="#000000")
        self.company_name_entry.configure(highlightbackground="#d9d9d9")
        self.company_name_entry.configure(highlightcolor="black")
        self.company_name_entry.configure(insertbackground="black")
        self.company_name_entry.configure(selectbackground="#c4c4c4")
        self.company_name_entry.configure(selectforeground="black")
        self.company_name_entry.configure(textvariable=self.customer_name)
        self.company_name_warning = ttk.Label(self.customer_frame)
        self.company_name_warning_img = PhotoImage(file="icons/lamp.png")
        self.company_name_warning.configure(image=self.company_name_warning_img)
        self.company_name_warning.configure(compound='left')

        self.address_label = tk.Label(self.customer_frame)
        self.address_label.place(relx=0.021, rely=0.260, height=20, relwidth=0.200)
        self.address_label.configure(activebackground="#f9f9f9")
        self.address_label.configure(activeforeground="black")
        self.address_label.configure(background="#84f29c")
        self.address_label.configure(disabledforeground="#a3a3a3")
        self.address_label.configure(foreground="#000000")
        self.address_label.configure(highlightbackground="#d9d9d9")
        self.address_label.configure(highlightcolor="black")
        self.address_label.configure(relief="groove")
        self.address_label.configure(text="Διεύθυνση")
        self.address_entry = tk.Entry(self.customer_frame)
        self.address_entry.place(relx=0.225, rely=0.260, height=20, relwidth=0.250)
        self.address_entry.configure(background="white")
        self.address_entry.configure(disabledforeground="#a3a3a3")
        self.address_entry.configure(font=("Calibri", 10))
        self.address_entry.configure(foreground="#000000")
        self.address_entry.configure(highlightbackground="#d9d9d9")
        self.address_entry.configure(highlightcolor="black")
        self.address_entry.configure(insertbackground="black")
        self.address_entry.configure(selectbackground="#c4c4c4")
        self.address_entry.configure(selectforeground="black")

        self.Label3 = tk.Label(self.customer_frame)
        self.Label3.place(relx=0.021, rely=0.180, height=20, relwidth=0.200)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#84f29c")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(relief="groove")
        self.Label3.configure(text='''Ονομα υπεύθυνου''')
        self.name_entry = tk.Entry(self.customer_frame)
        self.name_entry.place(relx=0.225, rely=0.180, height=20, relwidth=0.250)
        self.name_entry.configure(background="white")
        self.name_entry.configure(disabledforeground="#a3a3a3")
        self.name_entry.configure(font=("Calibri", 10))
        self.name_entry.configure(foreground="#000000")
        self.name_entry.configure(highlightbackground="#d9d9d9")
        self.name_entry.configure(highlightcolor="black")
        self.name_entry.configure(insertbackground="black")
        self.name_entry.configure(selectbackground="#c4c4c4")
        self.name_entry.configure(selectforeground="black")

        self.fax_entry = tk.Entry(self.customer_frame)
        self.fax_entry.place(relx=0.655, rely=0.420, height=20, relwidth=0.15)
        self.fax_entry.configure(background="white")
        self.fax_entry.configure(disabledforeground="#a3a3a3")
        self.fax_entry.configure(font=("Calibri", 10))
        self.fax_entry.configure(foreground="#000000")
        self.fax_entry.configure(highlightbackground="#d9d9d9")
        self.fax_entry.configure(highlightcolor="black")
        self.fax_entry.configure(insertbackground="black")
        self.fax_entry.configure(selectbackground="#c4c4c4")
        self.fax_entry.configure(selectforeground="black")

        self.Label4 = tk.Label(self.customer_frame)
        self.Label4.place(relx=0.500, rely=0.100, height=20, relwidth=0.150)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#84f29c")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(relief="groove")
        self.Label4.configure(text='''Πόλη''')

        self.Label5 = tk.Label(self.customer_frame)
        self.Label5.place(relx=0.500, rely=0.260, height=20, relwidth=0.150)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#84f29c")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(relief="groove")
        self.Label5.configure(text='''Ταχ. Κώδικας''')

        self.Label6 = tk.Label(self.customer_frame)
        self.Label6.place(relx=0.500, rely=0.180, height=20, relwidth=0.150)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#84f29c")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(relief="groove")
        self.Label6.configure(text='''Περιοχή''')

        self.mobile = StringVar()
        self.mobile.trace('w', self.check_mobile)
        self.mobile_entry = tk.Entry(self.customer_frame)
        self.mobile_entry.place(relx=0.225, rely=0.420, height=20, relwidth=0.250)
        self.mobile_entry.configure(background="white")
        self.mobile_entry.configure(disabledforeground="#a3a3a3")
        self.mobile_entry.configure(font=("Calibri", 10))
        self.mobile_entry.configure(foreground="#000000")
        self.mobile_entry.configure(highlightbackground="#d9d9d9")
        self.mobile_entry.configure(highlightcolor="black")
        self.mobile_entry.configure(insertbackground="black")
        self.mobile_entry.configure(selectbackground="#c4c4c4")
        self.mobile_entry.configure(selectforeground="black")
        self.mobile_entry.configure(textvariable=self.mobile)
        self.mobile_warning = ttk.Label(self.customer_frame)
        self.mobile_warning_img = PhotoImage(file="icons/lamp.png")
        self.mobile_warning.configure(image=self.mobile_warning_img)
        self.mobile_warning.configure(compound='left')

        self.email_entry = tk.Entry(self.customer_frame)
        self.email_entry.place(relx=0.655, rely=0.340, height=20, relwidth=0.15)
        self.email_entry.configure(background="white")
        self.email_entry.configure(disabledforeground="#a3a3a3")
        self.email_entry.configure(font=("Calibri", 10))
        self.email_entry.configure(foreground="#000000")
        self.email_entry.configure(highlightbackground="#d9d9d9")
        self.email_entry.configure(highlightcolor="black")
        self.email_entry.configure(insertbackground="black")
        self.email_entry.configure(selectbackground="#c4c4c4")
        self.email_entry.configure(selectforeground="black")

        self.city_entry = tk.Entry(self.customer_frame)
        self.city_entry.place(relx=0.655, rely=0.100, height=20, relwidth=0.15)
        self.city_entry.configure(background="white")
        self.city_entry.configure(disabledforeground="#a3a3a3")
        self.city_entry.configure(font=("Calibri", 10))
        self.city_entry.configure(foreground="#000000")
        self.city_entry.configure(highlightbackground="#d9d9d9")
        self.city_entry.configure(highlightcolor="black")
        self.city_entry.configure(insertbackground="black")
        self.city_entry.configure(selectbackground="#c4c4c4")
        self.city_entry.configure(selectforeground="black")

        self.Label7 = tk.Label(self.customer_frame)
        self.Label7.place(relx=0.021, rely=0.340, height=20, relwidth=0.200)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#84f29c")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(relief="groove")
        self.Label7.configure(text='''Τηλέφωνο''')
        self.phone = StringVar()
        self.phone.trace('w', self.phone_check)
        self.phone_entry = tk.Entry(self.customer_frame)
        self.phone_entry.place(relx=0.225, rely=0.340, height=20, relwidth=0.250)
        self.phone_entry.configure(background="white")
        self.phone_entry.configure(disabledforeground="#a3a3a3")
        self.phone_entry.configure(font=("Calibri", 10))
        self.phone_entry.configure(foreground="#000000")
        self.phone_entry.configure(highlightbackground="#d9d9d9")
        self.phone_entry.configure(highlightcolor="black")
        self.phone_entry.configure(insertbackground="black")
        self.phone_entry.configure(selectbackground="#c4c4c4")
        self.phone_entry.configure(selectforeground="black")
        self.phone_entry.configure(textvariable=self.phone)
        self.phone_warning = ttk.Label(self.customer_frame)
        self.phone_warning_img = PhotoImage(file="icons/lamp.png")
        self.phone_warning.configure(image=self.phone_warning_img)
        self.phone_warning.configure(compound='left')

        self.Label8 = tk.Label(self.customer_frame)
        self.Label8.place(relx=0.021, rely=0.420, height=20, relwidth=0.200)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(background="#84f29c")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="black")
        self.Label8.configure(relief="groove")
        self.Label8.configure(text="Κινητό")
        # Σελίδες Πακέτου
        self.Label13 = tk.Label(self.customer_frame)
        self.Label13.place(relx=0.021, rely=0.500, height=20, relwidth=0.200)
        self.Label13.configure(activebackground="#f9f9f9")
        self.Label13.configure(activeforeground="black")
        self.Label13.configure(background="#2f42f0")
        self.Label13.configure(disabledforeground="#a3a3a3")
        self.Label13.configure(foreground="#ffffff")
        self.Label13.configure(highlightbackground="#d9d9d9")
        self.Label13.configure(highlightcolor="black")
        self.Label13.configure(relief="groove")
        self.Label13.configure(text='''Σελίδες Πακέτου''')
        self.page_package_entry = tk.Entry(self.customer_frame)
        self.page_package_entry.place(relx=0.225, rely=0.500, height=20, relwidth=0.250)
        self.page_package_entry.configure(background="white")
        self.page_package_entry.configure(disabledforeground="#a3a3a3")
        self.page_package_entry.configure(font=("Calibri", 10))
        self.page_package_entry.configure(foreground="#000000")
        self.page_package_entry.configure(highlightbackground="#d9d9d9")
        self.page_package_entry.configure(highlightcolor="black")
        self.page_package_entry.configure(insertbackground="black")
        self.page_package_entry.configure(selectbackground="#c4c4c4")
        self.page_package_entry.configure(selectforeground="black")

        self.Label14 = tk.Label(self.customer_frame)
        self.Label14.place(relx=0.500, rely=0.500, height=20, relwidth=0.150)
        self.Label14.configure(activebackground="#f9f9f9")
        self.Label14.configure(activeforeground="black")
        self.Label14.configure(background="#2f42f0")
        self.Label14.configure(disabledforeground="#a3a3a3")
        self.Label14.configure(foreground="#ffffff")
        self.Label14.configure(highlightbackground="#d9d9d9")
        self.Label14.configure(highlightcolor="black")
        self.Label14.configure(relief="groove")
        self.Label14.configure(text='''Κόστος Πακέτου''')
        self.package_cost_entry = tk.Entry(self.customer_frame)
        self.package_cost_entry.place(relx=0.656, rely=0.500, height=20, relwidth=0.15)
        self.package_cost_entry.configure(background="white")
        self.package_cost_entry.configure(disabledforeground="#a3a3a3")
        self.package_cost_entry.configure(font=("Calibri", 10))
        self.package_cost_entry.configure(foreground="#000000")
        self.package_cost_entry.configure(highlightbackground="#d9d9d9")
        self.package_cost_entry.configure(highlightcolor="black")
        self.package_cost_entry.configure(insertbackground="black")
        self.package_cost_entry.configure(selectbackground="#c4c4c4")
        self.package_cost_entry.configure(selectforeground="black")

        self.Label9 = tk.Label(self.customer_frame)
        self.Label9.place(relx=0.500, rely=0.420, height=21, relwidth=0.150)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(background="#84f29c")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(relief="groove")
        self.Label9.configure(text='''Φαξ''')

        self.Label10 = tk.Label(self.customer_frame)
        self.Label10.place(relx=0.500, rely=0.340, height=20, relwidth=0.150)
        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(activeforeground="black")
        self.Label10.configure(background="#84f29c")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(highlightbackground="#d9d9d9")
        self.Label10.configure(highlightcolor="black")
        self.Label10.configure(relief="groove")
        self.Label10.configure(text='''e-mail''')

        self.post_code_entry = tk.Entry(self.customer_frame)
        self.post_code_entry.place(relx=0.655, rely=0.260, height=20, relwidth=0.15)
        self.post_code_entry.configure(background="white")
        self.post_code_entry.configure(disabledforeground="#a3a3a3")
        self.post_code_entry.configure(font=("Calibri", 10))
        self.post_code_entry.configure(foreground="#000000")
        self.post_code_entry.configure(highlightbackground="#d9d9d9")
        self.post_code_entry.configure(highlightcolor="black")
        self.post_code_entry.configure(insertbackground="black")
        self.post_code_entry.configure(selectbackground="#c4c4c4")
        self.post_code_entry.configure(selectforeground="black")

        self.place_entry = tk.Entry(self.customer_frame)
        self.place_entry.place(relx=0.655, rely=0.180, height=20, relwidth=0.15)
        self.place_entry.configure(background="white")
        self.place_entry.configure(disabledforeground="#a3a3a3")
        self.place_entry.configure(font=("Calibri", 10))
        self.place_entry.configure(foreground="#000000")
        self.place_entry.configure(highlightbackground="#d9d9d9")
        self.place_entry.configure(highlightcolor="black")
        self.place_entry.configure(insertbackground="black")
        self.place_entry.configure(selectbackground="#c4c4c4")
        self.place_entry.configure(selectforeground="black")

        self.notes_label = tk.Label(self.customer_frame)
        self.notes_label.place(relx=0.025, rely=0.600, height=31, relwidth=0.940)
        self.notes_label.configure(activebackground="#f9f9f9")
        self.notes_label.configure(activeforeground="black")
        self.notes_label.configure(background="#6b6b6b")
        self.notes_label.configure(disabledforeground="#a3a3a3")
        self.notes_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.notes_label.configure(foreground="#ffffff")
        self.notes_label.configure(highlightbackground="#d9d9d9")
        self.notes_label.configure(highlightcolor="black")
        self.notes_label.configure(relief="groove")
        self.notes_label.configure(text='''Σημειώσεις''')
        self.customer_notes_scrolledtext = ScrolledText(self.customer_frame)
        self.customer_notes_scrolledtext.place(relx=0.025, rely=0.680, relheight=0.300, relwidth=0.941)
        self.customer_notes_scrolledtext.configure(background="white")
        self.customer_notes_scrolledtext.configure(font="TkTextFont")
        self.customer_notes_scrolledtext.configure(foreground="black")
        self.customer_notes_scrolledtext.configure(highlightbackground="#d9d9d9")
        self.customer_notes_scrolledtext.configure(highlightcolor="black")
        self.customer_notes_scrolledtext.configure(insertbackground="black")
        self.customer_notes_scrolledtext.configure(insertborderwidth="3")
        self.customer_notes_scrolledtext.configure(selectbackground="#c4c4c4")
        self.customer_notes_scrolledtext.configure(selectforeground="black")
        self.customer_notes_scrolledtext.configure(wrap="none")
        # self.TSeparator1 = ttk.Separator(top)
        # self.TSeparator1.place(relx=0.221, rely=0.355, relwidth=0.647)

        self.copiers_title_label = tk.Label(self.copier_frame)
        self.copiers_title_label.place(relx=0.021, rely=0.006, height=30, relwidth=0.847)
        self.copiers_title_label.configure(background="#6b6b6b")
        self.copiers_title_label.configure(disabledforeground="#a3a3a3")
        self.copiers_title_label.configure(foreground="#ffffff")
        self.copiers_title_label.configure(font=("Calibri", 10, "bold"))
        self.copiers_title_label.configure(relief="groove")
        self.copiers_title_label.configure(text="Στοιχεία μηχανήματος")

        # Serial Number
        self.serial_label = tk.Label(self.copier_frame)
        self.serial_label.place(relx=0.021, rely=0.100, height=20, relwidth=0.200)
        self.serial_label.configure(activebackground="#f9f9f9")
        self.serial_label.configure(activeforeground="black")
        self.serial_label.configure(background="#6b6b6b")
        self.serial_label.configure(disabledforeground="#a3a3a3")
        self.serial_label.configure(foreground="#ffffff")
        self.serial_label.configure(highlightbackground="#d9d9d9")
        self.serial_label.configure(highlightcolor="black")
        self.serial_label.configure(relief="groove")
        self.serial_label.configure(text="Σειριακός αριθμός")

        self.serial = StringVar()
        self.serial.trace('w', self.check_serial)
        self.serial_entry = tk.Entry(self.copier_frame)
        self.serial_entry.configure(textvariable=self.serial)
        self.serial_entry.place(relx=0.225, rely=0.100, height=20, relwidth=0.2)
        self.serial_entry.configure(background="white")
        self.serial_entry.configure(disabledforeground="#a3a3a3")
        self.serial_entry.configure(font=("Calibri", 10))
        self.serial_entry.configure(foreground="#000000")
        self.serial_entry.configure(highlightbackground="#d9d9d9")
        self.serial_entry.configure(highlightcolor="black")
        self.serial_entry.configure(insertbackground="black")
        self.serial_entry.configure(selectbackground="#c4c4c4")
        self.serial_entry.configure(selectforeground="black")
        self.serial_entry_warning = ttk.Label(self.copier_frame)
        self.serial_entry_warning_img = PhotoImage(file="icons/lamp.png")
        self.serial_entry_warning.configure(image=self.serial_entry_warning_img)
        self.serial_entry_warning.configure(compound='left')

        # Serial Number
        self.machine_company_label = tk.Label(self.copier_frame)
        self.machine_company_label.place(relx=0.450, rely=0.100, height=20, relwidth=0.200)
        self.machine_company_label.configure(activebackground="#f9f9f9")
        self.machine_company_label.configure(activeforeground="black")
        self.machine_company_label.configure(background="#6b6b6b")
        self.machine_company_label.configure(disabledforeground="#a3a3a3")
        self.machine_company_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.machine_company_label.configure(foreground="#ffffff")
        self.machine_company_label.configure(highlightbackground="#d9d9d9")
        self.machine_company_label.configure(highlightcolor="black")
        self.machine_company_label.configure(relief="groove")
        self.machine_company_label.configure(text='''Εταιρεία - Μοντέλο''')
        self.machine_company = StringVar()
        self.machine_company_entry = tk.Entry(self.copier_frame)
        self.machine_company_entry.place(relx=0.450, rely=0.150, relheight=0.059, relwidth=0.200)
        self.machine_company_entry.configure(textvariable="")
        self.machine_company_entry.configure(takefocus="")

        # Μετρητής Εναρξης
        self.Label12 = tk.Label(self.copier_frame)
        self.Label12.place(relx=0.021, rely=0.180, height=21, relwidth=0.200)
        self.Label12.configure(activebackground="#6b6b6b")
        self.Label12.configure(activeforeground="black")
        self.Label12.configure(background="#6b6b6b")
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(foreground="#ffffff")
        self.Label12.configure(highlightbackground="#d9d9d9")
        self.Label12.configure(highlightcolor="black")
        self.Label12.configure(relief="groove")
        self.Label12.configure(text="Μετρητής Εναρξης")
        self.start_counter_entry = tk.Entry(self.copier_frame)
        self.start_counter_entry.place(relx=0.225, rely=0.180, height=20, relwidth=0.2)
        self.start_counter_entry.configure(background="white")
        self.start_counter_entry.configure(disabledforeground="#a3a3a3")
        self.start_counter_entry.configure(font=("Calibri", 10))
        self.start_counter_entry.configure(foreground="#000000")
        self.start_counter_entry.configure(highlightbackground="#d9d9d9")
        self.start_counter_entry.configure(highlightcolor="black")
        self.start_counter_entry.configure(insertbackground="black")
        self.start_counter_entry.configure(selectbackground="#c4c4c4")
        self.start_counter_entry.configure(selectforeground="black")
        # Εναρξη
        self.Label11 = tk.Label(self.copier_frame)
        self.Label11.place(relx=0.021, rely=0.260, height=21, relwidth=0.200)
        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(activeforeground="black")
        self.Label11.configure(background="#6b6b6b")
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(foreground="#ffffff")
        self.Label11.configure(highlightbackground="#d9d9d9")
        self.Label11.configure(highlightcolor="black")
        self.Label11.configure(relief="groove")
        self.Label11.configure(text="Εναρξη")
        self.start_entry = tk.Entry(self.copier_frame)
        self.start_entry.place(relx=0.225, rely=0.260, height=20, relwidth=0.2)
        self.start_entry.configure(background="white")
        self.start_entry.configure(disabledforeground="#a3a3a3")
        self.start_entry.configure(font=("Calibri", 10))
        self.start_entry.configure(foreground="#000000")
        self.start_entry.configure(highlightbackground="#d9d9d9")
        self.start_entry.configure(highlightcolor="black")
        self.start_entry.configure(insertbackground="black")
        self.start_entry.configure(selectbackground="#c4c4c4")
        self.start_entry.configure(selectforeground="black")

        self.update_customer_btn = tk.Button(self.customer_frame)
        self.update_customer_btn.place(relx=0.825, rely=0.280, height=30, relwidth=0.150)
        self.update_customer_btn.configure(activebackground="#ececec")
        self.update_customer_btn.configure(activeforeground="#000000")
        self.update_customer_btn.configure(background="#994d33")
        self.update_customer_btn.configure(disabledforeground="#a3a3a3")
        self.update_customer_btn.configure(foreground="#ffffff")
        self.update_customer_btn.configure(highlightbackground="#d9d9d9")
        self.update_customer_btn.configure(highlightcolor="black")
        self.update_customer_btn.configure(pady="0")
        self.update_customer_btn.configure(font=("Calibri", 12, "bold"))
        self.update_customer_btn.configure(text='''Ενημέρωση''')
        self.update_customer_btn.configure(command=self.update_customer)

        # Σημειώσεις
        self.notes_label = tk.Label(self.copier_frame)
        self.notes_label.place(relx=0.021, rely=0.340, height=20, relwidth=0.700)
        self.notes_label.configure(activebackground="#f9f9f9")
        self.notes_label.configure(activeforeground="black")
        self.notes_label.configure(background="#6b6b6b")
        self.notes_label.configure(disabledforeground="#a3a3a3")
        self.notes_label.configure(foreground="#ffffff")
        self.notes_label.configure(highlightbackground="#d9d9d9")
        self.notes_label.configure(highlightcolor="black")
        self.notes_label.configure(relief="groove")
        self.notes_label.configure(text="Σημειώσεις")
        # Σημειώσεις Φωτοτυπικού
        self.copier_notes_scrolledtext = ScrolledText(self.copier_frame)
        self.copier_notes_scrolledtext.place(relx=0.021, rely=0.400, relheight=0.520, relwidth=0.700)
        self.copier_notes_scrolledtext.configure(background="white")
        self.copier_notes_scrolledtext.configure(font="TkTextFont")
        self.copier_notes_scrolledtext.configure(foreground="black")
        self.copier_notes_scrolledtext.configure(highlightbackground="#d9d9d9")
        self.copier_notes_scrolledtext.configure(highlightcolor="black")
        self.copier_notes_scrolledtext.configure(insertbackground="black")
        self.copier_notes_scrolledtext.configure(insertborderwidth="3")
        self.copier_notes_scrolledtext.configure(selectbackground="#c4c4c4")
        self.copier_notes_scrolledtext.configure(selectforeground="black")
        self.copier_notes_scrolledtext.configure(wrap="none")

        # Διαγραφή Φωτοτυπικού
        self.del_copier_btn = tk.Button(self.copier_frame)
        self.del_copier_btn.place(relx=0.870, rely=0.006, relheight=0.080, relwidth=0.060)
        self.del_copier_btn.configure(activebackground="#6b6b6b")
        self.del_copier_btn.configure(activeforeground="#000000")
        self.del_copier_btn.configure(background="#CFD5CE")
        self.del_copier_btn.configure(disabledforeground="#a3a3a3")
        self.del_copier_btn.configure(foreground="white")
        self.del_copier_btn.configure(highlightbackground="#d9d9d9")
        self.del_copier_btn.configure(highlightcolor="black")
        self.del_copier_btn.configure(pady="0")
        self.del_copier_btn.configure(command=self.del_copier)
        # self.del_copier_btn.configure(text="Απενεργοποίηση φωτοτυπικού")
        self.del_copier_btn_img = PhotoImage(file="icons/Delete_copier.png")
        self.del_copier_btn.configure(image=self.del_copier_btn_img)
        self.del_copier_btn.configure(compound="top")

        # Ενημέρωση φωτοτυπικού
        self.update_copier_btn = tk.Button(self.copier_frame)
        self.update_copier_btn.place(relx=0.670, rely=0.130, height=35, relwidth=0.130)
        self.update_copier_btn.configure(activebackground="#ececec")
        self.update_copier_btn.configure(activeforeground="#000000")
        self.update_copier_btn.configure(background="#6b6b6b")
        self.update_copier_btn.configure(disabledforeground="#a3a3a3")
        self.update_copier_btn.configure(foreground="#ffffff")
        self.update_copier_btn.configure(highlightbackground="#d9d9d9")
        self.update_copier_btn.configure(highlightcolor="black")
        self.update_copier_btn.configure(pady="0")
        self.update_copier_btn.configure(font=("Calibri", 9, "bold"))
        self.update_copier_btn.configure(text='''Ενημέρωση''')
        self.update_copier_btn.configure(command=self.update_copier)

        self.customer_search_btn = tk.Button(top)
        self.customer_search_btn.place(relx=0.022, rely=0.006, height=30, relwidth=0.170)
        self.customer_search_btn.configure(activebackground="#ececec")
        self.customer_search_btn.configure(activeforeground="#000000")
        self.customer_search_btn.configure(background="#6b6b6b")
        self.customer_search_btn.configure(disabledforeground="#a3a3a3")
        self.customer_search_btn.configure(foreground="white")
        self.customer_search_btn.configure(highlightbackground="#d9d9d9")
        self.customer_search_btn.configure(highlightcolor="black")
        self.customer_search_btn.configure(pady="0")
        self.customer_search_btn.configure(command=lambda: self.search_customer(self.search_data))
        self.customer_search_btn.configure(text="     Αναζήτηση πελάτη")
        self.customer_search_btn_img = PhotoImage(file="icons/search_customer.png")
        self.customer_search_btn.configure(image=self.customer_search_btn_img)
        self.customer_search_btn.configure(compound="left")

        self.customer_refresh_btn = tk.Button(top)
        self.customer_refresh_btn.place(relx=0.180, rely=0.006, height=30, relwidth=0.030)
        self.customer_refresh_btn.configure(background="#0685c4")
        self.customer_refresh_btn_img = PhotoImage(file="icons/refresh.png")
        self.customer_refresh_btn.configure(image=self.customer_refresh_btn_img)
        self.customer_refresh_btn.configure(command=self.get_customers)

        # Πίνακας πελατών
        self.customers_treeview = ScrolledTreeView(top)
        # build_treeview_support starting.
        self.customers_treeview["columns"] = ["ID", "Επωνυμία_Επιχείρησης"]
        self.customers_treeview.heading("Επωνυμία_Επιχείρησης", text="Πελάτης", anchor="center")
        # self.customers_treeview.column("#0",width="60")
        self.customers_treeview.column("Επωνυμία_Επιχείρησης", anchor="w")
        self.customers_treeview.heading("ID", text="ID", anchor="w", )
        self.customers_treeview.column("ID", anchor="w", width=1)
        self.customers_treeview.configure(show="headings", style="mystyle.Treeview")
        self.customers_treeview.bind("<<TreeviewSelect>>", self.view_copiers)

        self.get_customers()
        self.customers_treeview.place(relx=0.022, rely=0.090, relheight=0.457, relwidth=0.188)

        # Αναζήτηση πελάτη
        self.search_data = StringVar()
        self.customer_search_entry = tk.Entry(top, textvariable=self.search_data)
        self.customer_search_entry.place(relx=0.022, rely=0.055, height=19, relwidth=0.188)
        self.customer_search_entry.configure(background="white")
        self.customer_search_entry.configure(disabledforeground="#a3a3a3")
        self.customer_search_entry.configure(font=("Calibri", 10))
        self.customer_search_entry.configure(foreground="#000000")
        self.customer_search_entry.configure(insertbackground="black")
        self.customer_search_entry.bind('<Return>', self.search_customer)

        self.copier_search_btn = tk.Button(self.copiers_frame)
        self.copier_search_btn.place(relx=0.222, rely=0.085, height=32, relwidth=0.220)
        self.copier_search_btn.configure(activebackground="#ececec")
        self.copier_search_btn.configure(activeforeground="#000000")
        self.copier_search_btn.configure(background="#6b6b6b")
        self.copier_search_btn.configure(disabledforeground="#a3a3a3")
        self.copier_search_btn.configure(foreground="white")
        self.copier_search_btn.configure(highlightbackground="#d9d9d9")
        self.copier_search_btn.configure(highlightcolor="black")
        self.copier_search_btn.configure(pady="0")
        self.copier_search_btn.configure(font=("Calibri", 10, "bold"))
        self.copier_search_btn.configure(command=lambda: self.search_copier(self.search_copier_data))
        self.copier_search_btn.configure(text="   Αναζήτηση Μηχανήματος")
        self.copier_search_btn_img = PhotoImage(file="icons/search_copiers.png")
        self.copier_search_btn.configure(image=self.copier_search_btn_img)
        self.copier_search_btn.configure(compound="left")
        self.copier_refresh_btn = tk.Button(self.copiers_frame)
        self.copier_refresh_btn.place(relx=0.440, rely=0.085, height=32, relwidth=0.032)
        self.copier_refresh_btn.configure(background="#0685c4")
        self.copier_refresh_btn_img = PhotoImage(file="icons/refresh.png")
        self.copier_refresh_btn.configure(image=self.copier_refresh_btn_img)
        self.copier_refresh_btn.configure(command=self.show_all_enabled_copiers)
        # Πίνακας φωτοτυπικών
        self.copiers_treeview = ScrolledTreeView(self.copiers_frame)
        self.copiers_treeview.place(relx=0.022, rely=0.175, relheight=0.810, relwidth=0.450)
        self.copiers_treeview["columns"] = ["ID", "Μηχανήματα", "Σειριακός αριθμός"]
        self.copiers_treeview.heading("Μηχανήματα", text="Μηχάνημα", anchor="center")
        self.copiers_treeview.column("Μηχανήματα", anchor="w")
        self.copiers_treeview.heading("ID", text="ID", anchor="w", )
        self.copiers_treeview.column("ID", anchor="w", width="1")
        self.copiers_treeview.heading("Σειριακός αριθμός", text="Σειριακός αριθμός", anchor="center")
        self.copiers_treeview.column("Σειριακός αριθμός", anchor="w")
        self.copiers_treeview.configure(show="headings", style="mystyle.Treeview")
        self.copiers_treeview.bind("<<TreeviewSelect>>", self.service_click)

        # Αναζήτηση φωτοτυπικού
        self.search_copier_data = StringVar()
        self.copier_search_entry = tk.Entry(self.copiers_frame, textvariable=self.search_copier_data)
        self.copier_search_entry.place(relx=0.022, rely=0.085, height=31, relwidth=0.188)
        self.copier_search_entry.configure(background="white")
        self.copier_search_entry.configure(disabledforeground="#a3a3a3")
        self.copier_search_entry.configure(font=("Calibri", 12))
        self.copier_search_entry.configure(foreground="#000000")
        self.copier_search_entry.configure(insertbackground="black")
        self.copier_search_entry.bind('<Return>', self.search_copier)
        self.search_copier()  # Εμφάνιση όλων των φωτοτυπικών κατα την εκκίνηση
        # Προσθήκη ιστορικού φωτοτυπικού
        self.add_service_btn = tk.Button(self.service_frame)
        # self.add_service_btn.place(relx=0.021, rely=0.100, height=20, relwidth=0.200)
        self.add_service_btn.configure(activebackground="#6b6b6b")
        self.add_service_btn.configure(activeforeground="#000000")
        self.add_service_btn.configure(background="#6b6b6b")
        self.add_service_btn.configure(disabledforeground="#a3a3a3")
        self.add_service_btn.configure(foreground="white")
        self.add_service_btn.configure(highlightbackground="#d9d9d9")
        self.add_service_btn.configure(highlightcolor="black")
        self.add_service_btn.configure(pady="0")
        self.add_service_btn.configure(command=self.add_service)
        self.add_service_btn.configure(text="Προσθήκη συντήρησης")
        self.add_service_img = PhotoImage(file="icons/add_service.png")
        self.add_service_btn.configure(image=self.add_service_img)
        self.add_service_btn.configure(compound="left")
        # self.add_service_btn.configure(state="disabled")
        # Ανανέωση μετα απο εισαγωγη ιστορικού
        self.refresh_btn = tk.Button(self.service_frame)
        self.refresh_btn.place(relx=0.225, rely=0.100, height=25, relwidth=0.030)
        self.refresh_btn.configure(background="#0685c4")
        self.refresh_img = PhotoImage(file="icons/refresh.png")
        self.refresh_btn.configure(image=self.refresh_img)
        self.refresh_btn.configure(command=lambda: (self.service_click(event=None)))

        # Αναζήτηση στο επιλεγμένο φωτοτυπικό
        self.search_selected_copier_service_data = StringVar()
        self.search_selected_copier_service_entry = tk.Entry(self.service_frame,
                                                             textvariable=self.search_selected_copier_service_data)
        self.search_selected_copier_service_entry.place(relx=0.021, rely=0.180, height=20, relwidth=0.200)
        self.search_selected_copier_service_entry.configure(background="white")
        self.search_selected_copier_service_entry.configure(disabledforeground="#a3a3a3")
        self.search_selected_copier_service_entry.configure(font=("Calibri", 10))
        self.search_selected_copier_service_entry.configure(foreground="#000000")
        self.search_selected_copier_service_entry.configure(insertbackground="black")
        self.search_selected_copier_service_entry.bind('<Return>', self.search_selected_copier_service)
        self.search_selected_copier_service_btn = tk.Button(self.service_frame)
        self.search_selected_copier_service_btn.place(relx=0.225, rely=0.180, height=20, relwidth=0.030)
        self.search_selected_copier_service_btn.configure(background="#6b6b6b")
        self.search_search_selected_copier_service_img = PhotoImage(file="icons/search.png")
        self.search_selected_copier_service_btn.configure(image=self.search_search_selected_copier_service_img)
        self.search_selected_copier_service_btn.configure(command=self.search_selected_copier_service)

        self.search_errors_data = StringVar()
        self.search_error_entry = tk.Entry(self.service_frame, textvariable=self.search_errors_data)
        self.search_error_entry.place(relx=0.570, rely=0.180, height=20, relwidth=0.180)
        self.search_error_entry.configure(background="white")
        self.search_error_entry.configure(disabledforeground="#a3a3a3")
        self.search_error_entry.configure(font=("Calibri", 10))
        self.search_error_entry.configure(foreground="#000000")
        self.search_error_entry.configure(insertbackground="black")
        self.search_error_entry.bind('<Return>', self.search_error)
        self.search_errors_btn = tk.Button(self.service_frame)
        self.search_errors_btn.place(relx=0.760, rely=0.180, height=20, relwidth=0.200)
        self.search_errors_btn.configure(background="#6b6b6b")
        self.search_errors_img = PhotoImage(file="icons/search.png")
        self.search_errors_btn.configure(image=self.search_errors_img)
        self.search_errors_btn.configure(compound='left')
        self.search_errors_btn.configure(font=("Calibri", 10, "bold"))
        self.search_errors_btn.configure(foreground="white")
        self.search_errors_btn.configure(text="Αναζήτηση σφαλμάτων")
        self.search_errors_btn.configure(command=self.search_error)

        # Πίνακας επισκευων
        self.service_treeview = ScrolledTreeView(self.service_frame)
        self.service_treeview.place(relx=0.021, rely=0.240, relheight=0.700, relwidth=0.960)
        self.service_treeview.configure(show="headings", style="mystyle.Treeview")
        self.service_treeview.bind("<<TreeviewSelect>>", self.edit_service)

        # Αναζήτηση ανταλλακτικών
        self.search_spare_parts_data = StringVar()
        self.search_spare_parts_entry = tk.Entry(self.spare_parts_frame, textvariable=self.search_spare_parts_data)
        self.search_spare_parts_entry.place(relx=0.200, rely=0.150, height=30, relwidth=0.200)
        self.search_spare_parts_entry.configure(background="white")
        self.search_spare_parts_entry.configure(disabledforeground="#a3a3a3")
        self.search_spare_parts_entry.configure(font=("Calibri", 10))
        self.search_spare_parts_entry.configure(foreground="#000000")
        self.search_spare_parts_entry.configure(insertbackground="black")
        self.search_spare_parts_entry.bind('<Return>', self.search_spare_parts)
        self.search_spare_parts_btn = tk.Button(self.spare_parts_frame)
        self.search_spare_parts_btn.place(relx=0.410, rely=0.150, height=30, relwidth=0.400)
        self.search_spare_parts_btn.configure(background="#6b6b6b")
        self.search_spare_parts_btn_img = PhotoImage(file="icons/search_spare_parts.png")
        self.search_spare_parts_btn.configure(image=self.search_spare_parts_btn_img)
        self.search_spare_parts_btn.configure(compound='left')
        self.search_spare_parts_btn.configure(font=("Calibri", 10, "bold"))
        self.search_spare_parts_btn.configure(foreground="white")
        self.search_spare_parts_btn.configure(command=self.search_spare_parts)

        # Πίνακας ανταλλακτικών
        self.spare_parts_treeview = ScrolledTreeView(self.spare_parts_frame)
        self.spare_parts_treeview.place(relx=0.021, rely=0.240, relheight=0.700, relwidth=0.960)
        self.spare_parts_treeview.configure(show="headings", style="mystyle.Treeview")
        self.spare_parts_treeview.bind("<<TreeviewSelect>>", self.view_service_from_spare_parts)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.022, rely=0.555, relwidth=0.965)

        self.Label16 = tk.Label(self.service_frame)
        self.Label16.place(relx=0.021, rely=0.006, height=30, relwidth=0.847)
        self.Label16.configure(background="#6b6b6b")
        self.Label16.configure(disabledforeground="#a3a3a3")
        self.Label16.configure(foreground="#ffffff")
        self.Label16.configure(relief="groove")
        self.Label16.configure(text='''Ιστορικό''')
        self.task_notifier_btn = tk.Button(self.service_frame)
        self.task_notifier_btn.configure(background="#6b6b6b")
        self.task_notifier_img = PhotoImage(file="icons/task_notifier.png")
        self.task_notifier_btn.configure(image=self.task_notifier_img)
        self.task_notifier_btn.configure(command=self.search_tasks_of_selected_copier)

        self.calendar_title_label = tk.Label(top)
        self.calendar_title_label.place(relx=0.021, rely=0.570, height=30, relwidth=0.967)
        self.calendar_title_label.configure(font=("Calibri", 11, "bold"))
        self.calendar_title_label.configure(background="#6b6b6b")
        self.calendar_title_label.configure(disabledforeground="#a3a3a3")
        self.calendar_title_label.configure(foreground="#ffffff")
        self.calendar_title_label.configure(relief="groove")
        self.calendar_title_label.configure(text="Ημερολόγιο εργασιών")

        # Προσθήκη Ημερολόγιο εργασιών
        self.add_task_btn = tk.Button(top)
        self.add_task_btn.place(relx=0.225, rely=0.630, height=30, relwidth=0.150)
        self.add_task_btn.configure(activebackground="#6b6b6b")
        self.add_task_btn.configure(activeforeground="#000000")
        self.add_task_btn.configure(background="#6b6b6b")
        self.add_task_btn.configure(disabledforeground="#a3a3a3")
        self.add_task_btn.configure(foreground="white")
        self.add_task_btn.configure(highlightbackground="#d9d9d9")
        self.add_task_btn.configure(highlightcolor="black")
        self.add_task_btn.configure(pady="0")
        self.add_task_btn.configure(command=self.add_scheduled_tasks)
        self.add_task_btn.configure(text="Προσθήκη εγρασίας")
        self.add_task_btn_img = PhotoImage(file="icons/add_scheduled_tasks.png")
        self.add_task_btn.configure(image=self.add_task_btn_img)
        self.add_task_btn.configure(compound="left")

        # Ανανέωση μετα απο Προσθήκη εγρασίας
        self.refresh_task_btn = tk.Button(top)
        self.refresh_task_btn.place(relx=0.375, rely=0.630, height=30, relwidth=0.030)
        self.refresh_task_btn.configure(background="#0685c4")
        self.refresh_task_img = PhotoImage(file="icons/refresh.png")
        self.refresh_task_btn.configure(image=self.refresh_task_img)
        self.refresh_task_btn.configure(command=self.get_calendar)

        self.completed_jobs = DateEntry(top, width=12, year=self.year, month=self.month, day=self.day,
                                        background='gray20', selectmode='day', foreground='white', borderwidth=5,
                                        locale="el_GR", font=("Calibri", 10, 'bold'), date_pattern='dd/mm/yyyy')
        self.completed_jobs.place(relx=0.520, rely=0.630, relheight=0.035, relwidth=0.130)
        self.completed_jobs.bind('<<DateEntrySelected>>', self.get_completed_jobs)
        self.completed_jobs_label = tk.Label(top)
        self.completed_jobs_label.place(relx=0.520, rely=0.610, height=20, relwidth=0.130)
        self.completed_jobs_label.configure(font=("Calibri", 10, "bold"))
        self.completed_jobs_label.configure(background="#5fa15f")
        self.completed_jobs_label.configure(disabledforeground="#a3a3a3")
        self.completed_jobs_label.configure(foreground="#ffffff")
        self.completed_jobs_label.configure(relief="groove")
        self.completed_jobs_label.configure(text="Ολοκληρωμένες εργασίες")

        self.search_dte_entry = ttk.Entry(top, width=12, font=("Calibri", 10, 'bold'))
        self.search_dte_entry.place(relx=0.655, rely=0.630, relheight=0.035, relwidth=0.040)
        self.search_dte_entry.bind('<Return>', self.search_dte)
        self.dte_label = tk.Label(top)
        self.dte_label.place(relx=0.655, rely=0.610, relheight=0.020, relwidth=0.073)
        self.dte_label.configure(font=("Calibri", 10, "bold"))
        self.dte_label.configure(background="#5fa15f")
        self.dte_label.configure(disabledforeground="#a3a3a3")
        self.dte_label.configure(foreground="#ffffff")
        self.dte_label.configure(relief="groove")
        self.dte_label.configure(text="Αναζήτηση ΔΤΕ")
        self.search_dte_btn = tk.Button(top)
        self.search_dte_btn.place(relx=0.697, rely=0.630, relheight=0.035, relwidth=0.030)
        self.search_dte_btn.configure(background="#6b6b6b")
        self.search_dte_btn_img = PhotoImage(file="icons/search_tasks.png")
        self.search_dte_btn.configure(image=self.search_dte_btn_img)
        self.search_dte_btn.configure(compound='left')
        self.search_dte_btn.configure(command=self.search_dte)

        self.search_tasks_data = StringVar()
        self.search_tasks_entry = tk.Entry(top)
        self.search_tasks_entry.place(relx=0.760, rely=0.630, relheight=0.035, relwidth=0.100)
        self.search_tasks_entry.configure(background="white")
        self.search_tasks_entry.configure(disabledforeground="#a3a3a3")
        self.search_tasks_entry.configure(font=("Calibri", 12))
        self.search_tasks_entry.configure(foreground="#000000")
        self.search_tasks_entry.configure(insertbackground="black")
        self.search_tasks_entry.configure(textvariable=self.search_tasks_data)
        self.search_tasks_entry.bind('<Return>', self.search_tasks)
        self.search_tasks_btn = tk.Button(top)
        self.search_tasks_btn.place(relx=0.865, rely=0.630, height=30, relwidth=0.120)
        self.search_tasks_btn.configure(background="#6b6b6b")
        self.search_tasks_btn_img = PhotoImage(file="icons/search_tasks.png")
        self.search_tasks_btn.configure(image=self.search_tasks_btn_img)
        self.search_tasks_btn.configure(compound='left')
        self.search_tasks_btn.configure(font=("Calibri", 10, "bold"))
        self.search_tasks_btn.configure(foreground="white")
        self.search_tasks_btn.configure(text="Αναζήτηση εργασιών")
        self.search_tasks_btn.configure(command=self.search_tasks)

        # Πίνακας Ημερολόγιο εργασιών
        self.calendar_treeview = ScrolledTreeView(top)
        self.calendar_treeview.place(relx=0.225, rely=0.680, relheight=0.300, relwidth=0.760)
        self.calendar_treeview.configure(show="headings", style="mystyle.Treeview", selectmode="browse")
        self.calendar_treeview.bind("<<TreeviewSelect>>", self.edit_scheduled_tasks)

        self.day = self.today.day
        self.year = self.today.year
        self.month = self.today.month
        self.calendar_var = StringVar()
        # create the entry and configure the calendar colors
        self.service_calendar = Calendar(top, width=12, year=self.year, month=self.month, day=self.day,
                                         background='gray20', selectmode='day', foreground='white', borderwidth=5,
                                         locale="el_GR",
                                         font=("Calibri", 10, 'bold'))
        # self.service_calendar.drop_down()
        self.service_calendar.place(relx=0.021, rely=0.680, relheight=0.300, relwidth=0.200)
        self.service_calendar.bind('<<CalendarSelected>> ', self.view_scheduled_tasks)

        self.get_calendar()

    def activate(self):
        activate.run_activate()

    # Προσθήκη εταιρείας στην αποθήκη ανταλλακτικών repository
    def add_table(self):
        table_to_add = self.add_table_entry.get()
        con = sqlite3.connect(spare_parts_db)
        c = con.cursor()
        try:
            # Ελεγχος αν το όνομα εταιρείας που εισάγει ο χρήστης είναι κεφαλαία
            for letter in table_to_add:
                if str(letter).islower():
                    messagebox.showerror("Σφάλμα!", "Παρακαλώ μόνο κεφαλαία γράμματα")
                    return
            c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table_to_add,))
            table_exist = c.fetchall()

            if table_exist:
                messagebox.showerror("Σφάλμα", f'Η εταιρεία {table_exist[0][0]} υπάρχει')
                con.close()
                return
            else:
                c.execute(" CREATE TABLE IF NOT EXISTS " + table_to_add +
                          " (ID INTEGER PRIMARY KEY AUTOINCREMENT, PARTS_NR TEXT, ΠΕΡΙΓΡΑΦΗ TEXT, ΚΩΔΙΚΟΣ TEXT, ΤΕΜΑΧΙΑ TEXT, "
                          "ΠΑΡΑΤΗΡΗΣΗΣ text); ")

                c.execute("INSERT INTO sqlite_sequence(name, seq)VALUES(?,?)", (table_to_add, 0))
        except sqlite3.OperationalError as error:
            messagebox.showerror("Σφάλμα!", "Παρακαλώ δηλώστε όνομα κατηγορίας")
            con.close()
            return
        con.commit()
        con.close()
        messagebox.showinfo("Info", f'Ο {table_to_add} Δημιουργήθηκε')
        self.companies = get_tables()
        self.repository_company_combobox.configure(values=self.companies)
        return

    def del_table_from_repository(self):
        answer = messagebox.askquestion("Προσοχή!",
                                        f'Ειστε σίγουρος για την διαγραφή της εταιρείας {self.repository_company_combobox.get()};')
        if answer != "yes":
            return

        table_to_del = self.repository_company_combobox.get()
        print(f"=============Backup =========\nΔιαγραφή πίνακα {table_to_del}")
        self.backup_repository()
        con = sqlite3.connect(spare_parts_db)
        c = con.cursor()
        c.execute(f"DROP TABLE {table_to_del}")
        c.execute("DELETE FROM sqlite_sequence WHERE name =?", (table_to_del,))
        con.commit()
        c.close()
        con.close()
        messagebox.showinfo("Προσοχή!", f"Η εταιρεία {table_to_del} διαγράφηκε")
        self.companies = get_tables()
        self.repository_company_combobox.configure(values=self.companies)

    def add_spare_part_on_repository(self):
        selected_table = self.repository_company_combobox.get()
        if selected_table != "":
            add_spare_parts_to_repository.create_insert_spare_parts_window(self.top, selected_table)
            # self.top.wm_state('iconic')
        else:
            messagebox.showinfo("Προσοχή!", "Παρακαλώ επιλέξτε πρώτα εταιρεία")
            pass

    def edit_spare_part_on_repository(self, event=None):
        selected_table = self.repository_company_combobox.get()
        if selected_table != "":

            # id ==> το ιδ του επιλεγμένου ανταλλακτικου
            spare_part_id = (self.repository_treeview.set(self.repository_treeview.selection(), '#1'))
            # Αν ο κωδικός είναι το τεταρτο πεδίο του πίνακα
            heading = self.repository_treeview.heading("#4", "text")

            # Αν ο κωδικός είναι το τεταρτο πεδίο του πίνακα δεν είναι TONER φωτοτυπικά κτλπ o πήνακας
            if heading == "ΚΩΔΙΚΟΣ":
                spare_part_code = (self.repository_treeview.set(self.repository_treeview.selection(), "#4"))

            else:  # αν δεν είναι ΚΩΔΙΚΟΣ το #4 πεδίο τότε είναι το #6
                heading = self.repository_treeview.heading("#6", "text")
                spare_part_code = (self.repository_treeview.set(self.repository_treeview.selection(), "#6"))

            edit_spare_parts_to_repository.create_insert_spare_parts_window(self.top, selected_table, spare_part_id,
                                                                            spare_part_code)
            # self.top.wm_state('iconic')

        else:
            messagebox.showinfo("Προσοχή!", "Παρακαλώ επιλέξτε πρώτα εταιρεία")
            pass

    # Εμφάνηση αποθήκης
    def get_repository(self, event=None):
        self.add_spare_part_on_repository_btn.configure(
            text=f'''Προσθήκη ανταλλακτικού {self.repository_company_combobox.get()}''')
        self.add_spare_part_on_repository_btn.place(relx=0.025, rely=0.150, height=35, relwidth=0.260)

        self.del_table_from_repository_btn.configure(text=f'Διαγραφή {self.repository_company_combobox.get()}')
        self.del_table_from_repository_btn.place(relx=0.850, rely=0.015, relheight=0.150, relwidth=0.150)
        self.selected_repository_company = self.repository_company_combobox.get()
        self.company_image.place(relx=0.500, rely=0.050, height=88, width=120)
        try:
            self.company_image_img = PhotoImage(file="icons/" + self.repository_company_combobox.get() + ".png")
            self.company_image.configure(image=self.company_image_img)
        except TclError:  # couldn't open "icons/.png": no such file or directory
            self.company_image_img = PhotoImage(file="icons/no_image.png")
            self.company_image.configure(image=self.company_image_img)
            pass

        if self.selected_repository_company != "":
            self.repository_treeview.delete(*self.repository_treeview.get_children())

        con = sqlite3.connect(spare_parts_db)
        c = con.cursor()
        c.execute("SELECT * FROM " + self.selected_repository_company + ";")
        self.repository_headers = list(map(lambda x: x[0], c.description))
        data = c.fetchall()
        con.close()
        self.repository_treeview["columns"] = [head for head in self.repository_headers]
        for head in self.repository_headers:
            if head == "id" or head == "ID" or head == "Id":
                platos = 1
            elif head == "ΠΕΡΙΓΡΑΦΗ" and len(self.repository_headers) > 6:
                platos = 300
            elif head == "ΠΕΡΙΓΡΑΦΗ" and len(self.repository_headers) < 7:
                platos = 400
            elif head == "PARTS_NR":
                platos = 200
            else:
                platos = 120
            self.repository_treeview.heading(head, text=head, anchor="center")
            self.repository_treeview.column(head, width=platos, anchor="center")
        for d in data:
            self.repository_treeview.insert("", "end", values=d)

    # Αναζήτηση αποθήκης
    def search_on_repository(self, event=None):
        self.repository_treeview.delete(*self.repository_treeview.get_children())
        data_to_search = self.search_on_repository_entry.get()
        search_headers = []
        no_neded_headers = ["id", "ID", "Id"]
        operators = []
        for header in self.repository_headers:

            if header not in no_neded_headers:
                search_headers.append(header + " LIKE ?")
                operators.append('%' + str(data_to_search) + '%')
        search_headers = " OR ".join(search_headers)
        # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

        # search_cursor.execute("SELECT * FROM " + table + " WHERE \
        # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
        # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...

        conn = sqlite3.connect(spare_parts_db)
        cusror = conn.cursor()
        cusror.execute("SELECT * FROM " + self.selected_repository_company + " WHERE " + search_headers, operators)
        fetch = cusror.fetchall()  # Δεδομένα απο Service
        conn.close()
        for item in fetch:
            self.repository_treeview.insert("", "end", values=item)

    def check_table(self, name, index, mode):
        """

        :param mode:
        :param index:
        :type name: object
        """
        self.add_table_entry_warning.place_forget()
        current_table = self.repository_table

        no_needed_tables = ['ΠΡΩΤΟΣ_ΟΡΟΦΟΣ', "ΧΧΧ", "sqlite_sequence"]
        con = sqlite3.connect(spare_parts_db)
        c = con.cursor()
        c.execute("select name from sqlite_master where type = 'table' ORDER BY name;")
        tables = c.fetchall()
        # messagebox.showwarning("tables", f'{tables}')
        c.close()
        con.close()
        companies = []
        for table in tables:
            if table[0] not in no_needed_tables:
                companies.append(table[0])

        if self.add_table_entry.get() in companies and self.add_table_entry.get() != current_table:
            self.add_table_entry.configure(foreground="red")
            # self.add_table_entry.place(relx=0.815, rely=0.080, relheight=0.065, relwidth=0.200)
            self.add_table_entry_warning.place(relx=0.620, rely=0.230, relheight=0.060, relwidth=0.150)
        else:
            self.add_table_entry.configure(foreground="green")
            self.add_table_entry_warning.place_forget()

    # Ελεγχος αν το serial  υπάρχει
    def check_serial(self, name, index, mode):
        self.serial_entry_warning.place_forget()
        current_copier_id = (self.copiers_treeview.set(self.copiers_treeview.selection(), '#1'))

        all_serials = []
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT Serial FROM Φωτοτυπικά")
        serials = c.fetchall()
        c.execute("SELECT Serial FROM Φωτοτυπικά WHERE ID = ?", (current_copier_id,))
        current_serial = c.fetchall()
        con.close()

        for serial in serials:
            all_serials.append(serial[0])

        if self.serial_entry.get() in all_serials and self.serial_entry.get() != current_serial[0][0]:
            self.serial_entry.configure(foreground="red")
            # self.serial_entry.place(relx=0.225, rely=0.100, height=20, relwidth=0.2)
            self.serial_entry_warning.place(relx=0.425, rely=0.100, relheight=0.060, relwidth=0.03)
        else:
            self.serial_entry.configure(foreground="green")
            self.serial_entry_warning.place_forget()

    # Ελεγχος αν το όνομα του πελάτη υπάρχει
    def check_customer_name(self, name, index, mode):
        self.company_name_warning.place_forget()

        all_names = []
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT Επωνυμία_Επιχείρησης FROM Πελάτες")
        customers_names = c.fetchall()
        c.execute("SELECT Επωνυμία_Επιχείρησης FROM Πελάτες WHERE ID=?", (self.selected_customer_id,))
        current_customer = c.fetchall()
        con.close()

        for name in customers_names:
            all_names.append(name[0])

        if self.company_name_entry.get() in all_names and self.company_name_entry.get() != current_customer[0][0]:
            self.company_name_entry.configure(foreground="red")
            # self.company_name_entry.place(relx=0.225, rely=0.100, height=20, relwidth=0.250)
            self.company_name_warning.place(relx=0.475, rely=0.100, relheight=0.060, relwidth=0.020)
        else:
            self.company_name_entry.configure(foreground="green")
            self.company_name_warning.place_forget()

    # Ελεγχος αν το τηλ υπάρχει
    def phone_check(self, name, index, mode):
        self.phone_warning.place_forget()
        all_phones = []
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT Τηλέφωνο FROM Πελάτες WHERE Κατάσταση = 1;")
        phones = c.fetchall()
        c.execute("SELECT Τηλέφωνο FROM Πελάτες WHERE ID=? AND Κατάσταση =1", (self.selected_customer_id,))
        current_phone = c.fetchall()

        con.close()

        for phone in phones:
            all_phones.append(phone[0])

        if self.phone_entry.get() in all_phones and self.phone_entry.get() != current_phone[0][0]:
            self.phone_entry.configure(foreground="red")
            # self.phone_entry.place(relx=0.225, rely=0.340, height=20, relwidth=0.250)
            self.phone_warning.place(relx=0.475, rely=0.340, relheight=0.060, relwidth=0.020)
        else:
            self.phone_entry.configure(foreground="green")
            self.phone_warning.place_forget()

    # Ελεγχος αν το κινιτό υπάρχει
    def check_mobile(self, name, index, mode):
        self.mobile_warning.place_forget()

        all_mobiles = []
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT Κινητό FROM Πελάτες WHERE Κατάσταση = 1;")
        mobiles = c.fetchall()
        c.execute("SELECT Κινητό FROM Πελάτες WHERE ID=? AND Κατάσταση =1", (self.selected_customer_id,))
        current_mobile = c.fetchall()
        con.close()
        for mobile in mobiles:
            all_mobiles.append(mobile[0])

        if self.mobile_entry.get() in all_mobiles and self.mobile_entry.get() != current_mobile[0][0]:
            self.mobile_entry.configure(foreground="red")
            # self.mobile_entry.place(relx=0.225, rely=0.420, height=20, relwidth=0.250)
            self.mobile_warning.place(relx=0.475, rely=0.420, relheight=0.060, relwidth=0.020)
        else:
            self.mobile_entry.configure(foreground="green")
            self.mobile_warning.place_forget()

    # Αναζήτηση ΔΤΕ
    def search_dte(self, event=None):

        self.service_treeview.delete(*self.service_treeview.get_children())

        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT * FROM Service WHERE ΔΤΕ =?", (self.search_dte_entry.get(),))
        data_from_service = c.fetchall()
        if data_from_service:
            self.notebook.select(tab_id=3)
            self.service_headers= ['ID', "Ημερομηνία", "Σκοπός_Επίσκεψης", "Ενέργειες", "Τεχνικός", 'Σημειώσεις',
                               'Μετρητής', 'Επ_Service', "Copier_ID", "ΔΤΕ", "Price"]
            columns = []
            for head in self.service_headers:
                columns.append(head)
            self.service_treeview["columns"] = [head for head in columns]
            for head in self.service_headers:
                if head == "ID":
                    platos = 1
                elif head == "Ημερομηνία":
                    platos = 100
                elif head == "Τεχνικός":
                    platos = 100
                elif head == "Σκοπός_Επίσκεψης":
                    platos = 220
                elif head == "Ενέργειες":
                    platos = 180
                elif head == "Σημειώσεις":
                    platos = 275
                elif head == "Μετρητής":
                    platos = 80
                elif head == "Επ_Service":
                    platos = 110
                elif head == "ΔΤΕ":
                    platos = 70
                else:
                    platos = 50
                self.service_treeview.heading(head, text=head, anchor="center")
                self.service_treeview.column(head, width=platos, anchor="center")
            sorted_fetch = sorted(data_from_service, key=lambda x: datetime.strptime(x[1], "%d/%m/%Y"))
            for item in sorted_fetch:
                self.service_treeview.insert("", "end", values=item)
            c.close()
            con.close()
            empty_var = StringVar(value="")
            self.search_dte_entry.configure(textvariable=empty_var)
            self.service_treeview.bind("<<TreeviewSelect>>", self.edit_service)
            return
        return

    def search_tasks_of_selected_copier(self):

        self.calendar_treeview.delete(*self.calendar_treeview.get_children())
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT * FROM Calendar WHERE Copier_ID =? AND Κατάσταση =1", (self.selected_copier_id,))
        data = c.fetchall()
        c.close()
        con.close()
        sorted_data = sorted(data, key=lambda x: datetime.strptime(x[1], "%d/%m/%Y"))
        for task in sorted_data:
            self.calendar_treeview.insert("", "end", values=task)

    def set_task_notifier(self, selected_copier_id):

        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT Κατάσταση FROM Calendar WHERE Copier_ID =? and Κατάσταση = 1", (selected_copier_id,))
        data = c.fetchall()
        c.close()
        con.close()

        try:
            status = data[0][0]
        except IndexError:
            self.task_notifier_btn.place_forget()
            return

        # messagebox.showwarning("data notifier", f"{calendar_id}")
        if status:
            self.task_notifier_btn.configure(text="Εργασίες σε\n εκκρεμότητα", foreground='white')
            self.task_notifier_btn.configure(compound='left')
            self.task_notifier_btn.place(relx=0.860, rely=0.006, height=50, relwidth=0.130)
        else:
            self.task_notifier_btn.place_forget()

    def get_spare_parts(self, event=None):

        self.spare_parts_treeview.delete(*self.spare_parts_treeview.get_children())
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT * FROM  Ανταλλακτικά WHERE Customer_ID = ?", (self.selected_customer_id,))
        self.spare_parts_headers = list(map(lambda x: x[0], c.description))
        data = c.fetchall()
        con.close()

        self.spare_parts_treeview["columns"] = [head for head in self.spare_parts_headers]
        for head in self.spare_parts_headers:
            if head == "id" or head == "ID" or head == "Id":
                platos = 1
            elif head == "ΠΕΡΙΓΡΑΦΗ":
                platos = 300
            elif head == "PARTS_NR":
                platos = 120
            elif head == "Μηχάνημα":
                platos = 250
            else:
                platos = 120
            self.spare_parts_treeview.heading(head, text=head, anchor="center")
            self.spare_parts_treeview.column(head, width=platos, anchor="center")
        for d in data:
            self.spare_parts_treeview.insert("", "end", values=d)

    def get_completed_jobs(self, event=None):

        selected_date = self.completed_jobs.get_date()
        formated_date = selected_date.strftime("%d/%m/%Y")
        # Αδειάζουμε πρώτα το tree
        self.calendar_treeview.delete(*self.calendar_treeview.get_children())

        conn = sqlite3.connect(dbase)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Calendar WHERE Ημ_Ολοκλ =? AND Κατάσταση = 0", (formated_date,))
        fetch = cursor.fetchall()  # Δεδομένα απο Service
        conn.close()
        sorted_fetch = sorted(fetch, key=lambda x: datetime.strptime(x[1], "%d/%m/%Y"))
        for item in sorted_fetch:
            self.calendar_treeview.insert("", "end", values=item)

    def get_calendar(self, event=None):

        self.calendar_treeview.delete(*self.calendar_treeview.get_children())
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT * FROM  Calendar WHERE Κατάσταση = 1;")
        self.tasks_headers = list(map(lambda x: x[0], c.description))
        data = c.fetchall()
        con.close()
        no_need_heads = ['Τηλέφωνο', 'Σημειώσεις', 'Copier_ID', 'ΔΤΕ', 'Service_ID', 'Μετρητής', 'Επ_Service',
                         'Customer_ID', 'Κατάσταση', 'file', 'Price', ]
        needed_heads = [head for head in self.tasks_headers if head not in no_need_heads]
        self.calendar_treeview["columns"] = [head for head in self.tasks_headers if head not in no_need_heads]

        for head in needed_heads:
            if head == "id" or head == "ID" or head == "Id":
                platos = 1
            elif head == "Πελάτης":
                platos = 250
            elif head == "Μηχάνημα":
                platos = 260
            elif head == "Σκοπός":
                platos = 200
            elif head == "Τεχνικός":
                platos = 200
            else:
                platos = 100
            self.calendar_treeview.heading(head, text=head, anchor="center")
            self.calendar_treeview.column(head, width=platos, anchor="center")
        sorted_data = sorted(data, key=lambda x: datetime.strptime(x[1], "%d/%m/%Y"))
        for d in sorted_data:
            self.calendar_treeview.insert("", "end", values=d)

    def add_scheduled_tasks(self):

        add_task.create_add_task_window(root, self.selected_customer_id)

    def view_scheduled_tasks(self, event=None):

        # https://pypi.org/project/tkcalendar/
        selected_date = self.service_calendar.selection_get()
        formated_date = selected_date.strftime("%d/%m/%Y")
        # Αδειάζουμε πρώτα το tree
        self.calendar_treeview.delete(*self.calendar_treeview.get_children())

        conn = sqlite3.connect(dbase)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Calendar WHERE Ημερομηνία =? AND Κατάσταση = 1", (formated_date,))
        fetch = cursor.fetchall()  # Δεδομένα απο Service
        conn.close()

        sorted_fetch = sorted(fetch, key=lambda x: datetime.strptime(x[1], "%d/%m/%Y"))
        for item in sorted_fetch:
            self.calendar_treeview.insert("", "end", values=item)

    def view_service_from_spare_parts(self, event):
        con = sqlite3.connect(dbase)
        c = con.cursor()
        service_id = (self.spare_parts_treeview.set(self.spare_parts_treeview.selection(), "#8"))

        if service_id == "0":
            calendar_id = (self.spare_parts_treeview.set(self.spare_parts_treeview.selection(), "#10"))
            # Αυτή είναι συνάρτηση του αρχείου edit_task
            edit_task.create_edit_task_window(root, calendar_id)
            return

        c.execute("SELECT Copier_ID FROM Service WHERE ID =? ", (service_id,))
        copier_data = c.fetchall()
        copier_id = copier_data[0][0]
        c.execute("SELECT Εταιρεία FROM Φωτοτυπικά WHERE ID =?", (copier_id,))
        copier_name = c.fetchall()
        selected_copier_name = copier_name[0][0]
        con.close()
        # Αυτή είναι συνάρτηση του αρχείου edi_service_windows
        create_edit_service_window(root, service_id, selected_copier_name, self.selected_customer,
                                   self.selected_customer_id)

    def edit_scheduled_tasks(self, event=None):

        selected_calendar_id = (self.calendar_treeview.set(self.calendar_treeview.selection(), '#1'))
        edit_task.create_edit_task_window(root, selected_calendar_id)
        # self.top.wm_state('iconic')

    def search_tasks(self, event=None, data=None):

        if not data:  # data είναι η ημερομηνία που στέλνει όταν πατήσουμε στο ημερολόγιο
            data_to_search = self.search_tasks_data.get()
        else:  # αν δεν πατήσουμε στο ημερολόγιο τότε να ψάξει ότι έχουμε γράψει
            data_to_search = data
        # Αδειάζουμε πρώτα το tree
        self.calendar_treeview.delete(*self.calendar_treeview.get_children())

        search_headers = []
        no_need_headers = ["id", "ID", "Id"]
        operators = []
        for header in self.tasks_headers:

            if header not in no_need_headers:
                search_headers.append(header + " LIKE ?")
                operators.append('%' + str(data_to_search) + '%')
        search_headers = " OR ".join(search_headers)
        # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

        # search_cursor.execute("SELECT * FROM " + table + " WHERE \
        # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
        # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...

        conn = sqlite3.connect(dbase)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Calendar WHERE " + search_headers, operators)
        fetch = cursor.fetchall()  # Δεδομένα απο Calendar
        conn.close()
        sorted_fetch = sorted(fetch, key=lambda x: datetime.strptime(x[1], "%d/%m/%Y"))
        for item in sorted_fetch:
            self.calendar_treeview.insert("", "end", values=item)
        self.search_tasks_data.set(value="")

    def show_licence(self):

        messagebox.showinfo("Υπολειπόμενες μέρες",
                            f"Υπολειπόμενες μέρες υποστήριξης της εφαρμογής {self.remaining_days}")

    def search_selected_copier_service(self, event=None):

        if not self.selected_copier_id:
            messagebox.showwarning("Προσοχή", "Παρακαλώ επιλέξτε πρώτα μηχάνημα")
            return
        # Αδειάζουμε πρώτα το tree
        self.service_treeview.delete(*self.service_treeview.get_children())
        data_to_search = self.search_selected_copier_service_data.get()

        search_headers = []
        no_need_headers = ["id", "ID", "Id"]
        operators = []
        for header in self.service_headers:

            if header not in no_need_headers:
                search_headers.append(header + " LIKE ?")
                operators.append('%' + str(data_to_search) + '%')
        search_headers = " OR ".join(search_headers)
        # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

        # search_cursor.execute("SELECT * FROM " + table + " WHERE \
        # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
        # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...

        # Αναζήτηση σε ολο το Service και αν το [-1] είναι ισο με το επιλεγμένο φωτοτυπικό δλδ
        # ελεγχουμε να πάρουμε τα δεδομένα του Service μόνο για το επιλεγμένο Φωτοτυπικό
        #
        conn = sqlite3.connect(dbase)
        cusror = conn.cursor()
        cusror.execute("SELECT * FROM Service WHERE " + search_headers, operators)
        fetch = cusror.fetchall()  # Δεδομένα απο Service

        conn.close()
        columns = []
        for head in self.service_headers:
            columns.append(head)

        self.service_treeview["columns"] = [head for head in columns]
        for head in self.service_headers:
            if head == "ID":
                platos = 1
            elif head == "Ημερομηνία":
                platos = 100
            elif head == "Τεχνικός":
                platos = 100
            elif head == "Σκοπός_Επίσκεψης":
                platos = 220
            elif head == "Ενέργειες":
                platos = 180
            elif head == "Σημειώσεις":
                platos = 275
            elif head == "Μετρητής":
                platos = 80
            elif head == "Επ_Service":
                platos = 110
            elif head == "ΔΤΕ":
                platos = 70
            else:
                platos = 50
            self.service_treeview.heading(head, text=head, anchor="center")
            self.service_treeview.column(head, width=platos, anchor="center")
        sorted_fetch = sorted(fetch, key=lambda x: datetime.strptime(x[1], "%d/%m/%Y"))

        # item[-4] ==> Copier_ID στον πίνακα Service
        for item in sorted_fetch:

            if item[-4] == self.selected_copier_id:
                self.service_treeview.insert("", "end", values=item)

    # Προβολή ισορικού μεταφοράς φωτοτυπικών
    def get_copiers_log(self, event=None):

        copiers_log.create_Toplevel1(root)

    # Αναζήτηση σφαλμάτων
    def search_error(self, event=None, search_from_dte=None):
        if search_from_dte:
            self.search_errors_data.set(value=self.search_dte_entry.get())
        if self.search_errors_data.get() != "":  # Αν έχουμε γράψει κάτι στην αναζήτηση στο search_errors_entry

            # Αδειάζουμε το tree  δλδ το self.service_treeview
            self.service_treeview.delete(*self.service_treeview.get_children())
            # Σύνδεση με βάση
            search_conn = sqlite3.connect(dbase)
            search_cursor = search_conn.cursor()
            # idea = SELECT * FROM tablename WHERE name or email or address or designation = 'λεξη αναζήτησεις';
            # Να πάρουμε πρώτα κεφαλίδες
            search_cursor.execute("SELECT * FROM Service")
            headers = list(map(lambda x: x[0], search_cursor.description))

            search_headers = []
            no_neded_headers = ["id", "ID", "Id"]
            operators = []
            for header in headers:
                if header not in no_neded_headers:
                    search_headers.append(header + " LIKE ?")
                    operators.append('%' + str(self.search_errors_data.get()) + '%')
            search_headers = " OR ".join(search_headers)
            # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

            # search_cursor.execute("SELECT * FROM " + table + " WHERE \
            # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
            # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...

            search_cursor.execute("SELECT * FROM Service WHERE " + search_headers, operators)
            fetch = search_cursor.fetchall()  # Δεδομένα απο Service

            copiers_id = []
            copiers = []
            customers_id = []
            customers = []
            for n in range(len(fetch)):
                copiers_id.append(fetch[n][-4])

                search_cursor.execute("SELECT Εταιρεία FROM Φωτοτυπικά WHERE ID=?", (fetch[n][-4],))

                copiers.append(search_cursor.fetchall())  # Πέρνουμε το Φωτοτυπικό

                search_cursor.execute("SELECT Πελάτη_ID FROM Φωτοτυπικά WHERE ID=?", (copiers_id[n],))
                customers_id.append(search_cursor.fetchall())  # Πέρνουμε τα ID των πελατών

                search_cursor.execute("SELECT Επωνυμία_Επιχείρησης FROM Πελάτες WHERE ID=?", (customers_id[n][0][0],))
                customers.append(search_cursor.fetchall())  # Πέρνουμε απο τον πελάτη το Επωνυμία_Επιχείρησης

            search_cursor.close()
            search_conn.close()
            self.service_treeview["columns"] = ["ID", "Ημερομηνία", "Μηχάνημα", "Πελάτης", "Σκοπός_Επίσκεψης",
                                                "Ενέργειες", "Σημειώσεις", "ΔΤΕ"]
            headers = ["ID", "Ημερομηνία", "Μηχάνημα", "Πελάτης", "Σκοπός_Επίσκεψης", "Ενέργειες", "Σημειώσεις", "ΔΤΕ"]
            for head in headers:
                if head == "ID":
                    platos = 1
                elif head == "Ημερομηνία":
                    platos = 100
                elif head == "Σκοπός_Επίσκεψης":
                    platos = 220
                elif head == "Τεχνικός":
                    platos = 100
                elif head == "Ενέργειες":
                    platos = 180
                elif head == "Σημειώσεις":
                    platos = 275
                elif head == "Μηχάνημα":
                    platos = 200
                elif head == "Επ_Service":
                    platos = 110
                elif head == "Πελάτης":
                    platos = 200
                elif head == "ΔΤΕ":
                    platos = 80
                else:
                    platos = 50
                self.service_treeview.heading(head, text=head, anchor="center")
                self.service_treeview.column(head, width=platos, anchor="center")
            sorted_fetch = sorted(fetch, key=lambda x: datetime.strptime(x[1], "%d/%m/%Y"))
            data = []
            for n in range(len(sorted_fetch)):
                data.append(sorted_fetch[n][0])  # ID
                data.append(sorted_fetch[n][1])  # Ημερομηνία
                data.append(str(copiers[n][0][0]))  # Μηχάνημα
                data.append(str(customers[n][0][0]))  # Πελάτης
                data.append(sorted_fetch[n][2])  # Σκοπός
                data.append(sorted_fetch[n][3])  # Ενέργειες
                data.append(sorted_fetch[n][5])  # Σημειώσεις
                data.append(sorted_fetch[n][9])  # Δελτίο τεχνικής εξυπηρέτησεις
                self.service_treeview.insert("", "end", values=tuple(data))
                data = []  # Αδιασμα του data για να εισάγουμε τα νέα δεδομένα

            return None
        else:
            return

    # Αναζήτηση ανταλλακτικών
    def search_spare_parts(self, event=None):

        data_to_search = self.search_spare_parts_entry.get()

        # Αδειάζουμε πρώτα το tree
        self.spare_parts_treeview.delete(*self.spare_parts_treeview.get_children())

        search_headers = []
        no_need_headers = ["id", "ID", "Id"]
        operators = []
        for header in self.spare_parts_headers:

            if header not in no_need_headers:
                search_headers.append("( " + header + f" LIKE ?  AND Customer_ID = {self.selected_customer_id} )")

                operators.append('%' + str(data_to_search) + '%')
        search_headers = " OR ".join(search_headers)

        # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

        # search_cursor.execute("SELECT * FROM " + table + " WHERE \
        # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
        # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...

        conn = sqlite3.connect(dbase)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Ανταλλακτικά WHERE " + search_headers, operators)
        fetch = cursor.fetchall()  # Δεδομένα απο Service
        conn.close()
        for item in fetch:
            self.spare_parts_treeview.insert("", "end", values=item)

    def quit(self, event):

        root.destroy()

        # ---------------------Fix -Of- Style------------------------------------

    def fixed_map(self, option):

        # Fix for setting text colour for Tkinter 8.6.9
        # From: https://core.tcl.tk/tk/info/509cafafae
        #
        # Returns the style map for 'option' with any styles starting with
        # ('!disabled', '!selected', ...) filtered out.

        # style.map() returns an empty list for missing options, so this
        # should be future-safe.
        return [elm for elm in self.style.map('Treeview', query_opt=option) if elm[:2] != ('!disabled', '!selected')]

    # Εμφάνησει πελατών αλφαβητικά
    def get_customers(self):
        customers_conn = sqlite3.connect(dbase)
        customers_cursor = customers_conn.cursor()
        customers_cursor.execute("SELECT * FROM " + self.customer_table +
                                 " WHERE Κατάσταση = 1 ORDER BY Επωνυμία_Επιχείρησης ASC")
        self.customers_headers = list(map(lambda x: x[0], customers_cursor.description))
        customers_data = customers_cursor.fetchall()
        customers_data.sort(key=lambda x: x[1], reverse=False)  # Ταξινόμηση με Επωνυμία_Επιχείρησης

        customers_cursor.close()
        customers_conn.close()

        # Κατασκευή tree το up_index -1 == το τελος ("end")
        self.customers_treeview.delete(*self.customers_treeview.get_children())
        for n in range(len(customers_data)):
            self.customers_treeview.insert("", "end", values=customers_data[n])

    # Εμφάνηση όλων των ενεργών φωτοτυπικών
    def show_all_enabled_copiers(self):
        self.copiers_treeview.delete(*self.copiers_treeview.get_children())
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT * FROM Φωτοτυπικά WHERE Κατάσταση = 1;")
        enabled_copiers = c.fetchall()
        c.close()
        con.close()
        for copier in enabled_copiers:
            self.copiers_treeview.insert("", "end", values=copier)

    # Εμφάνηση φωτοτυπικών του επιλεγμένου πελάτη
    # Οταν πατάμε στον πελάτη
    def view_copiers(self, event=None):
        self.phone_warning.place_forget()
        self.notebook.select(tab_id=0)
        # Απενεργοποιηση του κουμπιου προσθήκης ιστορικού
        self.add_service_btn.place_forget()

        #  Αδιάζουμε πρώτα το tree των φωτοτυπικών
        for i in self.copiers_treeview.get_children():
            self.copiers_treeview.delete(i)

        # Αδιάζουμε και το tree των service
        for i in self.service_treeview.get_children():
            self.service_treeview.delete(i)

        # Αδιάζουμε και Μετρητη έναρξης, έναρξη, σειριακό, σημειώσεις και κουμπί αναζήτησης
        var = StringVar(root, value="")
        self.start_counter_entry.configure(textvariable=var)
        self.start_entry.configure(textvariable=var)
        self.serial.set(value="")
        self.serial_entry.configure(textvariable=self.serial)
        self.copiers_title_label.configure(text="Στοιχεία μηχανήματος")
        self.copier_notes_scrolledtext.delete('1.0', 'end-1c')
        self.Label16.configure(text='''Ιστορικό''')

        self.selected_copier_id = ""

        # το selected_item είναι το ID του πελάτη
        selected_item = (self.customers_treeview.set(self.customers_treeview.selection(), '#1'))
        # print("selected_item", selected_item)
        self.selected_customer_id = selected_item
        customers_conn = sqlite3.connect(dbase)
        customers_cursor = customers_conn.cursor()
        # Διαβάζουμε τα δεδομένα του επιλεγμένου πελάτη και συμπληρώνουμε τα entry
        customers_cursor.execute("SELECT * FROM " + self.customer_table + " WHERE ID = ? AND Κατάσταση =1",
                                 (selected_item,))

        customers_data = customers_cursor.fetchall()
        # print("customers_data", customers_data)
        # Οριζμός πελάτη

        if not customers_data:
            customers_cursor.close()
            customers_conn.close()
            return
        self.selected_customer = customers_data[0][1]

        # Ανάκτηση φωτοτυπικών απο τον επιλεγμένο πελάτη
        # τα φωτοτυπικά είναι το τελευταίο πεδίο του πίνακα πελάτη
        # Το κάθε φωτοτυπικό ανηκει σε έναν μόνον πελάτη ==> Πελάτη_ID
        # ο πελάτης μπορεί να έχει πολλά φωτοτυπικά
        customers_cursor.execute("SELECT * FROM " + self.copier_table + " WHERE Πελάτη_ID = ? AND Κατάσταση =1",
                                 (selected_item,))
        copiers = customers_cursor.fetchall()

        # εμφάνιση φωτοτυπικών στο tree των φωτοτυπικών
        for n in range(len(copiers)):
            self.copiers_treeview.insert("", "end", values=copiers[n])

        customers_cursor.close()
        customers_conn.close()
        # Κατασκευή tree το up_index -1 == το τελος ("end")
        # todo πρέπει να γίνει σε for loop και να μπούν σε λίστα

        self.customer_name.set(value=customers_data[0][1])
        self.company_name_entry.configure(textvariable=self.customer_name)
        self.current_customer_name = customers_data[0][1]

        var = StringVar(root, value=customers_data[0][2])
        self.name_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][3])
        self.address_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][4])
        self.city_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][5])
        self.post_code_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][6])
        self.place_entry.configure(textvariable=var)

        self.phone.set(value=customers_data[0][7])
        self.phone_entry.configure(textvariable=self.phone)

        self.mobile.set(value=customers_data[0][8])
        self.mobile_entry.configure(textvariable=self.mobile)

        var = StringVar(root, value=customers_data[0][9])
        self.fax_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][10])
        self.email_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][11])
        self.page_package_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][12])
        self.package_cost_entry.configure(textvariable=var)
        self.customer_notes_scrolledtext.delete("1.0", 'end-1c')
        var = StringVar(root, value=customers_data[0][13])
        self.customer_notes_scrolledtext.insert("1.0", var.get())
        # Εμφάνηση κουμπιού αναζήτησης ανταλλακτικών
        self.get_spare_parts()  # Πρώτα να πάρουμε τα ανταλλακτικά
        self.search_spare_parts_btn.configure(text=f"Αναζήτηση ανταλλακτικών του πελάτη {self.selected_customer}")

    # Εμφάνισει ιστορικού επισκευών επιλεγμένου φωτοτυπικού
    def service_click(self, event):
        """
            Εμφάνηση δεδομένων του πελάτη και το ιστορικό του φωτοτυπικού
        :param event:
        :return:
        """
        self.notebook.select(tab_id=3)

        # Ενεργοποιηση του κουμπιου προσθήκης ιστορικού
        if event:
            self.add_service_btn.configure(activebackground="#6b6b6b")
            self.add_service_btn.configure(activeforeground="white")
            self.add_service_btn.configure(state="active")
            self.add_service_btn.configure(background="#6b6b6b")
            self.add_service_btn.place(relx=0.021, rely=0.100, height=30, relwidth=0.200)

        # αδιάζουμε πρώτα το tree του ιστορικού
        for i in self.service_treeview.get_children():
            self.service_treeview.delete(i)
        # selected_item είναι το ID (Το πρώτο στοιχείο του tree ==>> "#1") του πίνακα
        selected_item = (self.copiers_treeview.set(self.copiers_treeview.selection(), '#1'))
        # Αρχικοποιήση επιλεγμένου φωτοτυπικού
        self.selected_copier = (self.copiers_treeview.set(self.copiers_treeview.selection(), "#2"))
        self.set_task_notifier(selected_item)  # Εμφάνηση ιδοποιήσης αν υπάρχουν προγραμματισμένες εργασίες
        # Εμφάνηση επιλεγμένου φωτοτυπικού
        self.copiers_title_label.configure(text=self.selected_copier)

        self.Label16.configure(text=self.selected_copier)

        service_conn = sqlite3.connect(dbase)
        service_cursor = service_conn.cursor()
        # πρώτα να πάρουμε τα δεδομένα του πελάτη
        # Απο τον πίνακα πελατών συνδέουμε τον πελάτι οπου το ID του πελάτη
        # είναι ιδιο με το  Πελάτη_ID του πίνακα φωτοτυπικά
        # και επιλέγουμε μόνο το φωτοτυπικό που έχει επιλεξει ο χρηστης απο το ID του φωτοτυπικού ==> selected_item
        try:
            service_cursor.execute("SELECT * FROM " + self.customer_table + " CUSTOMERS INNER JOIN " +
                                   self.copier_table + " COPIER ON CUSTOMERS.ID = COPIER.Πελάτη_ID WHERE COPIER.ID = "
                                   + selected_item)
        except sqlite3.OperationalError as error:
            messagebox.showwarning("Προσοχή", "Παρακαλω επιλέξτε πρώτα μηχάνημα για εμφάνιση ιστορικών")
            return None
        customers_data = service_cursor.fetchall()
        # εμφάνιση δεδομένων πελάτη στα entry δεξιά
        # todo πρέπει να γίνει σε for loop και να μπούν σε λίστα
        self.selected_customer_id = customers_data[0][0]  # ορισμός ID πελάτη
        self.selected_customer = customers_data[0][1]  # ορισμός πελάτη

        self.customer_name.set(value=customers_data[0][1])
        self.company_name_entry.configure(textvariable=self.customer_name)
        self.current_customer_name = customers_data[0][1]

        var = StringVar(root, value=customers_data[0][2])
        self.name_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][3])
        self.address_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][4])
        self.city_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][5])
        self.post_code_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][6])
        self.place_entry.configure(textvariable=var)

        self.phone.set(value=customers_data[0][7])
        self.phone_entry.configure(textvariable=self.phone)

        self.mobile.set(value=customers_data[0][8])
        self.mobile_entry.configure(textvariable=self.mobile)

        var = StringVar(root, value=customers_data[0][9])
        self.fax_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][10])
        self.email_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][11])
        self.page_package_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][12])
        self.package_cost_entry.configure(textvariable=var)

        # Εμφάνιση  πελάτη στο tree των πελατών σύμφονα με το επιλεγμένο φωτοτυπικά
        # customers_data[:14] είναι τα στοιχεία του πελάτη μετα είναι τα στοιχεία του φωτοτυπικού
        # Πρώτα αδιάζουμε τον πίνακα πελατών
        self.customers_treeview.delete(*self.customers_treeview.get_children())
        self.customers_treeview.insert("", "end", values=customers_data[0])

        # εμφάνιση του μετρητή έναρξης και ημερομηνία έναρξης
        service_cursor.execute("SELECT * FROM " + self.copier_table + " WHERE ID = ?", (selected_item,))
        copiers = service_cursor.fetchall()
        for n in range(len(copiers)):

            # αν ο πελάτης έχει πολλά φωτοτυπικά πρέπει να γίνει έλεγχος με το ID φωτοτυπικού
            # Το selected_item == string
            if int(selected_item) == int(copiers[n][0]):
                self.selected_copier_id = int(selected_item)
                self.machine_company.set(value=copiers[n][1])
                self.machine_company_entry.configure(textvariable=self.machine_company)
                self.serial.set(value=copiers[n][2])  # Σειριακός αριθμός
                self.serial_entry.configure(textvariable=self.serial)

                var = StringVar(root, value=copiers[n][3])  # Εναρξη
                self.start_entry.configure(textvariable=var)
                var = StringVar(root, value=copiers[n][4])  # Μετρητής έναρξης
                self.start_counter_entry.configure(textvariable=var)
                var = StringVar(root, value=copiers[n][6])  # Σημειώσεις
                self.copier_notes_scrolledtext.delete('1.0', 'end-1c')
                self.copier_notes_scrolledtext.insert("1.0", var.get())
            else:
                continue
        # todo να μπεί και αυτό στο JOIN απο πάνω το WHERE ID = ? ειναι ιδιο με το Copier_ID
        # εμάνιση των εγγραφών συντήρησεις του επιλεγμένου φωτοτυπικού
        service_cursor.execute("SELECT * FROM " + self.service_table + " WHERE Copier_ID = ?", (selected_item,))
        service_data = service_cursor.fetchall()

        self.service_headers = list(map(lambda x: x[0], service_cursor.description))
        service_cursor.close()
        service_conn.close()
        columns = []
        # το τελευταίο πεδίο είναι το Copier_ID και δεν χρειάζεται να εμφανίζεται
        for head in self.service_headers:
            columns.append(head)

        self.service_treeview["columns"] = [head for head in columns]
        for head in self.service_headers:
            if head == "ID":
                platos = 1
            elif head == "Ημερομηνία":
                platos = 100
            elif head == "Σκοπός_Επίσκεψης":
                platos = 220
            elif head == "Τεχνικός":
                platos = 100
            elif head == "Ενέργειες":
                platos = 180
            elif head == "Σημειώσεις":
                platos = 275
            elif head == "Μετρητής":
                platos = 80
            elif head == "Επ_Service":
                platos = 110
            elif head == "ΔΤΕ":
                platos = 70
            else:
                platos = 50
            self.service_treeview.heading(head, text=head, anchor="center")
            self.service_treeview.column(head, width=platos, anchor="center")
        sorted_by_date = sorted(service_data, key=lambda x: datetime.strptime(x[1], "%d/%m/%Y"))
        for n in range(len(sorted_by_date)):
            self.service_treeview.insert("", "end", values=sorted_by_date[n])

        # Εμφάνηση κουμπιού αναζήτησης ανταλλακτικών
        self.get_spare_parts()  # Πρώτα να πάρουμε τα ανταλλακτικά
        self.search_spare_parts_btn.configure(text=f"Αναζήτηση ανταλλακτικών του πελάτη {self.selected_customer}")

    # Επεξεργασία του επιλεγμένου ιστορικού συντηρησης φωτοτυπικού
    def edit_service(self, event):
        """ Επεξεργασία του επιλεγμένου ιστορικού συντηρησης φωτοτυπικού
            Αυτή είναι συνάρτηση αυτής της class του αρχείου service_book_colors
            αρχικοποιει το επιλεγμένο id του ιστορικού του πίνακα Service
            και καλει την συνάρτηση create_edit_service_window του αρχείου edit_service_window
        :param event:
        :return:
        """
        # έλεγχος αν η λέξι Φωτοτυπικό υπάρχει στις κεφαλίδες τότε το tree εχει δημιουργιθεί απο την αναζήτηση
        # των σφαλμάτων (search_error(self)) και στέλνουμε το Φωτοτυπικό και τον πελάτη απο το tree
        # "#1" => id Service  "#3" -> Φωτοτυπικό "#4" -> Πελάτης
        # Διαφορετικά στέλνουμε μόνο το selected_service_id

        try:
            heading = self.service_treeview.heading("#3", "text")
        except TclError as error:

            messagebox.showwarning("Προσοχή", "Παρακαλώ επιλεξτε πρώτα μηχάνημα")
            return

        selected_service_id = (self.service_treeview.set(self.service_treeview.selection(), "#1"))
        if heading == "Σκοπός_Επίσκεψης":  # Όταν είναι απο την αναζήτηση ΔΤΕ
            selected_copier_id = (self.service_treeview.set(self.service_treeview.selection(), "#9"))
            con = sqlite3.connect(dbase)
            c = con.cursor()

            c.execute("SELECT Πελάτη_ID FROM Φωτοτυπικά WHERE ID =?", (selected_copier_id,))
            selected_customer_id = c.fetchall()

            c.execute("SELECT Επωνυμία_Επιχείρησης FROM Πελάτες WHERE ID =?", (selected_customer_id[0][0],))
            selected_customer = c.fetchall()

            c.execute("SELECT Εταιρεία FROM Φωτοτυπικά WHERE ID =?", (selected_copier_id,))
            selected_copier = c.fetchall()

            con.close()
            # Αυτή είναι συνάρτηση του αρχείου edi_service_windows
            create_edit_service_window(root, selected_service_id, selected_copier[0][0], selected_customer[0][0],
                                       selected_customer_id[0][0])

            # ==============================  Notebook style  =============
            self.style.map('TNotebook.Tab', background=[('selected', "#6b6b6b"), ('active', "#69ab3a")])
            self.style.map('TNotebook.Tab', foreground=[('selected', "white"), ('active', "white")])
            return

        elif heading == "Μηχάνημα":  # Όταν είναι απο την αναζήτηση σφαλμάτων
            selected_copier = (self.service_treeview.set(self.service_treeview.selection(), "#3"))
            selected_customer = (self.service_treeview.set(self.service_treeview.selection(), "#4"))
            con = sqlite3.connect(dbase)
            c = con.cursor()
            c.execute("SELECT ID FROM Πελάτες WHERE Επωνυμία_Επιχείρησης =?", (selected_customer,))
            selected_customer_id = c.fetchall()
            con.close()
            # Αυτή είναι συνάρτηση του αρχείου edi_service_windows
            create_edit_service_window(root, selected_service_id, selected_copier, selected_customer,
                                       selected_customer_id[0][0])

            # ==============================  Notebook style  =============
            self.style.map('TNotebook.Tab', background=[('selected', "#6b6b6b"), ('active', "#69ab3a")])
            self.style.map('TNotebook.Tab', foreground=[('selected', "white"), ('active', "white")])
            return
        else:
            if self.selected_copier_id:  # Αν ο χρήστης έχει επιλέξει φωτοτυπικό για να δεί το ιστορικό
                con = sqlite3.connect(dbase)
                cursor = con.cursor()
                cursor.execute("SELECT Εταιρεία FROM Φωτοτυπικά WHERE ID=?", (self.selected_copier_id,))
                copier = cursor.fetchall()  # Εδώ πέρνουμε το Φωτοτυπικό
                selected_copier = copier[0][0]
                cursor.close()
                con.close()
                # self.top.wm_state('iconic')
                create_edit_service_window(root, selected_service_id, selected_copier, self.selected_customer,
                                           self.selected_customer_id)
                # ==============================  Notebook style  =============
                self.style.map('TNotebook.Tab', background=[('selected', "#6b6b6b"), ('active', "#69ab3a")])
                self.style.map('TNotebook.Tab', foreground=[('selected', "white"), ('active', "white")])

    def add_service(self):
        selecteted_copier_id = (self.copiers_treeview.set(self.copiers_treeview.selection(), "#1"))
        # self.top.wm_state('iconic')
        create_add_service_window(root, selecteted_copier_id)
        # ==============================  Notebook style  =============
        self.style.map('TNotebook.Tab', background=[('selected', "#6b6b6b"), ('active', "#69ab3a")])
        self.style.map('TNotebook.Tab', foreground=[('selected', "white"), ('active', "white")])

    # Αναζήτηση πελάτη
    def search_customer(self, event=None):
        """
            Αναζήτηση πελατών
        :param event:
        :return:
        """

        # αδειάζουμε το tree πρώτα για να εμφανίσουμε μόνο τα δεδομένα αναζήτησεις
        self.customers_treeview.delete(*self.customers_treeview.get_children())
        search_conn = sqlite3.connect(dbase)
        search_cursor = search_conn.cursor()
        search_headers = []
        no_neded_headers = ["id", "ID", "Id"]
        operators = []  # operators ==> '%' + str(κωστας) + '%'
        for header in self.customers_headers:
            if header not in no_neded_headers:
                search_headers.append(header + " LIKE ?")
                operators.append('%' + str(self.search_data.get()) + '%')
        search_headers = " OR ".join(search_headers)
        # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

        # search_cursor.execute("SELECT * FROM " + table + " WHERE \
        # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
        # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...
        # search_headers ==> Πόλη LIKE ? OR ID LIKE ? OR .....

        search_cursor.execute("SELECT * FROM " + self.customer_table + " WHERE " + search_headers, operators)
        fetch = search_cursor.fetchall()
        fetch.sort(key=lambda x: x[1])  # Ταξηνόμιση με βάση την Επωνυμία_Επιχείρησης
        search_cursor.close()
        search_conn.close()
        # Κατασκευή tree το up_index -1 == το τελος ("end")
        for n in range(len(fetch)):
            # fetch[n][-1] => Κατάσταση πελάτη 1=Ενεργός 0=Ανενεργός
            if fetch[n][-1]:  # Αν η κατάσταση του πελάτη είναι 1 επιστρεφει true και τον εμφανίζει ποιο κάτω
                self.customers_treeview.insert("", "end", values=fetch[n])
        self.search_data.set(value="")

    # Αναζήτηση φωτοτυπικού
    def search_copier(self, event=None):
        """
            Αναζήτηση φωτοτυπικού
        :param event:
        :return:
        """

        # αδειάζουμε το tree πρώτα για να εμφανίσουμε μόνο τα δεδομένα αναζήτησεις
        self.copiers_treeview.delete(*self.copiers_treeview.get_children())
        search_conn = sqlite3.connect(dbase)
        search_cursor = search_conn.cursor()
        # πρώτα να πάρουμε τις κεφαλίδες του πίνακα φωτοτυπικά
        search_cursor.execute("SELECT * FROM " + self.copier_table + ";")
        self.copiers_headers = list(map(lambda x: x[0], search_cursor.description))
        search_headers = []
        no_neded_headers = ["id", "ID", "Id"]
        operators = []  # operators ==> '%' + str(κωστας) + '%'

        for header in self.copiers_headers:
            if header not in no_neded_headers:
                search_headers.append(header + " LIKE ?")
                operators.append('%' + str(self.search_copier_data.get()) + '%')
        search_headers = " OR ".join(search_headers)
        # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

        # search_cursor.execute("SELECT * FROM " + table + " WHERE \
        # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
        # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...

        search_cursor.execute("SELECT * FROM " + self.copier_table + " WHERE " + search_headers, operators)
        fetch = search_cursor.fetchall()

        search_cursor.close()
        search_conn.close()
        # Κατασκευή tree το up_index -1 == το τελος ("end")
        for n in range(len(fetch)):
            if fetch[n][-1]:  # Επιστρέφει True αν η κατάτσταση του φωτοτυπικού ειναι 1
                self.copiers_treeview.insert("", "end", values=fetch[n])

        # Αδιάζουμε και Μετρητη έναρξης, έναρξη, σειριακό, σημειώσεις και κουμπί αναζήτησης
        var = StringVar(root, value="")
        self.start_counter_entry.configure(textvariable=var)
        self.start_entry.configure(textvariable=var)
        self.serial.set(value="")
        self.serial_entry.configure(textvariable=self.serial)
        self.copiers_title_label.configure(text="Στοιχεία μηχανήματος")
        self.copier_notes_scrolledtext.delete('1.0', 'end-1c')
        try:
            self.service_treeview.delete(*self.service_treeview.get_children())
            self.Label16.configure(text='''Ιστορικό''')
            # Απενεργοποιηση του κουμπιου προσθήκης ιστορικού
            self.add_service_btn.place_forget()

        except AttributeError as error:  # στην πρώτη εκκινηση δεν τα εχει φτιάξει και πετάει error
            pass
        self.selected_copier_id = ""

        # Αδειασμα πεδίου αναζήτησεις
        self.search_copier_data = StringVar()
        self.copier_search_entry.configure(textvariable=self.search_copier_data)

        return

    # Προσθήκη πελάτη
    def add_customer(self):
        """Προσθήκη πελάτη
        καλει την συνάρτηση create_Topelevel1 του αρχείου add_customers
        :return:
        """
        add_customers.create_Toplevel1(root)

    # Διαγραφή πελάτη
    def del_customer(self):
        if self.selected_customer_id:
            answer = messagebox.askokcancel("Προσοχή", f"Εχετε επιλέξει για απενεργοποιήση τον πελάτη "
                                                       f"{self.selected_customer}. \nΘέλετε να συνεχίσεται;")
            if not answer:
                return
            con = sqlite3.connect(dbase)
            cu = con.cursor()
            cu.execute("UPDATE " + self.customer_table + " SET Κατάσταση = 0 WHERE  ID=?", (self.selected_customer_id,))
            cu.execute("SELECT Σημειώσεις FROM " + self.customer_table + " WHERE ID =?", (self.selected_customer_id,))
            old_notes = cu.fetchall()
            new_data_to_log = str(old_notes[0][0]) + "\n" + today + "*********** Απενεργοποιήση πελάτη *********** "
            cu.execute("UPDATE " + self.customer_table + " SET Σημειώσεις = ? WHERE  ID=?",
                       (new_data_to_log, self.selected_customer_id))
            con.commit()
            cu.close()
            con.close()
            self.customers_treeview.delete(*self.customers_treeview.get_children())
            self.selected_customer_id = ""
            self.get_customers()
        else:
            messagebox.showinfo("Προσοχή", "Παρακαλώ επιλέξτε πελάτη για διαγραφή")
            return

    # Ενεργοποιήση πελατών
    def enable_customers(self):
        enable_customers.create_Toplevel1(root)
        self.customers_treeview.delete(*self.customers_treeview.get_children())
        self.get_customers()

    # Προσθήκη Φωτοτυπικού
    def add_copier(self, event=None):
        """ Προσθήκη φωτοτυπικού
        Καλει την συνάρτηση create_Topelevel1 του αρχείου add_copier

        :return:
        """
        add_copier.create_add_copier_window(root)

    # Μεταφορά φωτοτυπικού
    def change_copier(self):

        change_customer.create_add_copier_window(root)

    # Διαγραφή Φωτοτυπικού
    def del_copier(self):
        if self.selected_copier_id:

            answer = messagebox.askokcancel("Προσοχή", f"Εχετε επιλέξει για απενεργοποιήση το μηχάνημα\n"
                                                       f"{self.selected_copier} του πελάτη {self.selected_customer}"
                                                       f"\nΘέλετε να συνεχίσεται;")
            if not answer:
                return
            con = sqlite3.connect(dbase)
            cu = con.cursor()
            cu.execute("UPDATE " + self.copier_table + " SET Κατάσταση = 0 WHERE  ID=?", (self.selected_copier_id,))
            con.commit()
            cu.close()
            con.close()
            # todo
            # Ενημέρωση στις σημειώσεις πότε απενεργοποίθηκε να πάρω πρωτα τις σημειώσεις που έχει και να προσθέσω μετα

            self.copiers_treeview.delete(*self.copiers_treeview.get_children())
            self.search_copier()
        else:
            messagebox.showinfo("Προσοχή", "Παρακαλώ επιλέξτε μηχάνημα για διαγραφή")
            return

    # Ενεργοποιήση φωτοτυπικού
    def enable_copiers(self):
        enable_copiers.create_enable_copiers_window(root)

    # ------------------------------------Events ---------------------------
    # Προσθήκη πελάτη event
    def add_customer_event(self, event):
        self.add_customer()

    # Ενημέρωση στοιχείων πελάτη
    def update_customer(self):
        if self.selected_customer_id == "":
            messagebox.showwarning("Σφάλμα", "Παρακαλώ πρώτα επιλέξτε πελάτη")
            return None
        headers = []
        for head in self.customers_headers:
            if head != "ID":
                headers.append(head + " = ?")
        culumns = ", ".join(headers)

        new_data = [self.company_name_entry.get(), self.name_entry.get(), self.address_entry.get(),
                    self.city_entry.get(),
                    self.post_code_entry.get(), self.place_entry.get(), self.phone_entry.get(), self.mobile_entry.get(),
                    self.fax_entry.get(), self.email_entry.get(), self.page_package_entry.get(),
                    self.package_cost_entry.get() + " €" if " €" not in self.package_cost_entry.get() else
                    self.package_cost_entry.get(), self.customer_notes_scrolledtext.get("1.0", "end-1c"), 1,
                    self.selected_customer_id]  # 1 είναι η κατάσταση

        up_conn = sqlite3.connect(dbase)
        up_cursor = up_conn.cursor()
        # sqlite_update_query = """Update new_developers set salary = ?, email = ? where id = ?

        sql = "UPDATE Πελάτες SET " + culumns + "WHERE ID = ? "

        try:
            up_cursor.execute(sql, tuple(new_data), )
        except sqlite3.IntegrityError:
            messagebox.showerror("Σφάλμα!",
                                 f'Το όνομα {self.company_name_entry.get()} υπάρχει παρακαλώ διαλέξτε διαφορετικό')
            self.top.focus()
            return

        up_conn.commit()
        up_cursor.close()
        up_conn.close()
        messagebox.showinfo("Info", f"Τα στοιχεία του {self.company_name_entry.get()} ενημερώθηκαν επιτυχώς")

    # Ενημέρωση στοιχείων Φωτοτυπικού
    def update_copier(self):
        """
        Ενημέρωση μώνο των Serial, Εναρξη, Μετρητής εναρξεις και σημειώσεων
        :return:
        """
        if self.selected_copier_id == "":
            messagebox.showwarning("Σφάλμα", "Παρακαλώ πρώτα επιλέξτε μηχάνημα")
            return None
        headers = []
        not_needed_header = ["ID"]
        for head in self.copiers_headers:
            if head not in not_needed_header:
                headers.append(head + " = ?")
        culumns = ", ".join(headers)
        new_data = [self.machine_company_entry.get(), self.serial_entry.get(), self.start_entry.get(),
                    self.start_counter_entry.get(),
                    self.selected_customer_id, self.copier_notes_scrolledtext.get("1.0", "end-1c"), 1,
                    # 1 => ενεργό φωτοτυπικό
                    self.selected_copier_id]

        up_conn = sqlite3.connect(dbase)
        up_cursor = up_conn.cursor()
        # sqlite_update_query = """Update new_developers set salary = ?, email = ? where id = ?
        sql = "UPDATE Φωτοτυπικά SET " + culumns + "WHERE ID = ? "
        up_cursor.execute(sql, tuple(new_data), )
        up_conn.commit()
        up_cursor.close()
        up_conn.close()
        messagebox.showinfo("Info", f"Τα στοιχεία του μηχανήματος {self.selected_copier} του πελάτη "
                                    f"{self.selected_customer} ενημερώθηκαν επιτυχώς")

    # Αντίγραφα ασφαλείας Service Book
    def backup(self):

        def progress(status, remainig, total):
            print(f"{status} Αντιγράφηκαν {total - remainig} απο {total} σελίδες...")

        try:
            now = datetime.now().strftime("%d %m %Y %H %M %S")

            back_dir = "backups" + "/" + today + "/"

            # backup_file = os.path.join(back_dir, os.path.basename(dbase[:-3]) + " " + now + ".db")
            options = {}
            options['defaultextension'] = ".db"
            options['filetypes'] = [('*', '.db')]
            options['title'] = "Αποθήκευση Service Book"
            options['initialfile'] = f'Service Book {today}.db'
            backup_file = filedialog.asksaveasfile(mode='w', **options)
            if not backup_file:
                self.top.focus()
                return
            messagebox.showwarning("Προσοχή!",
                                   'Μήν κλείσετε το παράθυρο ἕως ὅτου να εμφανιστεί μήνυμα ολοκλήρωσεις διαδικασίας'
                                   ' αντιγράφου ασφαλείας')
            # print("============BACKUP FILE===========Line 542=\n", backup_file, "\n")
            if not os.path.exists(back_dir):
                os.makedirs(back_dir)
            else:
                pass
            # Υπάρχουσα βάση
            conn = sqlite3.connect(dbase)
            print("===========Υπάρχουσα βάση===========Line 744\n ", dbase, "\n")

            # Δημιουργία νέας βάσης και αντίγραφο ασφαλείας
            back_conn = sqlite3.connect(backup_file.name)
            with back_conn:
                conn.backup(back_conn, pages=10, progress=progress)
                back_conn.close()
                text = "Η βάση αντιγράφηκε :  "
                result = text + os.path.realpath(backup_file.name)
                # print("=====Αποτέλεσμα ====Line 558\n", result)
                # Ειναι ενοχλητικο να εμφανιζει καθε φορα μηνυμα οτι εγινε backup
                messagebox.showinfo('Αποτέλεσμα αντιγράφου ασφαλείας', result)

        except FileNotFoundError as file_error:
            messagebox.showwarning("Σφάλμα...", "{}".format(file_error))
            print(f"File {__name__} Error Line 2985", file_error)

        except sqlite3.Error as error:
            if not os.path.exists(backup_file.name):
                result = "Σφάλμα κατα την αντιγραφή : ", error
                messagebox.showwarning("Σφάλμα...", "{}".format(result))
        finally:
            try:
                if back_conn:
                    back_conn.close()
                    print("Δημιουργία αντιγράφου ασφαλείας στο αρχείο  ", backup_file.name, " ολοκληρώθηκε")
            except UnboundLocalError as error:
                print(f"Η σύνδεση με {backup_file.name} δεν έγινε ποτέ Line 2452 {error}")
                messagebox.showerror("Σφάλμα", f"Η σύνδεση με {backup_file.name} δεν έγινε ποτέ  {error}")

    # Αντίγραφα ασφαλείας spare_parts_db
    def backup_repository(self):

        def progress(status, remainig, total):
            print(f"{status} Αντιγράφηκαν {total - remainig} απο {total} σελίδες...")

        try:
            now = datetime.now().strftime("%d %m %Y %H %M %S")

            back_dir = "backups" + "/" + today + "/"

            # backup_file = os.path.join(back_dir, os.path.basename(spare_parts_db[:-3]) + " " + now + ".db")
            options = {}
            options['defaultextension'] = ".db"
            options['filetypes'] = [('*', '.db')]
            options['title'] = "Αποθήκευση αποθήκης"
            options['initialfile'] = f'Αποθήκη {today}.db'
            backup_file = filedialog.asksaveasfile(mode='w', **options)
            if not backup_file:
                self.top.focus()
                return
            messagebox.showwarning("Προσοχή!",
                                   'Μήν κλείσετε το παράθυρο ἕως ὅτου να εμφανιστεί μήνυμα ολοκλήρωσεις διαδικασίας'
                                   ' αντιγράφου ασφαλείας')
            # print("============BACKUP FILE===========Line 542=\n", backup_file, "\n")
            if not os.path.exists(back_dir):
                os.makedirs(back_dir)
            else:
                pass
            # Υπάρχουσα βάση
            conn = sqlite3.connect(spare_parts_db)
            print("===========Υπάρχουσα βάση===========Line 744\n ", spare_parts_db, "\n")

            # Δημιουργία νέας βάσης και αντίγραφο ασφαλείας
            back_conn = sqlite3.connect(backup_file.name)
            with back_conn:
                conn.backup(back_conn, pages=10, progress=progress)
                back_conn.close()
                text = "Η βάση αντιγράφηκε :  "
                result = text + os.path.realpath(backup_file.name)
                # print("=====Αποτέλεσμα ====Line 558\n", result)
                # Ειναι ενοχλητικο να εμφανιζει καθε φορα μηνυμα οτι εγινε backup
                messagebox.showinfo('Αποτέλεσμα αντιγράφου ασφαλείας', result)

        except FileNotFoundError as file_error:
            messagebox.showwarning("Σφάλμα...", "{}".format(file_error))
            print(f"File {__name__} Error Line 2440", file_error)

        except sqlite3.Error as error:
            if not os.path.exists(backup_file.name):
                result = "Σφάλμα κατα την αντιγραφή : ", error
                messagebox.showwarning("Σφάλμα...", "{}".format(result))
        finally:
            try:
                if back_conn:
                    back_conn.close()
                    print("Δημιουργία αντιγράφου ασφαλείας στο αρχείο  ", backup_file.name, " ολοκληρώθηκε")
            except UnboundLocalError as error:
                print(f"Η σύνδεση με {backup_file.name} δεν έγινε ποτέ Line 2452 {error}")
                messagebox.showerror("Σφάλμα", f"Η σύνδεση με {backup_file.name} δεν έγινε ποτέ  {error}")

    # Αποθήκη σε Excel
    def to_excel(self):
        con = sqlite3.connect(spare_parts_db)
        c = con.cursor()
        c.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")
        tables_name = c.fetchall()

        c.close()
        con.close()
        not_used_tables = ["AA_ΠΕΛΑΤΕΣ", "sqlite_master", "sqlite_sequence", "sqlite_temp_master", "Images"]
        needed_tables = []
        data_frames = []
        for table in tables_name:
            if table[0] not in not_used_tables:
                needed_tables.append(table[0])
                data_frames.append(table[0])

        options = {}
        options['defaultextension'] = ".xlsx"
        options['filetypes'] = [('Excel', '.xlsx')]
        options['title'] = "Αποθήκευση αποθήκης"
        options['initialfile'] = f'Αποθήκη {today}.xlsx'
        save_file = filedialog.asksaveasfile(mode='w', **options)
        if save_file is None:  # ask saveasfile return `None` if dialog closed with "cancel".
            self.top.focus()
            return

        # new_exc = xlsxwriter.Workbook(save_file.name)
        # Create a Pandas Excel writer using XlsxWriter as the engine.
        writer = pd.ExcelWriter(save_file.name, engine="xlsxwriter")

        con = sqlite3.connect(spare_parts_db)

        for table in needed_tables:
            sql = "SELECT * FROM " + table
            df = pd.read_sql_query(sql, con)

            df.to_excel(writer, sheet_name=table, index=False)
        writer.save()
        writer.close()
        save_file.close()
        con.close()
        os.startfile(save_file.name)
        self.top.focus()

    def set_email_settings(self):
        email = email_settings.run_email_settings(self.top)

    def set_data_settings(self):
        data_settings.run_data_settings(self.top)


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
