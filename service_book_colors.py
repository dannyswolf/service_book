#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 13, 2019 12:08:06 AM EET  platform: Windows NT

"""
1) Το φωτοτυπικό χρειάζεται πάντα Πελάτη_ID
2) Το Service χρειάζεται πάντα Copier_ID

Επιλέγουμε με διπλό click πρώτα τον πελάτη και στην συνέχεια με διπλό click το φωτοτυπικό

v 0.0.1 Ενας πελάτης με πολλά φωτοτυπικά το κάθε φωτοτυπικό με πολλά Service ------------------------14/12/2019
        Η ημερομηνία εναρξης - Μετρητής εναρξης είναι πεδία του φωτοτυπικού γιατί πάνε με το φωτοτυπικό
"""

import sys
import sqlite3
import service_book_colors_support
from tkinter import StringVar
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

dbase = "Service_book.db"


# Αποκόμιση  πινάκων απο την βάση δεδομένων
def get_tables():
    """
        Αποκόμιση  πινάκων απο την βάση δεδομένων
    """

    tables = []  # Πρέπει να αδειάσουμε πρώτα την λίστα με τους πίνακες για να κάνουμε νέα σύμφονα με την βάση
    # =======================Ανάγνωριση πίνακα δεδομένων=============
    conn = sqlite3.connect(dbase)
    cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")
    table_name = cursor.fetchall()
    cursor.close()
    conn.close()
    dont_used_tables = ["sqlite_master", "sqlite_sequence", "sqlite_temp_master"]  # Πινακες που δεν θέλουμε
    for name in table_name:
        if name[0] not in dont_used_tables:
            tables.append(name[0])
            # print("TABLE ", name[0], " ========added to tables line 118")

        else:
            continue
    # print("Γραμμη 47: Πίνακες που βρέθηκαν -->>", tables)
    return tables


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    service_book_colors_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    service_book_colors_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        self.service_table = "Service"
        self.customer_table = "Πελάτες"
        self.copier_table = "Φωτοτυπικά"
        self.selected_customer_id = ""
        self.selected_copier_id = ""
        self.customers_headers = []
        self.copiers_headers = []
        self.service_headers = []


        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('vista')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="Calibri")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1024x538+150+178")
        top.minsize(120, 1)
        top.maxsize(1604, 881)
        top.resizable(1, 1)
        top.title("Βιβλίο Επισκευών")
        top.configure(background="#408080")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        # # # Modify the font of the body
        self.style.theme_create("mystyle.Treeview", parent="vista")
        # self.style.configure("mystyle.Treeview.Heading", background="gray", foreground="white", relief="flat")
        self.style.map('mystyle.Treeview', foreground=self.fixed_map('foreground'),
                       background=self.fixed_map('background'))

        # ==================================== Εμφάνηση δεδομένων ==============================================
        self.style.configure("mystyle.Treeview", highlightthickness=1, font=('Calibri', "10"))
        self.style.configure("mystyle.Treeview.Heading", font=('Calibri', 10, 'bold'), background="#657b83",
                             foreground="black",
                             relief=[('active', 'groove'), ('pressed', 'sunken')])  # Modify the font of the headings
        self.style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})])  # Remove the borders
        self.style.configure("mystyle.Treeview", background="white", rowheight=20)

        self.company_label = tk.Label(top)
        self.company_label.place(relx=0.221, rely=0.037, height=20, width=144)
        self.company_label.configure(activebackground="#f9f9f9")
        self.company_label.configure(activeforeground="black")
        self.company_label.configure(background="#84f29c")
        self.company_label.configure(disabledforeground="#a3a3a3")
        self.company_label.configure(foreground="#000000")
        self.company_label.configure(highlightbackground="#d9d9d9")
        self.company_label.configure(highlightcolor="black")
        self.company_label.configure(relief="groove")
        self.company_label.configure(text="Επωνυμία Επιχείρησης")

        self.company_name_entry = tk.Entry(top)
        self.company_name_entry.place(relx=0.386, rely=0.037, height=20
                , relwidth=0.2)
        self.company_name_entry.configure(background="white")
        self.company_name_entry.configure(disabledforeground="#a3a3a3")
        self.company_name_entry.configure(font="Calibri")
        self.company_name_entry.configure(foreground="#000000")
        self.company_name_entry.configure(highlightbackground="#d9d9d9")
        self.company_name_entry.configure(highlightcolor="black")
        self.company_name_entry.configure(insertbackground="black")
        self.company_name_entry.configure(selectbackground="#c4c4c4")
        self.company_name_entry.configure(selectforeground="black")

        self.address_label = tk.Label(top)
        self.address_label.place(relx=0.221, rely=0.149, height=20, width=144)
        self.address_label.configure(activebackground="#f9f9f9")
        self.address_label.configure(activeforeground="black")
        self.address_label.configure(background="#84f29c")
        self.address_label.configure(disabledforeground="#a3a3a3")
        self.address_label.configure(foreground="#000000")
        self.address_label.configure(highlightbackground="#d9d9d9")
        self.address_label.configure(highlightcolor="black")
        self.address_label.configure(relief="groove")
        self.address_label.configure(text="Διεύθυνση")

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.221, rely=0.093, height=20, width=144)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#84f29c")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(relief="groove")
        self.Label3.configure(text='''Ονοματεπώνυμο''')

        self.fax_entry = tk.Entry(top)
        self.fax_entry.place(relx=0.701, rely=0.26,height=20, relwidth=0.15)
        self.fax_entry.configure(background="white")
        self.fax_entry.configure(disabledforeground="#a3a3a3")
        self.fax_entry.configure(font="Calibri")
        self.fax_entry.configure(foreground="#000000")
        self.fax_entry.configure(highlightbackground="#d9d9d9")
        self.fax_entry.configure(highlightcolor="black")
        self.fax_entry.configure(insertbackground="black")
        self.fax_entry.configure(selectbackground="#c4c4c4")
        self.fax_entry.configure(selectforeground="black")

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.607, rely=0.037, height=21, width=77)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#84f29c")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(relief="groove")
        self.Label4.configure(text='''Πόλη''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.607, rely=0.149, height=21, width=78)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#84f29c")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(relief="groove")
        self.Label5.configure(text='''Ταχ. Κώδικας''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.607, rely=0.093, height=21, width=77)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#84f29c")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(relief="groove")
        self.Label6.configure(text='''Περιοχή''')

        self.name_entry = tk.Entry(top)
        self.name_entry.place(relx=0.386, rely=0.093,height=20, relwidth=0.2)
        self.name_entry.configure(background="white")
        self.name_entry.configure(disabledforeground="#a3a3a3")
        self.name_entry.configure(font="Calibri")
        self.name_entry.configure(foreground="#000000")
        self.name_entry.configure(highlightbackground="#d9d9d9")
        self.name_entry.configure(highlightcolor="black")
        self.name_entry.configure(insertbackground="black")
        self.name_entry.configure(selectbackground="#c4c4c4")
        self.name_entry.configure(selectforeground="black")

        self.mobile_entry = tk.Entry(top)
        self.mobile_entry.place(relx=0.386, rely=0.26,height=20, relwidth=0.2)
        self.mobile_entry.configure(background="white")
        self.mobile_entry.configure(disabledforeground="#a3a3a3")
        self.mobile_entry.configure(font="Calibri")
        self.mobile_entry.configure(foreground="#000000")
        self.mobile_entry.configure(highlightbackground="#d9d9d9")
        self.mobile_entry.configure(highlightcolor="black")
        self.mobile_entry.configure(insertbackground="black")
        self.mobile_entry.configure(selectbackground="#c4c4c4")
        self.mobile_entry.configure(selectforeground="black")

        self.email_entry = tk.Entry(top)
        self.email_entry.place(relx=0.701, rely=0.204,height=20, relwidth=0.15)
        self.email_entry.configure(background="white")
        self.email_entry.configure(disabledforeground="#a3a3a3")
        self.email_entry.configure(font="Calibri")
        self.email_entry.configure(foreground="#000000")
        self.email_entry.configure(highlightbackground="#d9d9d9")
        self.email_entry.configure(highlightcolor="black")
        self.email_entry.configure(insertbackground="black")
        self.email_entry.configure(selectbackground="#c4c4c4")
        self.email_entry.configure(selectforeground="black")

        self.city_entry = tk.Entry(top)
        self.city_entry.place(relx=0.701, rely=0.037,height=20, relwidth=0.15)
        self.city_entry.configure(background="white")
        self.city_entry.configure(disabledforeground="#a3a3a3")
        self.city_entry.configure(font="Calibri")
        self.city_entry.configure(foreground="#000000")
        self.city_entry.configure(highlightbackground="#d9d9d9")
        self.city_entry.configure(highlightcolor="black")
        self.city_entry.configure(insertbackground="black")
        self.city_entry.configure(selectbackground="#c4c4c4")
        self.city_entry.configure(selectforeground="black")

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.221, rely=0.204, height=20, width=144)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#84f29c")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(relief="groove")
        self.Label7.configure(text='''Τηλέφωνο''')

        self.Label8 = tk.Label(top)
        self.Label8.place(relx=0.221, rely=0.26, height=20, width=144)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(background="#84f29c")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="black")
        self.Label8.configure(relief="groove")
        self.Label8.configure(text='''Κινητό''')

        self.Label9 = tk.Label(top)
        self.Label9.place(relx=0.607, rely=0.26, height=21, width=77)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(background="#84f29c")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(relief="groove")
        self.Label9.configure(text='''Φαξ''')

        self.Label10 = tk.Label(top)
        self.Label10.place(relx=0.607, rely=0.204, height=21, width=77)
        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(activeforeground="black")
        self.Label10.configure(background="#84f29c")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(highlightbackground="#d9d9d9")
        self.Label10.configure(highlightcolor="black")
        self.Label10.configure(relief="groove")
        self.Label10.configure(text='''e-mail''')

        self.address_entry = tk.Entry(top)
        self.address_entry.place(relx=0.386, rely=0.149, height=20, relwidth=0.2)

        self.address_entry.configure(background="white")
        self.address_entry.configure(disabledforeground="#a3a3a3")
        self.address_entry.configure(font="Calibri")
        self.address_entry.configure(foreground="#000000")
        self.address_entry.configure(highlightbackground="#d9d9d9")
        self.address_entry.configure(highlightcolor="black")
        self.address_entry.configure(insertbackground="black")
        self.address_entry.configure(selectbackground="#c4c4c4")
        self.address_entry.configure(selectforeground="black")

        self.phone_entry = tk.Entry(top)
        self.phone_entry.place(relx=0.386, rely=0.204,height=20, relwidth=0.2)
        self.phone_entry.configure(background="white")
        self.phone_entry.configure(disabledforeground="#a3a3a3")
        self.phone_entry.configure(font="Calibri")
        self.phone_entry.configure(foreground="#000000")
        self.phone_entry.configure(highlightbackground="#d9d9d9")
        self.phone_entry.configure(highlightcolor="black")
        self.phone_entry.configure(insertbackground="black")
        self.phone_entry.configure(selectbackground="#c4c4c4")
        self.phone_entry.configure(selectforeground="black")

        self.post_code_entry = tk.Entry(top)
        self.post_code_entry.place(relx=0.701, rely=0.149, height=20, relwidth=0.15)
        self.post_code_entry.configure(background="white")
        self.post_code_entry.configure(disabledforeground="#a3a3a3")
        self.post_code_entry.configure(font="Calibri")
        self.post_code_entry.configure(foreground="#000000")
        self.post_code_entry.configure(highlightbackground="#d9d9d9")
        self.post_code_entry.configure(highlightcolor="black")
        self.post_code_entry.configure(insertbackground="black")
        self.post_code_entry.configure(selectbackground="#c4c4c4")
        self.post_code_entry.configure(selectforeground="black")

        self.place_entry = tk.Entry(top)
        self.place_entry.place(relx=0.701, rely=0.093,height=20, relwidth=0.15)
        self.place_entry.configure(background="white")
        self.place_entry.configure(disabledforeground="#a3a3a3")
        self.place_entry.configure(font="Calibri")
        self.place_entry.configure(foreground="#000000")
        self.place_entry.configure(highlightbackground="#d9d9d9")
        self.place_entry.configure(highlightcolor="black")
        self.place_entry.configure(insertbackground="black")
        self.place_entry.configure(selectbackground="#c4c4c4")
        self.place_entry.configure(selectforeground="black")

        self.Label11 = tk.Label(top)
        self.Label11.place(relx=0.607, rely=0.316, height=21, width=77)
        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(activeforeground="black")
        self.Label11.configure(background="#2f42f0")
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(foreground="#ffffff")
        self.Label11.configure(highlightbackground="#d9d9d9")
        self.Label11.configure(highlightcolor="black")
        self.Label11.configure(relief="groove")
        self.Label11.configure(text='''Εναρξη''')

        self.Label12 = tk.Label(top)
        self.Label12.place(relx=0.221, rely=0.316, height=21, width=144)
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(activeforeground="black")
        self.Label12.configure(background="#2f42f0")
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(foreground="#ffffff")
        self.Label12.configure(highlightbackground="#d9d9d9")
        self.Label12.configure(highlightcolor="black")
        self.Label12.configure(relief="groove")
        self.Label12.configure(text='''Μετρητής Εναρξης''')

        self.Label13 = tk.Label(top)
        self.Label13.place(relx=0.861, rely=0.037, height=21, width=100)
        self.Label13.configure(activebackground="#f9f9f9")
        self.Label13.configure(activeforeground="black")
        self.Label13.configure(background="#2f42f0")
        self.Label13.configure(disabledforeground="#a3a3a3")
        self.Label13.configure(foreground="#ffffff")
        self.Label13.configure(highlightbackground="#d9d9d9")
        self.Label13.configure(highlightcolor="black")
        self.Label13.configure(relief="groove")
        self.Label13.configure(text='''Σελίδες Πακέτου''')

        self.Label14 = tk.Label(top)
        self.Label14.place(relx=0.861, rely=0.204, height=21, width=100)
        self.Label14.configure(activebackground="#f9f9f9")
        self.Label14.configure(activeforeground="black")
        self.Label14.configure(background="#2f42f0")
        self.Label14.configure(disabledforeground="#a3a3a3")
        self.Label14.configure(foreground="#ffffff")
        self.Label14.configure(highlightbackground="#d9d9d9")
        self.Label14.configure(highlightcolor="black")
        self.Label14.configure(relief="groove")
        self.Label14.configure(text='''Κόστος Πακέτου''')

        self.start_counter_entry = tk.Entry(top)
        self.start_counter_entry.place(relx=0.386, rely=0.316, height=20
                , relwidth=0.2)
        self.start_counter_entry.configure(background="white")
        self.start_counter_entry.configure(disabledforeground="#a3a3a3")
        self.start_counter_entry.configure(font="Calibri")
        self.start_counter_entry.configure(foreground="#000000")
        self.start_counter_entry.configure(highlightbackground="#d9d9d9")
        self.start_counter_entry.configure(highlightcolor="black")
        self.start_counter_entry.configure(insertbackground="black")
        self.start_counter_entry.configure(selectbackground="#c4c4c4")
        self.start_counter_entry.configure(selectforeground="black")

        self.start_entry = tk.Entry(top)
        self.start_entry.place(relx=0.701, rely=0.316,height=20, relwidth=0.15)
        self.start_entry.configure(background="white")
        self.start_entry.configure(disabledforeground="#a3a3a3")
        self.start_entry.configure(font="Calibri")
        self.start_entry.configure(foreground="#000000")
        self.start_entry.configure(highlightbackground="#d9d9d9")
        self.start_entry.configure(highlightcolor="black")
        self.start_entry.configure(insertbackground="black")
        self.start_entry.configure(selectbackground="#c4c4c4")
        self.start_entry.configure(selectforeground="black")

        self.page_package_entry = tk.Entry(top)
        self.page_package_entry.place(relx=0.861, rely=0.093, height=20
                , relwidth=0.11)
        self.page_package_entry.configure(background="white")
        self.page_package_entry.configure(disabledforeground="#a3a3a3")
        self.page_package_entry.configure(font="Calibri")
        self.page_package_entry.configure(foreground="#000000")
        self.page_package_entry.configure(highlightbackground="#d9d9d9")
        self.page_package_entry.configure(highlightcolor="black")
        self.page_package_entry.configure(insertbackground="black")
        self.page_package_entry.configure(selectbackground="#c4c4c4")
        self.page_package_entry.configure(selectforeground="black")

        self.package_cost_entry = tk.Entry(top)
        self.package_cost_entry.place(relx=0.861, rely=0.26, height=20
                , relwidth=0.11)
        self.package_cost_entry.configure(background="white")
        self.package_cost_entry.configure(disabledforeground="#a3a3a3")
        self.package_cost_entry.configure(font="Calibri")
        self.package_cost_entry.configure(foreground="#000000")
        self.package_cost_entry.configure(highlightbackground="#d9d9d9")
        self.package_cost_entry.configure(highlightcolor="black")
        self.package_cost_entry.configure(insertbackground="black")
        self.package_cost_entry.configure(selectbackground="#c4c4c4")
        self.package_cost_entry.configure(selectforeground="black")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.861, rely=0.316, height=24, width=100)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#f5010a")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Ενημέρωση''')

        self.Label15 = tk.Label(top)
        self.Label15.place(relx=0.022, rely=0.037, height=21, width=170)
        self.Label15.configure(background="#808000")
        self.Label15.configure(disabledforeground="#a3a3a3")
        self.Label15.configure(foreground="#ffffff")
        self.Label15.configure(relief="groove")
        self.Label15.configure(text='''Πελάτες''')

        # Πίνακας πελατών
        self.customers_treeview = ScrolledTreeView(top)
        # build_treeview_support starting.
        self.customers_treeview["columns"] = ["Id", "Επωνυμία_Επιχείρησης"]
        self.customers_treeview.heading("Επωνυμία_Επιχείρησης", text="Πελάτης", anchor="center")
        # self.customers_treeview.column("#0",width="60")
        self.customers_treeview.column("Επωνυμία_Επιχείρησης", anchor="w")
        self.customers_treeview.heading("Id", text="Id", anchor="w", )
        self.customers_treeview.column("Id", anchor="w", width="1")
        self.customers_treeview.configure(show="headings", style="mystyle.Treeview")
        self.customers_treeview.bind("<Double-1>", self.view_copiers)

        self.get_customers()
        self.customers_treeview.place(relx=0.022, rely=0.093, relheight=0.457, relwidth=0.188)

        # Αναζήτηση πελάτη
        self.search_data = StringVar()

        self.customer_search_entry = tk.Entry(top, textvariable=self.search_data)
        self.customer_search_entry.place(relx=0.022, rely=0.566, height=20
                , relwidth=0.188)
        self.customer_search_entry.configure(background="white")
        self.customer_search_entry.configure(cursor="fleur")
        self.customer_search_entry.configure(disabledforeground="#a3a3a3")
        self.customer_search_entry.configure(font="Calibri")
        self.customer_search_entry.configure(foreground="#000000")
        self.customer_search_entry.configure(insertbackground="black")
        self.customer_search_entry.bind('<Return>', self.search_customer(self.search_data))

        self.customer_search_btn = tk.Button(top)
        self.customer_search_btn.place(relx=0.022, rely=0.62, height=24
                , width=170)
        self.customer_search_btn.configure(activebackground="#ececec")
        self.customer_search_btn.configure(activeforeground="#000000")
        self.customer_search_btn.configure(background="#00ff40")
        self.customer_search_btn.configure(disabledforeground="#a3a3a3")
        self.customer_search_btn.configure(foreground="#000000")
        self.customer_search_btn.configure(highlightbackground="#d9d9d9")
        self.customer_search_btn.configure(highlightcolor="black")
        self.customer_search_btn.configure(pady="0")
        self.customer_search_btn.configure(command=lambda: self.search_customer(self.search_data))
        self.customer_search_btn.configure(text="Αναζήτηση πελάτη")

        self.Label15_1 = tk.Label(top)
        self.Label15_1.place(relx=0.022, rely=0.693, height=21, width=170)
        self.Label15_1.configure(activebackground="#f9f9f9")
        self.Label15_1.configure(activeforeground="black")
        self.Label15_1.configure(background="#808000")
        self.Label15_1.configure(cursor="fleur")
        self.Label15_1.configure(disabledforeground="#a3a3a3")
        self.Label15_1.configure(foreground="#ffffff")
        self.Label15_1.configure(highlightbackground="#d9d9d9")
        self.Label15_1.configure(highlightcolor="black")
        self.Label15_1.configure(relief="groove")
        self.Label15_1.configure(text='''Φωτοτυπικά''')

        # Πίνακας φωτοτυπικών
        self.copiers_treeview = ScrolledTreeView(top)
        self.copiers_treeview.place(relx=0.022, rely=0.739, relheight=0.159
                , relwidth=0.188)
        self.copiers_treeview["columns"] = ["Id", "Φωτοτυπικά"]
        self.copiers_treeview.heading("Φωτοτυπικά", text="Φωτοτυπικά", anchor="center")
        # self.customers_treeview.column("#0",width="60")
        self.copiers_treeview.column("Φωτοτυπικά", anchor="w")
        self.copiers_treeview.heading("Id", text="Id", anchor="w", )
        self.copiers_treeview.column("Id", anchor="w", width="1")
        self.copiers_treeview.configure(show="headings", style="mystyle.Treeview")
        self.copiers_treeview.bind("<Double-1>", self.service_click)

        # Αναζήτηση φωτοτυπικού
        self.search_copier_data = StringVar()
        self.copier_search_entry = tk.Entry(top, textvariable=self.search_copier_data)
        self.copier_search_entry.place(relx=0.022, rely=0.904, height=20
                , relwidth=0.188)
        self.copier_search_entry.configure(background="white")
        self.copier_search_entry.configure(disabledforeground="#a3a3a3")
        self.copier_search_entry.configure(font="Calibri")
        self.copier_search_entry.configure(foreground="#000000")
        self.copier_search_entry.configure(insertbackground="black")
        self.copier_search_entry.bind('<Return>', self.search_copier(self.search_copier_data))

        self.copier_search_btn = tk.Button(top)
        self.copier_search_btn.place(relx=0.022, rely=0.942, height=24, width=170)

        self.copier_search_btn.configure(activebackground="#ececec")
        self.copier_search_btn.configure(activeforeground="#000000")
        self.copier_search_btn.configure(background="#00ff40")
        self.copier_search_btn.configure(disabledforeground="#a3a3a3")
        self.copier_search_btn.configure(foreground="#000000")
        self.copier_search_btn.configure(highlightbackground="#d9d9d9")
        self.copier_search_btn.configure(highlightcolor="black")
        self.copier_search_btn.configure(pady="0")
        self.copier_search_btn.configure(command=lambda: self.search_copier(self.search_copier_data))
        self.copier_search_btn.configure(text="Αναζήτηση Φωτοτυπικού")

        self.service_treeview = ScrolledTreeView(top)
        self.service_treeview.place(relx=0.232, rely=0.502, relheight=0.459
                , relwidth=0.74)
        self.service_treeview.configure(show="headings", style="mystyle.Treeview")


        self.Label16 = tk.Label(top)
        self.Label16.place(relx=0.475, rely=0.446, height=21, width=214)
        self.Label16.configure(background="#808000")
        self.Label16.configure(disabledforeground="#a3a3a3")
        self.Label16.configure(foreground="#ffffff")
        self.Label16.configure(text='''Ιστορικό''')

        # ---------------------Fix -Of- Style------------------------------------
    def fixed_map(self, option):
        # Fix for setting text colour for Tkinter 8.6.9
        # From: https://core.tcl.tk/tk/info/509cafafae
        #
        # Returns the style map for 'option' with any styles starting with
        # ('!disabled', '!selected', ...) filtered out.

        # style.map() returns an empty list for missing options, so this
        # should be future-safe.
        return [elm for elm in self.style.map('Treeview', query_opt=option) if elm[:2] != ('!disabled', '!selected')]

    # Εμφάνησει πελατών αλφαβητικά
    def get_customers(self):
        customers_conn = sqlite3.connect(dbase)
        customers_cursor = customers_conn.cursor()
        customers_cursor.execute("SELECT * FROM " + self.customer_table + " ORDER BY Επωνυμία_Επιχείρησης ASC")
        self.customers_headers = list(map(lambda x: x[0], customers_cursor.description))
        customers_data = customers_cursor.fetchall()
        customers_cursor.close()
        customers_conn.close()

        # Κατασκευή tree το up_index -1 == το τελος ("end")
        for n in range(len(customers_data)):

            self.customers_treeview.insert("", "end", values=customers_data[n])

    # Εμφάνησει φωτοτυπικών του επιλεγμένου πελάτη
    def view_copiers(self, event):
        #  Αδιάζουμε πρώτα το tree των φωτοτυπικών
        for i in self.copiers_treeview.get_children():
            self.copiers_treeview.delete(i)

        # Αδιάζουμε και το tree των service
        for i in self.service_treeview.get_children():
            self.service_treeview.delete(i)

        # Αδιάζουμε και Μετρητη έναρξης και έναρξη
        var = StringVar(root, value="")
        self.start_counter_entry.configure(textvariable=var)
        self.start_entry.configure(textvariable=var)

        # το selected_item είναι το ID του πελάτη
        selected_item = (self.customers_treeview.set(self.customers_treeview.selection(), '#1'))
        self.selected_customer_id = selected_item
        customers_conn = sqlite3.connect(dbase)
        customers_cursor = customers_conn.cursor()
        # Διαβάζουμε τα δεδομένα του επιλεγμένου πελάτη και συμπληρώνουμε τα entry
        customers_cursor.execute("SELECT * FROM " + self.customer_table + " WHERE ID = ?", (selected_item,))

        customers_data = customers_cursor.fetchall()

        # Ανάκτηση φωτοτυπικών απο τον επιλεγμένο πελάτη
        # τα φωτοτυπικά είναι το τελευταίο πεδίο του πίνακα πελάτη
        # Το κάθε φωτοτυπικό ανηκει σε έναν μόνον πελάτη ==> Πελάτη_ID
        # ο πελάτης μπορεί να έχει πολλά φωτοτυπικά
        customers_cursor.execute("SELECT * FROM " + self.copier_table + " WHERE Πελάτη_ID = ?", (selected_item,))
        copiers = customers_cursor.fetchall()

        # εμφάνιση φωτοτυπικών στο tree των φωτοτυπικών
        for n in range(len(copiers)):
            self.copiers_treeview.insert("", "end", values=copiers[n])

        customers_cursor.close()
        customers_conn.close()
        # Κατασκευή tree το up_index -1 == το τελος ("end")
        # todo πρέπει να γίνει σε for loop και να μπούν σε λίστα
        var = StringVar(root, value=customers_data[0][1])
        self.company_name_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][2])
        self.name_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][3])
        self.address_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][4])
        self.city_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][5])
        self.post_code_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][6])
        self.place_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][7])
        self.phone_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][8])
        self.mobile_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][9])
        self.fax_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][10])
        self.email_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][11])
        self.page_package_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][12])
        self.package_cost_entry.configure(textvariable=var)

    # Εμφάνισει ιστορικού επισκευών επιλεγμένου φωτοτυπικού
    def service_click(self, event):
        """
            Εμφάνηση δεδομένων του πελάτη και το ιστορικό του φωτοτυπικού
        :param event:
        :return:
        """
        # αδιάζουμε πρώτα το tree του ιστορικού
        for i in self.service_treeview.get_children():
            self.service_treeview.delete(i)
        # selected_item είναι το ID (Το πρώτο στοιχείο του tree ==>> "#1") του πίνακα
        selected_item = (self.copiers_treeview.set(self.copiers_treeview.selection(), '#1'))
        service_conn = sqlite3.connect(dbase)
        service_cursor = service_conn.cursor()
        # πρώτα να πάρουμε τα δεδομένα του πελάτη
        # Απο τον πίνακα πελατών συνδέουμε τον πελάτι οπου το ID του πελάτη
        # είναι ιδιο με το  Πελάτη_ID του πίνακα φωτοτυπικά
        # και επιλέγουμε μόνο το φωτοτυπικό που έχει επιλεξει ο χρηστης απο το ID του φωτοτυπικού ==> selected_item
        service_cursor.execute("SELECT * FROM " + self.customer_table + " CUSTOMERS INNER JOIN " + self.copier_table +
                                 " COPIER ON CUSTOMERS.ID = COPIER.Πελάτη_ID WHERE COPIER.ID = " + selected_item)
        customers_data = service_cursor.fetchall()
        # εμφάνιση δεδομένων πελάτη στα entry δεξιά
        # todo πρέπει να γίνει σε for loop και να μπούν σε λίστα
        var = StringVar(root, value=customers_data[0][1])
        self.company_name_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][2])
        self.name_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][3])
        self.address_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][4])
        self.city_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][5])
        self.post_code_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][6])
        self.place_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][7])
        self.phone_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][8])
        self.mobile_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][9])
        self.fax_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][10])
        self.email_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][11])
        self.page_package_entry.configure(textvariable=var)
        var = StringVar(root, value=customers_data[0][12])
        self.package_cost_entry.configure(textvariable=var)

        # Εμφάνιση  πελάτη στο tree των πελατών σύμφονα με το επιλεγμένο φωτοτυπικά
        # customers_data[:14] είναι τα στοιχεία του πελάτη μετα είναι τα στοιχεία του φωτοτυπικού
        # Πρώτα αδιάζουμε τον πίνακα πελατών
        self.customers_treeview.delete(*self.customers_treeview.get_children())
        self.customers_treeview.insert("", "end", values=customers_data[0])

        # εμφάνιση του μετρητή έναρξης και ημερομηνία έναρξης
        service_cursor.execute("SELECT * FROM " + self.copier_table + " WHERE ID = ?", (selected_item,))
        copiers = service_cursor.fetchall()
        for n in range(len(copiers)):
            # αν ο πελάτης έχει πολλά φωτοτυπικά πρέπει να γίνει έλεγχος με το ID φωτοτυπικού
            # Το selected_item == string
            if int(selected_item) == int(copiers[n][0]):
                self.selected_copier_id = int(selected_item)
                var = StringVar(root, value=copiers[n][4])
                self.start_counter_entry.configure(textvariable=var)
                var = StringVar(root, value=copiers[n][3])
                self.start_entry.configure(textvariable=var)
            else:
                continue
        # todo να μπεί και αυτό στο JOIN απο πάνω
        # εμάνιση των εγγραφών συντήρησεις του επιλεγμένου φωτοτυπικού
        service_cursor.execute("SELECT * FROM " + self.service_table + " WHERE Copier_ID = ?", (selected_item[0][-1]))
        service_data = service_cursor.fetchall()

        self.service_headers = list(map(lambda x: x[0], service_cursor.description))
        service_cursor.close()
        service_conn.close()
        columns = []
        for head in self.service_headers:
            columns.append(head)

        self.service_treeview["columns"] = [head for head in columns]
        for head in self.service_headers:
            self.service_treeview.heading(head, text=head, anchor="center")
            self.service_treeview.column(head, width="1" if head == "ID" else "200")
        for n in range(len(service_data)):
            self.service_treeview.insert("", "end", values=service_data[n])

    # Αναζήτηση πελάτη
    def search_customer(self, search_data):
        """
            Αναζήτηση πελατών
        :param search_data:
        :return:
        """
        if search_data != "":  # Αν έχουμε γράψει κάτι διαφορετικά δεν κάνει τιποτα
            # αδειάζουμε το tree πρώτα για να εμφανίσουμε μόνο τα δεδομένα αναζήτησεις
            self.customers_treeview.delete(*self.customers_treeview.get_children())
            search_conn = sqlite3.connect(dbase)
            search_cursor = search_conn.cursor()
            search_headers = []
            no_neded_headers = ["id", "ID", "Id"]
            operators = []  # operators ==> '%' + str(κωστας) + '%'
            for header in self.customers_headers:
                if header not in no_neded_headers:
                    search_headers.append(header + " LIKE ?")
                    operators.append('%' + str(search_data.get()) + '%')
            search_headers = " OR ".join(search_headers)
            # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

            # search_cursor.execute("SELECT * FROM " + table + " WHERE \
            # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
            # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...

            search_cursor.execute("SELECT * FROM " + self.customer_table + " WHERE " + search_headers, operators)
            fetch = search_cursor.fetchall()
            search_cursor.close()
            search_conn.close()
            # Κατασκευή tree το up_index -1 == το τελος ("end")
            for n in range(len(fetch)):
                self.customers_treeview.insert("", "end", values=fetch[n])

    # Αναζήτηση φωτοτυπικού
    def search_copier(self, search_data):
        """
            Αναζήτηση φωτοτυπικού
        :param search_data:
        :return:
        """
        if search_data != "":  # Αν έχουμε γράψει κάτι διαφορετικά δεν κάνει τιποτα
            # αδειάζουμε το tree πρώτα για να εμφανίσουμε μόνο τα δεδομένα αναζήτησεις
            self.copiers_treeview.delete(*self.copiers_treeview.get_children())
            search_conn = sqlite3.connect(dbase)
            search_cursor = search_conn.cursor()
            # πρώτα να πάρουμε τις κεφαλίδες του πίνακα φωτοτυπικά
            search_cursor.execute("SELECT * FROM " + self.copier_table + ";")
            self.copiers_headers = list(map(lambda x: x[0], search_cursor.description))
            search_headers = []
            no_neded_headers = ["id", "ID", "Id"]
            operators = []  # operators ==> '%' + str(κωστας) + '%'

            for header in self.copiers_headers:
                if header not in no_neded_headers:
                    search_headers.append(header + " LIKE ?")
                    operators.append('%' + str(search_data.get()) + '%')
            search_headers = " OR ".join(search_headers)
            # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

            # search_cursor.execute("SELECT * FROM " + table + " WHERE \
            # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
            # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...

            search_cursor.execute("SELECT * FROM " + self.copier_table + " WHERE " + search_headers, operators)
            fetch = search_cursor.fetchall()
            search_cursor.close()
            search_conn.close()
            # Κατασκευή tree το up_index -1 == το τελος ("end")
            for n in range(len(fetch)):
                self.copiers_treeview.insert("", "end", values=fetch[n])


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





