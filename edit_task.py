#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 22, 2019 12:31:44 AM EET  platform: Windows NT


import sys
from tkinter import PhotoImage, messagebox, StringVar, IntVar, filedialog
import sqlite3
import os
import logging
from datetime import datetime
from settings import dbase, spare_parts_db, demo
import mail
import add_spare_parts
import insert_spare_parts
import image_viewer
from tkcalendar import DateEntry
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import add_copier_support

# -------------ΔΗΜΗΟΥΡΓΕΙΑ LOG FILE------------------
today = datetime.today().strftime("%d %m %Y")
log_dir = "logs" + "\\" + today + "\\"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)
else:
    pass

log_file_name = "Service Book " + datetime.now().strftime("%d %m %Y") + ".log"
log_file = os.path.join(log_dir, log_file_name)

# log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
root_logger = logging.getLogger()
root_logger.setLevel(logging.DEBUG)  # or whatever
handler = logging.FileHandler(log_file, 'a', 'utf-8')  # or whatever
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')  # or whatever
handler.setFormatter(formatter)  # Pass handler as a parameter, not assign
root_logger.addHandler(handler)
sys.stderr.write = root_logger.error
sys.stdout.write = root_logger.info


def get_service_data():
    purpose_list = []
    actions_list = []
    conn = sqlite3.connect(dbase)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Service_data")
    service_data = cursor.fetchall()
    cursor.close()
    conn.close()
    for n in range(len(service_data)):
        if service_data[n][1] != "" and service_data[n][1] is not None:
            purpose_list.append(service_data[n][1])                        # Σκοπός
        if service_data[n][2] != "" and service_data[n][2] is not None:
            actions_list.append(service_data[n][2])                        # Ενέργειες
    return sorted(actions_list)


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    add_copier_support.set_Tk_var()
    top = edit_task_window(root)
    add_copier_support.init(root, top)
    root.mainloop()


w = None
selected_calendar_id = None
selected_customer_id = None

def create_edit_task_window(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt, selected_calendar_id, selected_customer_id
    rt = root
    w = tk.Toplevel(root)
    selected_calendar_id = args[0]  # Απο το service_book
    selected_customer_id = args[1]  # Απο το service_book
    add_copier_support.set_Tk_var()
    top = edit_task_window(w)
    add_copier_support.init(w, top, *args, **kwargs)
    return (w, top)


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


def destroy_edit_task_window():
    global w
    w.destroy()
    w = None


class edit_task_window:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('clam')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])
        # ==============================  Notebook style  =============
        self.style.map('TNotebook.Tab', background=[('selected', "#6b6b6b"), ('active', "#69ab3a")])
        self.style.map('TNotebook.Tab', foreground=[('selected', "white"), ('active', "white")])

        # self.company_list, self.model_list, self.customers_list = get_copiers_data()
        self.selected_calendar_id = selected_calendar_id
        self.actions_list = get_service_data()
        self.service_id = ""
        self.customer_id = selected_customer_id
        self.copiers = []  # Τα φωτοτυπικά του επιλεγμένου πελάτη
        self.selected_copier = ""  # το επιλεγμένο φωτοτυπικό
        self.selected_serial = ""
        self.copier_id = ""
        self.files = ""
        self.urgent = StringVar()
        self.columns = None
        self.top = top
        top.geometry("600x654+444+228")
        top.minsize(120, 1)
        top.maxsize(1604, 881)
        top.resizable(1, 1)
        top.title("Επεξεργασία εργασίας")
        top.configure(background="#f6f6ee")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.bind('<Escape>', self.quit)
        top.focus()

        self.today = datetime.strptime(today, "%d %m %Y")
        self.day = self.today.day
        self.year = self.today.year
        self.month = self.today.month

        # ==========================  Notebook  ==================================
        self.notebook = ttk.Notebook(top)
        self.notebook.place(relx=0.021, rely=0.006, relheight=0.980, relwidth=0.938)
        self.notebook.configure(takefocus="")

        self.service_frame = tk.Frame(self.notebook)
        self.notebook.add(self.service_frame, padding=3)
        self.notebook.tab(0, text="Συντήρηση", compound="left", underline="-1", )
        self.service_frame.configure(background="#CFD5CE")
        self.service_frame.configure(highlightbackground="#d9d9d9")
        self.service_frame.configure(highlightcolor="black")

        self.spare_parts_frame = tk.Frame(self.notebook)
        self.notebook.add(self.spare_parts_frame, padding=3)
        self.notebook.tab(1, text="Ανταλλακτικά", compound="left", underline="-1", )
        self.spare_parts_frame.configure(background="#CFD5CE")
        self.spare_parts_frame.configure(highlightbackground="#d9d9d9")
        self.spare_parts_frame.configure(highlightcolor="black")

        self.Label2 = tk.Label(self.service_frame)
        self.Label2.place(relx=0.025, rely=0.019, height=31, relwidth=0.938)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#006291")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Calibri} -size 12 -weight bold")
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(relief="groove")
        self.Label2.configure(text='''Επεξεργασία εγρασίας''')

        self.date_label = tk.Label(self.service_frame)
        self.date_label.place(relx=0.025, rely=0.085, height=31, relwidth=0.230)
        self.date_label.configure(activebackground="#f9f9f9")
        self.date_label.configure(activeforeground="black")
        self.date_label.configure(background="#6b6b6b")
        self.date_label.configure(disabledforeground="#a3a3a3")
        self.date_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.date_label.configure(foreground="#ffffff")
        self.date_label.configure(highlightbackground="#d9d9d9")
        self.date_label.configure(highlightcolor="black")
        self.date_label.configure(relief="groove")
        self.date_label.configure(text='''Προγραμ. Ημερομ.''')
        self.date = StringVar(self.service_frame, value=today)
        self.start_date_entry = tk.Entry(self.service_frame)
        self.start_date_entry.place(relx=0.27, rely=0.085, height=31, relwidth=0.593)
        self.start_date_entry.configure(textvariable=self.date)
        self.start_date_entry.configure(background="white")
        self.start_date_entry.configure(disabledforeground="#a3a3a3")
        self.start_date_entry.configure(font="TkFixedFont")
        self.start_date_entry.configure(foreground="#000000")
        self.start_date_entry.configure(insertbackground="black")
        self.start_date_entry.configure(state="readonly")

        self.customer_label = tk.Label(self.service_frame)
        self.customer_label.place(relx=0.025, rely=0.152, height=29, relwidth=0.230)
        self.customer_label.configure(activebackground="#f9f9f9")
        self.customer_label.configure(activeforeground="black")
        self.customer_label.configure(background="#6b6b6b")
        self.customer_label.configure(disabledforeground="#a3a3a3")
        self.customer_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.customer_label.configure(foreground="#ffffff")
        self.customer_label.configure(highlightbackground="#d9d9d9")
        self.customer_label.configure(highlightcolor="black")
        self.customer_label.configure(relief="groove")
        self.customer_label.configure(text='''Πελάτης''')
        self.customer_combobox = ttk.Combobox(self.service_frame)
        self.customer_combobox.place(relx=0.27, rely=0.152, relheight=0.048, relwidth=0.593)
        self.customer_combobox.configure(takefocus="")
        self.customer_combobox.configure(state="readonly")

        self.phone_label = tk.Label(self.service_frame)
        self.phone_label.place(relx=0.025, rely=0.218, height=31, relwidth=0.230)
        self.phone_label.configure(activebackground="#f9f9f9")
        self.phone_label.configure(activeforeground="black")
        self.phone_label.configure(background="#6b6b6b")
        self.phone_label.configure(disabledforeground="#a3a3a3")
        self.phone_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.phone_label.configure(foreground="#ffffff")
        self.phone_label.configure(highlightbackground="#d9d9d9")
        self.phone_label.configure(highlightcolor="black")
        self.phone_label.configure(relief="groove")
        self.phone_label.configure(text='''Τηλέφωνο''')
        self.phone = ""
        self.phone_var = StringVar(w, value=self.phone)
        self.phone_entry = tk.Entry(self.service_frame)
        self.phone_entry.place(relx=0.27, rely=0.218, height=31, relwidth=0.593)
        self.phone_entry.configure(background="white")
        self.phone_entry.configure(disabledforeground="#a3a3a3")
        self.phone_entry.configure(font="TkFixedFont")
        self.phone_entry.configure(foreground="#000000")
        self.phone_entry.configure(insertbackground="black")

        self.customer_copiers_label = tk.Label(self.service_frame)
        self.customer_copiers_label.place(relx=0.025, rely=0.284, height=31, relwidth=0.230)
        self.customer_copiers_label.configure(activebackground="#f9f9f9")
        self.customer_copiers_label.configure(activeforeground="black")
        self.customer_copiers_label.configure(background="#6b6b6b")
        self.customer_copiers_label.configure(disabledforeground="#a3a3a3")
        self.customer_copiers_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.customer_copiers_label.configure(foreground="#ffffff")
        self.customer_copiers_label.configure(highlightbackground="#d9d9d9")
        self.customer_copiers_label.configure(highlightcolor="black")
        self.customer_copiers_label.configure(relief="groove")
        self.customer_copiers_label.configure(text='''Φωτοτυπικό''')
        self.copiers_combobox = ttk.Combobox(self.service_frame)
        self.copiers_combobox.place(relx=0.27, rely=0.284, relheight=0.048, relwidth=0.593)
        self.copiers_combobox.configure(values="")
        self.copiers_combobox.configure(takefocus="")
        self.copiers_combobox.configure(state="readonly")

        self.purpose_label = tk.Label(self.service_frame)
        self.purpose_label.place(relx=0.025, rely=0.351, height=31, relwidth=0.230)
        self.purpose_label.configure(activebackground="#f9f9f9")
        self.purpose_label.configure(activeforeground="black")
        self.purpose_label.configure(background="#6b6b6b")
        self.purpose_label.configure(disabledforeground="#a3a3a3")
        self.purpose_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.purpose_label.configure(foreground="#ffffff")
        self.purpose_label.configure(highlightbackground="#d9d9d9")
        self.purpose_label.configure(highlightcolor="black")
        self.purpose_label.configure(relief="groove")
        self.purpose_label.configure(text='''Σκοπός επίσκεψης''')
        # self.purpose = StringVar()
        self.purpose_entry = tk.Entry(self.service_frame)
        self.purpose_entry.place(relx=0.27, rely=0.351, height=30, relwidth=0.593)
        # self.purpose_entry.configure(textvariable=self.purpose)
        self.purpose_entry.configure(background="white")
        self.purpose_entry.configure(disabledforeground="#a3a3a3")
        self.purpose_entry.configure(font="TkFixedFont")
        self.purpose_entry.configure(foreground="#000000")
        self.purpose_entry.configure(insertbackground="black")

        # Ενέργειες
        self.actions_label = tk.Label(self.service_frame)
        self.actions_label.place(relx=0.025, rely=0.420, height=25, relwidth=0.230)
        self.actions_label.configure(activebackground="#f9f9f9")
        self.actions_label.configure(activeforeground="black")
        self.actions_label.configure(background="#6b6b6b")
        self.actions_label.configure(disabledforeground="#a3a3a3")
        self.actions_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.actions_label.configure(foreground="#ffffff")
        self.actions_label.configure(highlightbackground="#d9d9d9")
        self.actions_label.configure(highlightcolor="black")
        self.actions_label.configure(relief="groove")
        self.actions_label.configure(text='''Ενέργειες''')
        self.actions_combobox = ttk.Combobox(self.service_frame)
        self.actions_combobox.place(relx=0.27, rely=0.420, relheight=0.048, relwidth=0.593)
        self.actions_combobox.configure(values=self.actions_list)
        # self.actions_combobox.configure(textvariable=edit_service_window_support.combobox)
        self.actions_combobox.configure(takefocus="")

        self.add_to_service_data_btn2 = tk.Button(self.service_frame)
        self.add_to_service_data_btn2.place(relx=0.880, rely=0.420, height=29, relwidth=0.060)
        self.add_to_service_data_btn2.configure(background="#006291")
        self.add_to_service_data_img2 = PhotoImage(file="icons/add_to_service_data2.png")
        self.add_to_service_data_btn2.configure(image=self.add_to_service_data_img2)
        self.add_to_service_data_btn2.configure(command=lambda: (self.add_to_service_data("Ενέργειες")))

        self.technician_label = tk.Label(self.service_frame)
        self.technician_label.place(relx=0.025, rely=0.477, height=31, relwidth=0.230)
        self.technician_label.configure(activebackground="#f9f9f9")
        self.technician_label.configure(activeforeground="black")
        self.technician_label.configure(background="#6b6b6b")
        self.technician_label.configure(disabledforeground="#a3a3a3")
        self.technician_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.technician_label.configure(foreground="#ffffff")
        self.technician_label.configure(highlightbackground="#d9d9d9")
        self.technician_label.configure(highlightcolor="black")
        self.technician_label.configure(relief="groove")
        self.technician_label.configure(text='''Τεχνικός''')
        self.technician = StringVar()
        self.technician_entry = tk.Entry(self.service_frame)
        self.technician_entry.place(relx=0.27, rely=0.477, height=30, relwidth=0.593)
        self.technician_entry.configure(textvariable=self.technician)
        self.technician_entry.configure(background="white")
        self.technician_entry.configure(disabledforeground="#a3a3a3")
        self.technician_entry.configure(font="TkFixedFont")
        self.technician_entry.configure(foreground="#000000")
        self.technician_entry.configure(insertbackground="black")

        self.compl_date_label = tk.Label(self.service_frame)
        self.compl_date_label.place(relx=0.025, rely=0.555, height=31, relwidth=0.230)
        self.compl_date_label.configure(activebackground="#f9f9f9")
        self.compl_date_label.configure(activeforeground="black")
        self.compl_date_label.configure(background="#6b6b6b")
        self.compl_date_label.configure(disabledforeground="#a3a3a3")
        self.compl_date_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.compl_date_label.configure(foreground="#ffffff")
        self.compl_date_label.configure(highlightbackground="#d9d9d9")
        self.compl_date_label.configure(highlightcolor="black")
        self.compl_date_label.configure(relief="groove")
        self.compl_date_label.configure(text='''Ημερομ. Ολοκλ''')

        self.compl_date_entry = DateEntry(self.service_frame, width=12, year=self.year, month=self.month, day=self.day,
                                    background='gray20', selectmode='day', foreground='white', borderwidth=5,
                                    locale="el_GR", font=("Calibri", 10, 'bold'), date_pattern='dd/mm/yyyy')
        self.compl_date_entry.place(relx=0.27, rely=0.555, relheight=0.048, relwidth=0.593)

        self.completed_label = tk.Label(self.service_frame)
        self.completed_label.place(relx=0.025, rely=0.635, height=31, relwidth=0.230)
        self.completed_label.configure(activebackground="#f9f9f9")
        self.completed_label.configure(activeforeground="black")
        self.completed_label.configure(background="#6b6b6b")
        self.completed_label.configure(disabledforeground="#a3a3a3")
        self.completed_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.completed_label.configure(foreground="#ffffff")
        self.completed_label.configure(highlightbackground="#d9d9d9")
        self.completed_label.configure(highlightcolor="black")
        self.completed_label.configure(relief="groove")
        self.completed_label.configure(text='''Ολοκληρώθηκε;''')
        self.completed_var = IntVar()
        self.completed_Checkbutton1 = tk.Checkbutton(self.service_frame)
        self.completed_Checkbutton1.place(relx=0.27, rely=0.635, height=31, relwidth=0.102)
        self.completed_Checkbutton1.configure(activebackground="#ececec")
        self.completed_Checkbutton1.configure(activeforeground="white")
        self.completed_Checkbutton1.configure(background="#6b6b6b")

        self.completed_Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.completed_Checkbutton1.configure(font="-family {Calibri} -size 10 -weight bold")
        self.completed_Checkbutton1.configure(highlightcolor="black")
        self.completed_Checkbutton1.configure(justify='left')
        # self.completed_Checkbutton1.configure(text=''' Ναι''')
        self.completed_Checkbutton1.configure(variable=self.completed_var)
        self.completed_Checkbutton1.configure(command=self.on_check)

        self.dte_label = tk.Label(self.service_frame)
        self.dte_label.place(relx=0.450, rely=0.635, height=31, relwidth=0.230)
        self.dte_label.configure(activebackground="#f9f9f9")
        self.dte_label.configure(activeforeground="black")
        self.dte_label.configure(background="#6b6b6b")
        self.dte_label.configure(disabledforeground="#a3a3a3")
        self.dte_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.dte_label.configure(foreground="#ffffff")
        self.dte_label.configure(highlightbackground="#d9d9d9")
        self.dte_label.configure(highlightcolor="black")
        self.dte_label.configure(relief="groove")
        self.dte_label.configure(text='''Δελτ.Τεχν.Εξυπ.''')
        self.dte = StringVar()
        self.dte_entry = tk.Entry(self.service_frame)
        self.dte_entry.place(relx=0.685, rely=0.635, height=30, relwidth=0.150)
        self.dte_entry.configure(textvariable=self.dte)
        self.dte_entry.configure(background="white")
        self.dte_entry.configure(disabledforeground="#a3a3a3")
        self.dte_entry.configure(font="TkFixedFont")
        self.dte_entry.configure(foreground="#000000")
        self.dte_entry.configure(insertbackground="black")

        self.send_mail_btn = tk.Button(self.service_frame)
        self.send_mail_btn.place(relx=0.880, rely=0.635, relheight=0.060, relwidth=0.080)
        self.send_mail_btn.configure(background="#6b6b6b")
        self.send_mail_btn_img1 = PhotoImage(file="icons/send_mail.png")
        self.send_mail_btn.configure(image=self.send_mail_btn_img1)
        self.send_mail_btn.configure(command=self.send_mail)

        self.TSeparator1 = ttk.Separator(self.service_frame)
        self.TSeparator1.place(relx=0.025, rely=0.700, relwidth=0.938)

        self.notes_label = tk.Label(self.service_frame)
        self.notes_label.place(relx=0.025, rely=0.710, height=31, relwidth=0.940)
        self.notes_label.configure(activebackground="#f9f9f9")
        self.notes_label.configure(activeforeground="black")
        self.notes_label.configure(background="#6b6b6b")
        self.notes_label.configure(disabledforeground="#a3a3a3")
        self.notes_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.notes_label.configure(foreground="#ffffff")
        self.notes_label.configure(highlightbackground="#d9d9d9")
        self.notes_label.configure(highlightcolor="black")
        self.notes_label.configure(relief="groove")
        self.notes_label.configure(text='''Σημειώσεις''')

        self.notes_scrolledtext = ScrolledText(self.service_frame)
        self.notes_scrolledtext.place(relx=0.025, rely=0.750, relheight=0.2, relwidth=0.941)
        self.notes_scrolledtext.configure(background="white")
        self.notes_scrolledtext.configure(font="TkTextFont")
        self.notes_scrolledtext.configure(foreground="black")
        self.notes_scrolledtext.configure(highlightbackground="#d9d9d9")
        self.notes_scrolledtext.configure(highlightcolor="black")
        self.notes_scrolledtext.configure(insertbackground="black")
        self.notes_scrolledtext.configure(insertborderwidth="3")
        self.notes_scrolledtext.configure(selectbackground="#c4c4c4")
        self.notes_scrolledtext.configure(selectforeground="black")
        self.notes_scrolledtext.configure(wrap="none")
        self.notes = StringVar()

        # Ανταλλακτικά
        # Counter
        self.counter_label = tk.Label(self.spare_parts_frame)
        self.counter_label.place(relx=0.025, rely=0.070, height=30, relwidth=0.230)
        self.counter_label.configure(activebackground="#f9f9f9")
        self.counter_label.configure(activeforeground="black")
        self.counter_label.configure(background="#6b6b6b")
        self.counter_label.configure(disabledforeground="#a3a3a3")
        self.counter_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.counter_label.configure(foreground="#ffffff")
        self.counter_label.configure(highlightbackground="#d9d9d9")
        self.counter_label.configure(highlightcolor="black")
        self.counter_label.configure(relief="groove")
        self.counter_label.configure(text='''Μετρητής''')
        self.counter_entry = tk.Entry(self.spare_parts_frame)
        self.counter_entry.place(relx=0.27, rely=0.070, height=30, relwidth=0.300)
        self.counter_entry.configure(background="white")
        self.counter_entry.configure(disabledforeground="#a3a3a3")
        self.counter_entry.configure(font="-family {Calibri} -size 10 -weight bold")
        self.counter_entry.configure(foreground="#000000")
        self.counter_entry.configure(highlightbackground="#d9d9d9")
        self.counter_entry.configure(highlightcolor="black")
        self.counter_entry.configure(insertbackground="black")
        self.counter_entry.configure(selectbackground="#c4c4c4")
        self.counter_entry.configure(selectforeground="black")

        # Επόμενο Service
        self.next_service_label = tk.Label(self.spare_parts_frame)
        self.next_service_label.place(relx=0.025, rely=0.140, height=30, relwidth=0.230)
        self.next_service_label.configure(activebackground="#f9f9f9")
        self.next_service_label.configure(activeforeground="black")
        self.next_service_label.configure(background="#6b6b6b")
        self.next_service_label.configure(disabledforeground="#a3a3a3")
        self.next_service_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.next_service_label.configure(foreground="#ffffff")
        self.next_service_label.configure(highlightbackground="#d9d9d9")
        self.next_service_label.configure(highlightcolor="black")
        self.next_service_label.configure(relief="groove")
        self.next_service_label.configure(text='''Επόμενο Service''')
        self.next_service_entry = tk.Entry(self.spare_parts_frame)
        self.next_service_entry.place(relx=0.27, rely=0.140, height=30, relwidth=0.300)
        self.next_service_entry.configure(background="white")
        self.next_service_entry.configure(disabledforeground="#a3a3a3")
        self.next_service_entry.configure(font="TkFixedFont")
        self.next_service_entry.configure(foreground="#000000")
        self.next_service_entry.configure(highlightbackground="#d9d9d9")
        self.next_service_entry.configure(highlightcolor="black")
        self.next_service_entry.configure(insertbackground="black")
        self.next_service_entry.configure(selectbackground="#c4c4c4")
        self.next_service_entry.configure(selectforeground="black")

        self.add_spare_parts_btn = tk.Button(self.spare_parts_frame)
        self.add_spare_parts_btn.place(relx=0.017, rely=0.600, height=50, relwidth=0.380)
        self.add_spare_parts_btn.configure(activebackground="#ececec")
        self.add_spare_parts_btn.configure(activeforeground="#000000")
        self.add_spare_parts_btn.configure(background="#3a7337")
        self.add_spare_parts_btn.configure(disabledforeground="#a3a3a3")
        self.add_spare_parts_btn.configure(foreground="#ffffff")
        self.add_spare_parts_btn.configure(highlightbackground="#d9d9d9")
        self.add_spare_parts_btn.configure(highlightcolor="black")
        self.add_spare_parts_btn.configure(pady="0")
        self.add_spare_parts_btn.configure(text='''    Προσθήκη\n    ανταλλακτικών''')
        self.add_spare_parts_btn.configure(command=self.add_spare_parts)
        self.add_spare_parts_btn_img = PhotoImage(file="icons/add_spare_parts.png")
        self.add_spare_parts_btn.configure(image=self.add_spare_parts_btn_img)
        self.add_spare_parts_btn.configure(compound="left")

        # Ανταλλακτικά
        self.spare_parts_label = tk.Label(self.spare_parts_frame)
        self.spare_parts_label.place(relx=0.017, rely=0.010, height=30, relwidth=0.970)
        self.spare_parts_label.configure(activebackground="#f9f9f9")
        self.spare_parts_label.configure(activeforeground="black")
        self.spare_parts_label.configure(background="#6b6b6b")
        self.spare_parts_label.configure(disabledforeground="#a3a3a3")
        self.spare_parts_label.configure(font=('Calibri', 11, "bold"))
        self.spare_parts_label.configure(foreground="#ffffff")
        self.spare_parts_label.configure(highlightbackground="#d9d9d9")
        self.spare_parts_label.configure(highlightcolor="black")
        self.spare_parts_label.configure(relief="groove")
        self.spare_parts_label.configure(text='''Ανταλλακτικά''')

        # Ανανέωση μετα απο εισαγωγη ανταλλακτικών
        self.refresh_btn = tk.Button(self.spare_parts_frame)
        self.refresh_btn.place(relx=0.450, rely=0.600, height=50, relwidth=0.080)
        self.refresh_btn.configure(background="#0685c4")
        self.refresh_img = PhotoImage(file="icons/refresh.png")
        self.refresh_btn.configure(image=self.refresh_img)
        self.refresh_btn.configure(command=self.get_spare_parts)

        # Διαγραφή ανταλλακτικών
        self.del_spare_parts_btn = tk.Button(self.spare_parts_frame)
        self.del_spare_parts_btn.place(relx=0.575, rely=0.600, height=50, relwidth=0.380)
        self.del_spare_parts_btn.configure(activebackground="#ececec")
        self.del_spare_parts_btn.configure(activeforeground="#000000")
        self.del_spare_parts_btn.configure(background="#6b6b6b")
        self.del_spare_parts_btn.configure(disabledforeground="#a3a3a3")
        self.del_spare_parts_btn.configure(foreground="#ffffff")
        self.del_spare_parts_btn.configure(highlightbackground="#d9d9d9")
        self.del_spare_parts_btn.configure(highlightcolor="black")
        self.del_spare_parts_btn.configure(pady="0")
        self.del_spare_parts_btn.configure(text='''   Διαγραφή επιλεγμένου\n   ανταλλακτικού''')
        self.del_spare_parts_btn.configure(command=self.del_spare_parts)
        self.del_spare_parts_btn_img = PhotoImage(file="icons/delete_spare_parts.png")
        self.del_spare_parts_btn.configure(image=self.del_spare_parts_btn_img)
        self.del_spare_parts_btn.configure(compound="left")

        # Προσθήκη αρχείων
        self.add_files_btn = tk.Button(self.spare_parts_frame)
        self.add_files_btn.place(relx=0.017, rely=0.700, height=50, relwidth=0.380)
        self.add_files_btn.configure(activebackground="#ececec")
        self.add_files_btn.configure(activeforeground="#000000")
        self.add_files_btn.configure(background="green")
        self.add_files_btn.configure(disabledforeground="#a3a3a3")
        self.add_files_btn.configure(foreground="#ffffff")
        self.add_files_btn.configure(highlightbackground="#d9d9d9")
        self.add_files_btn.configure(highlightcolor="black")
        self.add_files_btn.configure(pady="0")
        self.add_files_btn.configure(text='''Προσθήκη αρχείων''')
        self.add_files_btn.configure(command=self.add_files)
        self.add_files_btn_img = PhotoImage(file="icons/add_files.png")
        self.add_files_btn.configure(image=self.add_files_btn_img)
        self.add_files_btn.configure(compound="left")

        # Αρχεία
        self.show_files_btn = tk.Button(self.spare_parts_frame)
        self.show_files_btn.place(relx=0.575, rely=0.700, height=50, relwidth=0.250)
        self.show_files_btn.configure(activebackground="#ececec")
        self.show_files_btn.configure(activeforeground="#000000")
        self.show_files_btn.configure(background="#6b6b6b")
        self.show_files_btn.configure(disabledforeground="red")
        self.show_files_btn.configure(foreground="#ffffff")
        self.show_files_btn.configure(highlightbackground="#d9d9d9")
        self.show_files_btn.configure(highlightcolor="black")
        self.show_files_btn.configure(pady="0")
        self.show_files_btn.configure(text='''Προβολή \nαρχείων''')
        self.show_files_btn.configure(command=self.show_files)
        self.show_files_btn_img = PhotoImage(file="icons/view_files.png")
        self.show_files_btn.configure(image=self.show_files_btn_img)
        self.show_files_btn.configure(compound="left")


        self.spare_parts_treeview = ScrolledTreeView(self.spare_parts_frame)
        self.spare_parts_treeview.place(relx=0.017, rely=0.200, relheight=0.400, relwidth=0.970)
        self.spare_parts_treeview.configure(show="headings", style="mystyle.Treeview", selectmode="browse")

        self.save_btn = tk.Button(w)
        self.save_btn.place(relx=0.296, rely=0.932, height=34, width=147)
        self.save_btn.configure(activebackground="#ececec")
        self.save_btn.configure(activeforeground="#000000")
        self.save_btn.configure(background="#339933")
        self.save_btn.configure(disabledforeground="#a3a3a3")
        self.save_btn.configure(font="-family {Calibri} -size 11 -weight bold")
        self.save_btn.configure(foreground="#ffffff")
        self.save_btn.configure(highlightbackground="#d9d9d9")
        self.save_btn.configure(highlightcolor="black")
        self.save_btn.configure(pady="0")
        self.save_btn.configure(text='''Αποθήκευση''')
        self.save_btn.configure(command=self.add_to_db)

        self.get_data()
        self.get_spare_parts()
        self.check_if_files_exists()

    # Ελεγχος αν υπάρχουν αρχεία για προβολή
    def check_if_files_exists(self):
        con = sqlite3.connect(dbase)
        cursor = con.cursor()
        cursor.execute("SELECT * FROM Service_images WHERE Service_id =?", (self.service_id,))
        images = cursor.fetchall()
        cursor.close()
        con.close()
        if not images:  # αδεια λιστα δλδ δεν υπάρχουν αρχεια και απενεργοποιουμε το κουμπί προβολή αρχείων
            self.show_files_btn.place_forget()

    # Προβολή αρχείων
    def show_files(self):
        image_viewer.create_Toplevel1(w, self.service_id)

    # Προσθήκη αρχείων
    def add_files(self):

        self.files = filedialog.askopenfilenames(initialdir=os.getcwd(), title="Επιλογή αρχείων για προσθήκη",
                                                     filetypes=[("Υπ. αρχεία", "*.jpg *.png *.pdf")])

        if self.files == "":  # αν ο χρήστης επιλεξει ακυρο
            self.top.focus()
            return

        self.top.focus()

    # αλαγή χρώματος κουμπιού ολοκλήρωσης this function will run on click on checkbutton
    def on_check(self):
        off_color = "red"
        on_color = "green"

        if self.completed_var.get():  # if (get current checkbutton state) is "1" then....

            self.completed_Checkbutton1.configure(fg=on_color)
            self.completed_Checkbutton1.configure(text=' Ναι')
        else:
            self.completed_Checkbutton1.configure(fg=off_color)
            self.completed_Checkbutton1.configure(text=" Oxi")

    def add_to_service_data(self, column):

        if column == "Ενέργειες":
            if self.actions_combobox.get() != "" and self.actions_combobox.get() in self.actions_list:
                messagebox.showinfo("Προσοχή", f"Το {self.actions_combobox.get()} υπάρχει στην λίστα")
                self.top.focus()
                return None
            elif self.actions_combobox.get() != "":
                self.actions_list.append(self.actions_combobox.get())
                self.actions_combobox.configure(values=self.actions_list)
                conn = sqlite3.connect(dbase)
                cursor = conn.cursor()
                sql = "INSERT INTO Service_data(Ενέργειες)VALUES(?);"
                cursor.execute(sql, (self.actions_combobox.get(),))
                conn.commit()
                cursor.close()
                conn.close()
                messagebox.showinfo("Info", f"H ενέργεια {self.actions_combobox.get()} Προστέθηκε επιτυχώς")
                self.top.focus()

    def get_spare_parts(self, event=None):
        self.spare_parts_treeview.delete(*self.spare_parts_treeview.get_children())
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT * FROM Ανταλλακτικά WHERE Service_ID =?", (self.service_id,))
        headers = list(map(lambda x: x[0], c.description))
        data = c.fetchall()
        con.close()
        self.spare_parts_treeview["columns"] = [head for head in headers]
        for head in headers:
            if head == "id" or head == "ID" or head == "Id":
                platos = 1
            elif head == "ΠΕΡΙΓΡΑΦΗ":
                platos = 500
            else:
                platos = 121
            self.spare_parts_treeview.heading(head, text=head, anchor="center")
            self.spare_parts_treeview.column(head, width=platos, anchor="center")
        for d in data:
            self.spare_parts_treeview.insert("", "end", values=d)

    # Προσθήκη ανταλλακτικών
    def add_spare_parts(self):
        self.top.focus()
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT ID FROM Πελάτες WHERE Επωνυμία_Επιχείρησης =?", (self.customer_combobox.get(),))
        data = c.fetchall()
        con.close()
        self.customer_id = data[0]
        if spare_parts_db:
            add_spare_parts.create_Toplevel1(self.top, self.service_id, self.customer_id, self.copiers_combobox.get())
        else:
            insert_spare_parts.create_insert_spare_parts_window(self.top, self.service_id, self.customer_id, self.copiers_combobox.get())

    # Διαγραφή ανταλλακτικών
    def del_spare_parts(self):
        selected_spare_part = (self.spare_parts_treeview.set(self.spare_parts_treeview.selection(), '#1'))  # ID
        selected_part_nr = (self.spare_parts_treeview.set(self.spare_parts_treeview.selection(), '#2'))  # Parts Nr
        selected_part_code = (self.spare_parts_treeview.set(self.spare_parts_treeview.selection(), '#4'))  # Κωδικός
        selected_part_pieces = (self.spare_parts_treeview.set(self.spare_parts_treeview.selection(), '#5'))  # Τεμάχια
        answer = messagebox.askokcancel("Προσοχή!", f"Ειστε σήγουρος για την διαγραφή του {selected_part_nr};")
        if not answer:
            self.top.focus()
            return
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("DELETE FROM Ανταλλακτικά WHERE ID=?", (selected_spare_part,))
        con.commit()
        con.close()
        # Προσθήκη πίσω στην αποθήκη
        con = sqlite3.connect(spare_parts_db)
        c = con.cursor()
        # ευρεση προίοντος στην αποθήκη ψάχνοντας όλους τους πίνακες σύμφονα με part_nr και κωδικό
        for table in c.execute("SELECT name FROM sqlite_sequence").fetchall():
            c.execute("SELECT * FROM " + str(table[0]) + " WHERE ΚΩΔΙΚΟΣ =? and PARTS_NR =? ",
                      (selected_part_code, selected_part_nr))
            data = c.fetchall()
            if data:  # αφου το βρούμε πέρνουμε μόνο τον πίνακα
                part_table = table[0]
                break
        # Πέρνουμε τα τεμάχια που έχουν απομείνει
        c.execute("SELECT ΤΕΜΑΧΙΑ FROM " + part_table + " WHERE ΚΩΔΙΚΟΣ =? and PARTS_NR =? ",
                      (selected_part_code, selected_part_nr))
        old_part_pieces = c.fetchall()
        # και προσθέτουμε σε αυτά τα τεμάχια που έχουμε εισάγει στο Service
        new_pieces = str(int(old_part_pieces[0][0]) + int(selected_part_pieces))

        # ενημερώνουμε το προιόν στον πίνακα στην αποθήκη
        c.execute("UPDATE " + part_table + " SET ΤΕΜΑΧΙΑ =?  WHERE ΚΩΔΙΚΟΣ =? and PARTS_NR =?",
                      (new_pieces, selected_part_code, selected_part_nr))

        # messagebox.showinfo("Πληροφορία!",
        #                         f"Το προιόν με κωδικό {selected_part_code}  της εταιρείας {part_table} ενημερώθηκε")
        con.commit()
        c.close()
        con.close()

        self.spare_parts_treeview.delete(self.spare_parts_treeview.selection())

    # Αποστολή email
    def send_mail(self):
        # Αν γράψουμε νέο φωτοτυπικό και όχι απο την λίστα
        if not self.selected_copier:
            self.selected_copier = self.copiers_combobox.get()

        data = [self.date.get(), self.customer_combobox.get(), self.selected_copier, self.purpose_entry.get(),
                self.technician.get(), "", self.urgent.get(), self.phone_var.get(),
                self.notes_scrolledtext.get('1.0', 'end-1c'), self.copier_id, "", 1]
        mail.send_mail(data)

    # Να πάρουμε Δεδομένα
    def get_data(self):
        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT * FROM Calendar;")
        self.columns = list(map(lambda x: x[0], c.description))
        con.close()

        conn = sqlite3.connect(dbase)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Calendar WHERE ID =?", (self.selected_calendar_id,))
        data = cursor.fetchall()
        date = StringVar(self.service_frame, value=data[0][1])
        self.start_date_entry.configure(textvariable=date)
        customer_combobox = StringVar(w, value=data[0][2])
        self.customer_combobox.set(customer_combobox.get())
        copier = StringVar(w, value=data[0][3])
        self.copiers_combobox.set(copier.get())
        purpose = StringVar(w, value=data[0][4])
        self.purpose_entry.configure(textvariable=purpose)
        action = StringVar(w, value=data[0][5])
        self.actions_combobox.set(action.get())
        technician = StringVar(w, value=data[0][6])
        self.technician_entry.configure(textvariable=technician)
        compl_date = StringVar(w, value=data[0][7])

        if data[0][7] == "":
            date_today = datetime.today().strftime("%d/%m/%Y")
            today_data = StringVar(w, value=date_today)
            self.compl_date_entry.setvar(value=today_data)

        else:
            self.compl_date_entry.set_date(compl_date.get())


        urgent = StringVar(w, value=data[0][8])
        self.urgent = urgent.get()
        phone = StringVar(w, value=data[0][9])
        self.phone_entry.configure(textvariable=phone)
        notes = StringVar(w, value=data[0][10])
        self.notes_scrolledtext.insert('1.0', notes.get())
        self.copier_id = data[0][11]
        dte = StringVar(w, value=data[0][12])
        self.dte_entry.configure(textvariable=dte)
        service_id = StringVar(w, value=data[0][13])
        self.service_id = service_id.get()
        counter_entry = StringVar(w, value=data[0][14])
        self.counter_entry.configure(textvariable=counter_entry)
        next_service = StringVar(w, value=data[0][15])
        self.next_service_entry.configure(textvariable=next_service)

        if not data[0][-1]:  # αν η κατάσταση δεν είναι 1 ==>  δλδ δεν ολοκληρόθηκε
            self.completed_Checkbutton1.configure(fg="green")
            self.completed_Checkbutton1.configure(text=' Ναι')
            self.completed_Checkbutton1.select()
        else:
            self.completed_Checkbutton1.configure(fg="red")
            self.completed_Checkbutton1.configure(text=' Οχι')

        cursor.close()
        conn.close()

    # Προσθήκη αρχείων στην βάση
    def add_files_to_db(self):
        if self.files == "":
            return
        con = sqlite3.connect(dbase)
        cu = con.cursor()

        def convert_bytes(size):
            for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:
                if size < 1024.0:
                    return "%3.1f %s" % (size, x)
                size /= 1024.0

            return size

        # Εισαγωγη αρχείων
        for img in self.files:
            base = os.path.basename(img)
            filename, ext = os.path.splitext(base)
            with open(img, 'rb') as f:
                file = f.read()  # Εισαγωγη αρχείων
                # file_size = convert_bytes(len(file))  # Καλύτερα σε bytes για ευκολή ταξινόμηση
                file_size = len(file)  # μεγεθος σε bytes

                cu.execute("INSERT INTO Service_images(Service_ID, Filename, Type, File_size, File, Copier_ID)"
                           "VALUES(?,?,?,?,?,?)", (self.service_id, filename, ext, file_size, sqlite3.Binary(file),
                                                   self.copier_id))

        con.commit()
        con.close()

    def add_to_db(self,):
        edited_columns = []
        for column in self.columns:
            if column != "ID":
                edited_columns.append(column + "=?")
        edited_columns = ",".join(edited_columns)

        completed = self.completed_var.get()

        # Demo
        if demo:
            con = sqlite3.connect(dbase)
            c = con.cursor()
            c.execute("SELECT *  FROM Calendar ;")
            tasks = c.fetchall()
            c.close()
            con.close()
            if len(tasks) > 5:
                messagebox.showerror("Demo",
                                         "Λυπούμαστε η εκδοση αυτή είναι demo και δεν μπορείτε να προσθέσεται νέες"
                                         " εργασίες")

                self.top.focus()
                return

        conn = sqlite3.connect(dbase)
        cursor = conn.cursor()
        # Δημιουργία culumns για της εργασίες
        cursor.execute("SELECT * FROM Calendar")
        headers = list(map(lambda x: x[0], cursor.description))
        culumns = ", ".join(headers)
        values = []
        for head in headers:
            if head == "ID":
                values.append("Null")
            else:
                values.append("?")
        values = ", ".join(values)

        if completed:  # Αν ολοκληρώθηκε
            if len(self.compl_date_entry.get()) != 10:  # Ελεγχος ημερομηνίας ολοκλήροσης
                messagebox.showwarning("Προσοχή", "Η ημερομηνία ολοκλήρωσης πρέπει να έχει την μορφή ΄01/01/2020΄")
                self.top.focus()
                return
            # Το  0 => ανενεργό δλδ ολοκληρόθηκε
            data = [self.start_date_entry.get(), self.customer_combobox.get(), self.copiers_combobox.get(),
                    self.purpose_entry.get(), self.actions_combobox.get(), self.technician_entry.get(),
                    self.compl_date_entry.get(), self.urgent, self.phone_entry.get(),
                    self.notes_scrolledtext.get('1.0', 'end-1c'), self.copier_id, self.dte_entry.get(),
                    self.service_id, self.counter_entry.get(), self.next_service_entry.get(), 0,
                    self.selected_calendar_id]
        else:
            # Το  1 => ανενεργό δλδ δεν ολοκληρόθηκε
            data = [self.start_date_entry.get(), self.customer_combobox.get(), self.copiers_combobox.get(),
                    self.purpose_entry.get(), self.actions_combobox.get(), self.technician_entry.get(),
                    self.compl_date_entry.get(), self.urgent, self.phone_entry.get(),
                    self.notes_scrolledtext.get('1.0', 'end-1c'), self.copier_id, self.dte_entry.get(),
                    self.service_id, self.counter_entry.get(), self.next_service_entry.get(), 1,
                    self.selected_calendar_id]

        cursor.execute("UPDATE Calendar  SET " + edited_columns + " WHERE ID=? ", (tuple(data,)))
        conn.commit()
        conn.close()

        # Δημιουργία culumns για το Service
        conn = sqlite3.connect(dbase)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Service WHERE ID = ?", (self.service_id,))
        columns = list(map(lambda x: x[0], cursor.description))
        values = []
        edited_columns = []
        for column in columns:
            if column != "ID":
                edited_columns.append(column + "=?")
        edited_columns = ",".join(edited_columns)
        # Δεδομένα για το Service
        # CREATE TABLE "Service" (
        # 	"ID"	INTEGER PRIMARY KEY AUTOINCREMENT,   # Service_id
        # 	"Ημερομηνία"	TEXT,      # ---------------  [self.date.get()
        # 	"Σκοπός_Επίσκεψης"	TEXT,  # ---------------  self.purpose_combobox.get()
        # 	"Ενέργειες"	TEXT,          #  --------------  self.actions_combobox.get()
        # 	"Σημειώσεις"	TEXT,       # --------------  self.notes_scrolledtext.get('1.0', 'end-1c')
        # 	"Μετρητής"	TEXT,           # --------------  self.counter_entry.get()
        # 	"Επ_Service"	TEXT,       # --------------  self.next_service_entry.get()
        # 	"Copier_ID"	INTEGER,        # -------------   self.copier_id
        # 	"ΔΤΕ"	TEXT,               # ------------    self.dte_entry.get()
        # 	FOREIGN KEY("Copier_ID") REFERENCES "Φωτοτυπικά"("ID")
        # )
        data = [self.date.get(), self.purpose_entry.get(), self.actions_combobox.get(),
                self.notes_scrolledtext.get('1.0', 'end-1c'), self.counter_entry.get(), self.next_service_entry.get(),
                self.copier_id, self.dte_entry.get(), self.service_id]

        cursor.execute("UPDATE Service  SET " + edited_columns + " WHERE ID=? ", (tuple(data)))
        conn.commit()
        conn.close()
        self.add_files_to_db()
        messagebox.showinfo("Info", f"H εργασία αποθηκεύτηκε επιτυχώς στον πελάτη {self.customer_combobox.get()}")
        self.top.destroy()

        return None

    def quit(self, event):
        self.top.destroy()

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
