#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 22, 2019 12:31:44 AM EET  platform: Windows NT


import sys
from tkinter import messagebox, StringVar
import sqlite3
import enable_copiers_support
from settings import dbase, root_logger  # settings


# -------------ΔΗΜΗΟΥΡΓΕΙΑ LOG FILE  ------------------
sys.stderr.write = root_logger.error
sys.stdout.write = root_logger.info
print(f"{100 * '*'}\n\t\t\t\t\t\t\t\t\t\tFILE {__name__}")
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True


# Να πάρουμε Εταιρεία και μοντέλο φωτοτυπικού
def get_copiers_data():
    conn = sqlite3.connect(dbase)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Φωτοτυπικά WHERE Κατάσταση = 0")
    copiers_data = cursor.fetchall()
    serials = []
    for n in range(len(copiers_data)):
        serials.append(copiers_data[n][2])
    cursor.close()
    conn.close()

    return sorted(copiers_data), serials


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    enable_copiers_support.set_Tk_var()
    top = enable_copiers_window(root)
    enable_copiers_support.init(root, top)
    root.mainloop()


w = None
rt = None


def create_enable_copiers_window(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    enable_copiers_support.set_Tk_var()
    top = enable_copiers_window(w)
    enable_copiers_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_enable_copiers_window():
    global w
    w.destroy()
    w = None


class enable_copiers_window:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('clam')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])
        # ==============================  Notebook style  =============
        self.style.map('TNotebook.Tab', background=[('selected', "#6b6b6b"), ('active', "#69ab3a")])
        self.style.map('TNotebook.Tab', foreground=[('selected', "white"), ('active', "white")])
        self.top = top
        top.geometry("505x524+444+228")
        top.minsize(120, 1)
        top.maxsize(1604, 881)
        top.resizable(1, 1)
        top.title("Ενεργοποίηση φωτοτυπικού")
        top.configure(background="#f6f6ee")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.bind('<Escape>', self.quit)
        top.focus()
        self.copiers_list, self.serials = get_copiers_data()
        self.selected_serial = ""

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.025, rely=0.019, height=31, relwidth=0.938)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#006291")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Calibri} -size 12 -weight bold")
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(relief="groove")
        self.Label2.configure(text='''Ενεργοποίηση φωτοτυπικού''')

        self.select_copier_label = tk.Label(top)
        self.select_copier_label.place(relx=0.025, rely=0.095, height=31, relwidth=0.250)
        self.select_copier_label.configure(activebackground="#f9f9f9")
        self.select_copier_label.configure(activeforeground="black")
        self.select_copier_label.configure(background="#808000")
        self.select_copier_label.configure(disabledforeground="#a3a3a3")
        self.select_copier_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.select_copier_label.configure(foreground="#ffffff")
        self.select_copier_label.configure(highlightbackground="#d9d9d9")
        self.select_copier_label.configure(highlightcolor="black")
        self.select_copier_label.configure(relief="groove")
        self.select_copier_label.configure(text='''Επιλογή φωτοτυπικού''')
        self.select_copier_combobox = ttk.Combobox(top)
        self.select_copier_combobox.place(relx=0.3, rely=0.095, relheight=0.059, relwidth=0.593)
        self.select_copier_combobox.configure(values=self.copiers_list)
        self.select_copier_combobox.configure(takefocus="")
        self.select_copier_combobox.bind('<<ComboboxSelected>>', self.show_data)

        self.customer_label = tk.Label(top)
        self.customer_label.place(relx=0.025, rely=0.170, height=31, relwidth=0.250)
        self.customer_label.configure(activebackground="#f9f9f9")
        self.customer_label.configure(activeforeground="black")
        self.customer_label.configure(background="#808000")
        self.customer_label.configure(disabledforeground="#a3a3a3")
        self.customer_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.customer_label.configure(foreground="#ffffff")
        self.customer_label.configure(highlightbackground="#d9d9d9")
        self.customer_label.configure(highlightcolor="black")
        self.customer_label.configure(relief="groove")
        self.customer_label.configure(text='''Πελάτης''')
        self.customer = StringVar()
        self.customer_entry = tk.Entry(top)
        self.customer_entry.place(relx=0.3, rely=0.170, height=30, relwidth=0.593)
        self.customer_entry.configure(textvariable=self.customer)
        self.customer_entry.configure(background="white")
        self.customer_entry.configure(disabledforeground="#a3a3a3")
        self.customer_entry.configure(font="TkFixedFont")
        self.customer_entry.configure(foreground="#000000")
        self.customer_entry.configure(highlightbackground="#d9d9d9")
        self.customer_entry.configure(highlightcolor="black")
        self.customer_entry.configure(insertbackground="black")
        self.customer_entry.configure(selectbackground="#c4c4c4")
        self.customer_entry.configure(selectforeground="black")

        self.serial_label = tk.Label(top)
        self.serial_label.place(relx=0.025, rely=0.248, height=31, relwidth=0.250)
        self.serial_label.configure(activebackground="#f9f9f9")
        self.serial_label.configure(activeforeground="black")
        self.serial_label.configure(background="#808000")
        self.serial_label.configure(disabledforeground="#a3a3a3")
        self.serial_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.serial_label.configure(foreground="#ffffff")
        self.serial_label.configure(highlightbackground="#d9d9d9")
        self.serial_label.configure(highlightcolor="black")
        self.serial_label.configure(relief="groove")
        self.serial_label.configure(text='''Serial''')
        self.serial_entry = tk.Entry(top)
        self.serial_entry.place(relx=0.3, rely=0.248, height=30, relwidth=0.593)
        self.serial_entry.configure(background="white")
        self.serial_entry.configure(disabledforeground="#a3a3a3")
        self.serial_entry.configure(font="TkFixedFont")
        self.serial_entry.configure(foreground="#000000")
        self.serial_entry.configure(highlightbackground="#d9d9d9")
        self.serial_entry.configure(highlightcolor="black")
        self.serial_entry.configure(insertbackground="black")
        self.serial_entry.configure(selectbackground="#c4c4c4")
        self.serial_entry.configure(selectforeground="black")

        self.start_label = tk.Label(top)
        self.start_label.place(relx=0.025, rely=0.324, height=31, relwidth=0.250)
        self.start_label.configure(activebackground="#f9f9f9")
        self.start_label.configure(activeforeground="black")
        self.start_label.configure(background="#808000")
        self.start_label.configure(disabledforeground="#a3a3a3")
        self.start_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.start_label.configure(foreground="#ffffff")
        self.start_label.configure(highlightbackground="#d9d9d9")
        self.start_label.configure(highlightcolor="black")
        self.start_label.configure(relief="groove")
        self.start_label.configure(text='''Εναρξη''')
        self.start_entry = tk.Entry(top)
        self.start_entry.place(relx=0.3, rely=0.324, height=30, relwidth=0.593)
        self.start_entry.configure(background="white")
        self.start_entry.configure(disabledforeground="#a3a3a3")
        self.start_entry.configure(font="TkFixedFont")
        self.start_entry.configure(foreground="#000000")
        self.start_entry.configure(insertbackground="black")

        self.start_counter_label = tk.Label(top)
        self.start_counter_label.place(relx=0.025, rely=0.401, height=31, relwidth=0.250)
        self.start_counter_label.configure(activebackground="#f9f9f9")
        self.start_counter_label.configure(activeforeground="black")
        self.start_counter_label.configure(background="#808000")
        self.start_counter_label.configure(disabledforeground="#a3a3a3")
        self.start_counter_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.start_counter_label.configure(foreground="#ffffff")
        self.start_counter_label.configure(highlightbackground="#d9d9d9")
        self.start_counter_label.configure(highlightcolor="black")
        self.start_counter_label.configure(relief="groove")
        self.start_counter_label.configure(text='''Μετρητής έναρξης''')
        self.start_counter_entry = tk.Entry(top)
        self.start_counter_entry.place(relx=0.3, rely=0.401, height=30, relwidth=0.593)
        self.start_counter_entry.configure(background="white")
        self.start_counter_entry.configure(disabledforeground="#a3a3a3")
        self.start_counter_entry.configure(font="TkFixedFont")
        self.start_counter_entry.configure(foreground="#000000")
        self.start_counter_entry.configure(insertbackground="black")

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.025, rely=0.553, relwidth=0.938)

        self.notes_label = tk.Label(top)
        self.notes_label.place(relx=0.025, rely=0.573, height=31, relwidth=0.940)
        self.notes_label.configure(activebackground="#f9f9f9")
        self.notes_label.configure(activeforeground="black")
        self.notes_label.configure(background="#6b6b6b")
        self.notes_label.configure(disabledforeground="#a3a3a3")
        self.notes_label.configure(font="-family {Calibri} -size 10 -weight bold")
        self.notes_label.configure(foreground="#ffffff")
        self.notes_label.configure(highlightbackground="#d9d9d9")
        self.notes_label.configure(highlightcolor="black")
        self.notes_label.configure(relief="groove")
        self.notes_label.configure(text='''Σημειώσεις''')
        self.notes = StringVar()
        self.notes_scrolledtext = ScrolledText(top)
        self.notes_scrolledtext.place(relx=0.025, rely=0.649, relheight=0.25, relwidth=0.941)
        self.notes_scrolledtext.insert('1.0', self.notes.get())
        self.notes_scrolledtext.configure(background="white")
        self.notes_scrolledtext.configure(font="TkTextFont")
        self.notes_scrolledtext.configure(foreground="black")
        self.notes_scrolledtext.configure(highlightbackground="#d9d9d9")
        self.notes_scrolledtext.configure(highlightcolor="black")
        self.notes_scrolledtext.configure(insertbackground="black")
        self.notes_scrolledtext.configure(insertborderwidth="3")
        self.notes_scrolledtext.configure(selectbackground="#c4c4c4")
        self.notes_scrolledtext.configure(selectforeground="black")
        self.notes_scrolledtext.configure(wrap="none")

        self.save_btn = tk.Button(top)
        self.save_btn.place(relx=0.296, rely=0.916, height=34, relwidth=0.250)
        self.save_btn.configure(activebackground="#ececec")
        self.save_btn.configure(activeforeground="#000000")
        self.save_btn.configure(background="#808000")
        self.save_btn.configure(disabledforeground="#a3a3a3")
        self.save_btn.configure(font="-family {Calibri} -size 11 -weight bold")
        self.save_btn.configure(foreground="#ffffff")
        self.save_btn.configure(highlightbackground="#d9d9d9")
        self.save_btn.configure(highlightcolor="black")
        self.save_btn.configure(pady="0")
        self.save_btn.configure(text='''Ενεργοποίηση''')
        self.save_btn.configure(command=self.enable_copier)

        if not self.copiers_list:
            messagebox.showerror("Προσοχή", "Δεν υπάρχουν απενεργοποιημένα φωτοτυπικά")
            rt.focus()
            self.top.destroy()

    def quit(self, event):
        rt.focus()
        self.top.destroy()

    def show_data(self, event):
        selected_copiers = self.select_copier_combobox.get()

        for serial in self.serials:
            if serial in selected_copiers:
                self.selected_serial = serial
                serial_var = StringVar(value=serial)
                self.serial_entry.configure(textvariable=serial_var, state="readonly")

        con = sqlite3.connect(dbase)
        c = con.cursor()
        c.execute("SELECT * FROM Φωτοτυπικά WHERE Serial = ?", (self.selected_serial,))
        copier_data = c.fetchall()


        start_counter_var = StringVar(value=copier_data[0][4])
        self.start_counter_entry.configure(textvariable=start_counter_var, state="readonly")

        start_entry_var = StringVar(value=copier_data[0][3])
        self.start_entry.configure(textvariable=start_entry_var, state="readonly")

        customer_id = copier_data[0][5]

        c.execute("SELECT Επωνυμία_Επιχείρησης FROM Πελάτες WHERE ID =?", (customer_id,))
        customer_name = c.fetchall()
        customer_name = customer_name[0][0]
        c.close()
        con.close()
        customer_name_var = StringVar(value=customer_name)
        self.customer_entry.configure(textvariable=customer_name_var, state="readonly")

        copier_data_var = StringVar(value=copier_data[0][6])
        self.notes_scrolledtext.delete('1.0', 'end-1c')
        self.notes_scrolledtext.insert("1.0", copier_data_var.get())

    def enable_copier(self):

        # πρέπει πρώτα να πάρουμε το  ID του πελάτη για να το ορίσουμε στο φωτοτυπικό
        conn = sqlite3.connect(dbase)
        cursor = conn.cursor()
        cursor.execute("UPDATE Φωτοτυπικά SET Κατάσταση =1 WHERE Serial =? ", (self.selected_serial,))
        conn.commit()
        cursor.close()
        conn.close()
        messagebox.showinfo("Προσοχή", f"Το {self.select_copier_combobox.get()} \n εργοποιήθηκε επιτυχώς")
        rt.focus()
        self.top.destroy()

        return None


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
